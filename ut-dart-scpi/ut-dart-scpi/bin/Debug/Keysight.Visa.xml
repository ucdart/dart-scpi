<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Keysight.Visa</name>
    </assembly>
    <members>
        <member name="T:Keysight.Visa.KeysightAttributeString">
            <summary>
            Defines a list of standard (native) VISA C string attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeString method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.KeysightIOLibrariesPath">
            <summary>
            A Keysight-specific VISA read-only attribute with value 0x0fff003c (VI_AGATTR_IOLIBRARIES_DIR). 
            This VISA C resource manager attribute cannot be accessed directly - use the corresponding 
            <see cref="P:Keysight.Visa.ResourceManager.IOLibrariesPath"/> property instead.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.KeysightIOLibrariesRegistryKey">
            <summary>
            A Keysight-specific VISA read-only attribute with value 0x0fff003d (VI_AGATTR_IOLIBRARIES_REG_PATH). 
            This VISA C resource manager attribute cannot be accessed directly - use the corresponding 
            <see cref="P:Keysight.Visa.ResourceManager.IOLibrariesRegistryKey"/> property instead.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.KeysightInterfaceSerialNumber">
            <summary>
            A Keysight-specific VISA read-only attribute with value 0x0fff0045 (VI_AGATTR_INTFC_SERIALNUMBER). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/> for GPIB Interface sessions.  
            There is no corresponding VISA.NET property.  If the interface does not have a serial number it 
            returns an empty string.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.KeysightVisaFrameworkPath">
            <summary>
            A Keysight-specific VISA read-only attribute with value 0x0fff003b (VI_AGATTR_VISA_FRAMEWORK_DIR). 
            This VISA C resource manager attribute cannot be accessed directly - use the corresponding 
            <see cref="P:Keysight.Visa.ResourceManager.VisaFrameworkPath"/> property instead.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.InterfaceName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff00e9 (VI_ATTR_INTF_INST_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.HardwareInterfaceName"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.ManufacturerName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0072 (VI_ATTR_MANF_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiBackplaneSession.ManufacturerName"/>, <see cref="P:Keysight.Visa.PxiSession.ManufacturerName"/>, 
            <see cref="P:Keysight.Visa.UsbSession.ManufacturerName"/>, or <see cref="P:Keysight.Visa.VxiSession.ManufacturerName"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.ModelName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0077 (VI_ATTR_MODEL_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiBackplaneSession.ModelName"/>, <see cref="P:Keysight.Visa.PxiSession.ModelName"/>, 
            <see cref="P:Keysight.Visa.UsbSession.ModelName"/>, or <see cref="P:Keysight.Visa.VxiSession.ModelName"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.PxiSlotPath">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0207 (VI_ATTR_PXI_SLOTPATH).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.SlotPath"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.ResourceClass">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0001 (VI_ATTR_RSRC_CLASS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.ResourceClass"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.ResourceManufacturerName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0174 (VI_ATTR_RSRC_MANF_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/> and any session class.  
            This attribute returns the value that applies to the underlying Keysight VISA C implementation 
            rather than the VISA.NET implementation.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.ResourceName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0002 (VI_ATTR_RSRC_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.ResourceName"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.TcpAddress">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0195 (VI_ATTR_TCPIP_ADDR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.Address"/> or <see cref="P:Keysight.Visa.TcpipSocketSession.Address"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.TcpDeviceName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0199 (VI_ATTR_TCPIP_DEVICE_NAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.DeviceName"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.TcpHostName">
            <summary>
            A standard VISA read-only attribute with value 0xbfff0196 (VI_ATTR_TCPIP_HOSTNAME).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.HostName"/> or <see cref="P:Keysight.Visa.TcpipSocketSession.HostName"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeString.UsbSerialNumber">
            <summary>
            A standard VISA read-only attribute with value 0xbfff01a0 (VI_ATTR_USB_SERIAL_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.UsbSession.UsbSerialNumber"/> property.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightAttributeBoolean">
            <summary>
            Defines a list of standard (native) VISA C Boolean attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeBoolean method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.KeysightExportEnabled">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0020 (VI_AGATTR_EXPORT_ENABLED). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.ExportEnabled"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.KeysightFindExportedResourcesOnly">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0021 (VI_AGATTR_FIND_ONLY_EXPORTED_RSRCS). 
            This VISA C resource manager attribute cannot be accessed directly - use the corresponding 
            <see cref="P:Keysight.Visa.ResourceManager.FindExportedResourcesOnly"/> property instead.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.KeysightWaitForLockRelease">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff002b (VI_AGATTR_LOCKWAIT). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.WaitForLockRelease"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.KeysightReturnAll">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0062 (VI_AGATTR_RETURN_ALL).
            This VISA C resource manager attribute cannot be accessed directly - use the corresponding 
            <see cref="P:Keysight.Visa.ResourceManager.ReturnAll"/> property instead.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.AllowWriteCombining">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0246 (VI_ATTR_PXI_ALLOW_WRITE_COMBINE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.AllowWriteCombining"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.AllowDma">
            <summary>
            A standard VISA read/write attribute with value 0x3fff001e (VI_ATTR_DMA_ALLOW_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.AllowDma"/>, <see cref="P:Keysight.Visa.GpibSession.AllowDma"/>, 
            <see cref="P:Keysight.Visa.RegisterBasedSession.AllowDma"/>, or <see cref="P:Keysight.Visa.VxiSession.AllowDma"/> 
            properties, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.FastDataChannelUsePair">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0013 (VI_ATTR_FDC_USE_PAIR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.FastDataChannelUsePair"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.GpibIsControllerInCharge">
            <summary>
            A standard VISA read-only attribute with value 0x3fff005e (VI_ATTR_GPIB_CIC_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.IsControllerInCharge"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.GpibIsSystemController">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0068 (VI_ATTR_GPIB_SYS_CNTRL_STATE).
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.IsSystemController"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.GpibReceivedIsControllerInCharge">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4193 (VI_ATTR_GPIB_RECV_CIC_STATE).  
            This attribute applies to GPIB CIC events. 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Ivi.Visa.GpibControllerInChargeEventArgs.IsControllerInCharge"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.GpibRepeatAddressingEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff001b (VI_ATTR_GPIB_READDR_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibSession.ReaddressingEnabled"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.GpibUnaddressEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0184 (VI_ATTR_GPIB_UNADDR_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibSession.UnaddressingEnabled"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.ImmediateServant">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0100 (VI_ATTR_IMMEDIATE_SERV).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.IsImmediateServant"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.Is4882Compliant">
            <summary>
            A standard VISA read-only attribute with value 0x3fff019f (VI_ATTR_4882_COMPLIANT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.UsbSession.Is4882Compliant"/> or <see cref="P:Keysight.Visa.VxiSession.Is4882Compliant"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.PxiIsExpress">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0240 (VI_ATTR_PXI_IS_EXPRESS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.IsExpress"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.SendEndEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0016 (VI_ATTR_SEND_END_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.SendEndEnabled"/> or <see cref="P:Keysight.Visa.MessageBasedSession.SendEndEnabled"/> 
            (inherited by GPIB, Serial, TCPIP, TCPIP socket, USB, and VXI sessions) 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.SuppressEndEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0036 (VI_ATTR_SUPPRESS_END_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/> for GPIB interface and message-based 
            (GPIB, Serial, TCPIP, TCPIP socket, USB, and VXI) sessions.  There is no corresponding 
            property in VISA.NET because this attribute was designed to support obsolete instruments.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.TcpHiSLIPOverlapEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0300 (VI_ATTR_TCPIP_HISLIP_OVERLAP_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.HiSLIPOverlapEnabled"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.TcpIsHiSLIP">
            <summary>
            A standard VISA read only attribute with value 0x3fff0303 (VI_ATTR_TCPIP_IS_HISLIP).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.IsHiSLIP"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.TcpKeepAlive">
            <summary>
            A standard VISA read/write attribute with value 0x3fff019b (VI_ATTR_TCPIP_KEEPALIVE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSocketSession.KeepAlive"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.TcpNoDelay">
            <summary>
            A standard VISA read/write attribute with value 0x3fff019a (VI_ATTR_TCPIP_NODELAY).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSocketSession.NoDelay"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeBoolean.TerminationCharacterEnabled">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0038 (VI_ATTR_TERMCHAR_EN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacterEnabled"/> or 
            <see cref="P:Keysight.Visa.MessageBasedSession.TerminationCharacterEnabled"/> 
            (inherited by GPIB, Serial, TCPIP, TCPIP socket, USB, and VXI sessions) 
            properties, depending on the session type.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightAttributeByte">
            <summary>
            Defines a list of standard (native) VISA C byte attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeByte method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeByte.DeviceStatusByte">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0189 (VI_ATTR_DEV_STATUS_BYTE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.DeviceStatusByte"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeByte.SerialReplaceCharacter">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00be (VI_ATTR_ASRL_REPLACE_CHAR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.ReplacementCharacter"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeByte.SerialXOffCharacter">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00c2 (VI_ATTR_ASRL_XOFF_CHAR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.XOffCharacter"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeByte.SerialXOnCharacter">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00c1 (VI_ATTR_ASRL_XON_CHAR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.XOnCharacter"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeByte.TerminationCharacter">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0018 (VI_ATTR_TERMCHAR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacter"/> or 
            <see cref="P:Keysight.Visa.MessageBasedSession.TerminationCharacter"/> 
            (inherited by GPIB, Serial, TCPIP, TCPIP socket, USB, and VXI sessions) 
            property, depending on the session type.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightAttributeInt16">
            <summary>
            Defines a list of standard (native) VISA C 16-bit integer attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeInt16 method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.KeysightRemoteInterfaceType">
            <summary>
            A Keysight-specific read-only VISA attribute with value 0x0fff001c (VI_AGATTR_REMOTE_INTF_TYPE). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.RemoteHardwareInterfaceType"/> property.  The attribute 
            applies to TCPIP sessions on the local PC that are connected to another session on a remote PC.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.CommanderLogicalAddress">
            <summary>
            A standard VISA read-only attribute with value 0x3fff006b (VI_ATTR_CMDR_LA).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.CommanderLogicalAddress"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.DestinationAccess">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0039 (VI_ATTR_DEST_ACCESS_PRIV).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.DestinationAccessPrivilege"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.DestinationByteOrder">
            <summary>
            A standard VISA read/write attribute with value 0x3fff003a (VI_ATTR_DEST_BYTE_ORDER).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.DestinationByteOrder"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.FastDataChannel">
            <summary>
            A standard VISA read/write attribute with value 0x3fff000d (VI_ATTR_FDC_CHNL).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.FastDataChannelNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.FastDataChannelMode">
            <summary>
            A standard VISA read/write attribute with value 0x3fff000f (VI_ATTR_FDC_MODE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.FastDataChannelUseStreaming"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibAddressedState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff005c (VI_ATTR_GPIB_ADDR_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.AddressState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibAtnState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0057 (VI_ATTR_GPIB_ATN_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.AtnState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibHS488CableLength">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0069 (VI_ATTR_GPIB_HS488_CBL_LEN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.HS488CableLength"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibNdacState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0062 (VI_ATTR_GPIB_NDAC_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.NdacState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibPrimaryAddress">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0172 (VI_ATTR_GPIB_PRIMARY_ADDR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and (when writable)
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.PrimaryAddress"/> or <see cref="P:Keysight.Visa.GpibSession.PrimaryAddress"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibRenState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0181 (VI_ATTR_GPIB_REN_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.RenState"/> or <see cref="P:Keysight.Visa.GpibSession.RenState"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibSecondaryAddress">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0173 (VI_ATTR_GPIB_SECONDARY_ADDR).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and (when writable)
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.SecondaryAddress"/> or <see cref="P:Keysight.Visa.GpibSession.SecondaryAddress"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.GpibSrqState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0067 (VI_ATTR_GPIB_SRQ_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.SrqState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.InterfaceNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0176 (VI_ATTR_INTF_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.HardwareInterfaceNumber"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.InterfaceParentNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0101 (VI_ATTR_INTF_PARENT_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> for VXI message-based 
            instrument and memory access sessions.  There is no corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.InterfaceType">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0171 (VI_ATTR_INTF_TYPE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.HardwareInterfaceType"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.IOProtocol">
            <summary>
            A standard VISA read/write attribute with value 0x3fff001c (VI_ATTR_IO_PROT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibInterfaceSession.IOProtocol"/> or <see cref="P:Keysight.Visa.MessageBasedSession.IOProtocol"/> 
            (inherited by GPIB, Serial, TCPIP, TCPIP socket, USB, and VXI sessions) 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.MainframeLogicalAddress">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0070 (VI_ATTR_MAINFRAME_LA).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.ChassisLogicalAddress"/> or <see cref="P:Keysight.Visa.VxiBackplaneSession.ChassisLogicalAddress"/> 
            properties, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ManufacturerId">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00d9 (VI_ATTR_MANF_ID).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.ManufacturerId"/>, <see cref="P:Keysight.Visa.UsbSession.ManufacturerId"/>, 
            or <see cref="P:Keysight.Visa.VxiSession.ManufacturerId"/> properties, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.MemorySpace">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00de (VI_ATTR_MEM_SPACE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.MemorySpace"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ModelCode">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00df (VI_ATTR_MODEL_CODE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.ModelCode"/>, <see cref="P:Keysight.Visa.UsbSession.ModelCode"/>, 
            or <see cref="P:Keysight.Visa.VxiSession.ModelCode"/> properties, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiActualLinkWidth">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0243 (VI_ATTR_PXI_ACTUAL_LWIDTH).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.ActualLinkWidth"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiBackplaneDestinationTriggerBus">
            <summary>
            A standard VISA read/write attribute with value 0x3fff020e (VI_ATTR_PXI_DEST_TRIG_BUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)"/> (any overload) 
            and <see cref="M:Keysight.Visa.PxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)"/> 
            methods.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiBackplaneSourceTriggerBus">
            <summary>
            A standard VISA read/write attribute with value 0x3fff020d (VI_ATTR_PXI_SRC_TRIG_BUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)"/> (any overload) 
            and <see cref="M:Keysight.Visa.PxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine)"/> (any overload)
            methods.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiBusNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0205 (VI_ATTR_PXI_BUS_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.BusNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiChassis">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0206 (VI_ATTR_PXI_CHASSIS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.ChassisNumber"/> or <see cref="P:Keysight.Visa.PxiBackplaneSession.ChassisNumber"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiDeviceNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0201 (VI_ATTR_PXI_DEV_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.DeviceNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiDStarBus">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0244 (VI_ATTR_PXI_DSTAR_BUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.DstarBusNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiDStarSet">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0245 (VI_ATTR_PXI_DSTAR_SET).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.DstarLineSet"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiFunctionNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0202 (VI_ATTR_PXI_FUNC_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.FunctionNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMaximumLinkWidth">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0242 (VI_ATTR_PXI_MAX_LWIDTH).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MaxLinkWidth"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar0">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0211 (VI_ATTR_PXI_MEM_TYPE_BAR0).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar0"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar1">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0212 (VI_ATTR_PXI_MEM_TYPE_BAR1).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar1"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar2">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0213 (VI_ATTR_PXI_MEM_TYPE_BAR2).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar2"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar3">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0214 (VI_ATTR_PXI_MEM_TYPE_BAR3).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar3"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar4">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0215 (VI_ATTR_PXI_MEM_TYPE_BAR4).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar4"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiMemoryTypeBar5">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0216 (VI_ATTR_PXI_MEM_TYPE_BAR5).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.MemTypeBar5"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiReceivedInterruptSequence">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4240 (VI_ATTR_PXI_RECV_INTR_SEQ).  
            This attribute applies to PXI interrupt events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the PXI interrupt event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)"/> to return the value.  
            However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.PxiInterruptEventArgs.Sequence"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiSlotLinkWidth">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0241 (VI_ATTR_PXI_SLOT_LWIDTH).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.SlotLinkWidth"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiSlotLocalBusLeft">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0208 (VI_ATTR_PXI_SLOT_LBUS_LEFT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.SlotLocalBusLeft"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiSlotLocalBusRight">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0209 (VI_ATTR_PXI_SLOT_LBUS_RIGHT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.SlotLocalBusRight"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiStarTriggerBus">
            <summary>
            A standard VISA read-only attribute with value 0x3fff020b (VI_ATTR_PXI_STAR_TRIG_BUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.StarTriggerBus"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiStarTriggerLine">
            <summary>
            A standard VISA read-only attribute with value 0x3fff020c (VI_ATTR_PXI_STAR_TRIG_LINE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.StarTriggerLine"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.PxiTriggerBus">
            <summary>
            A standard VISA read only attribute with value 0x3fff020a (VI_ATTR_PXI_TRIG_BUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.TriggerBus"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ReadBufferOperationMode">
            <summary>
            A standard VISA read/write attribute with value 0x3fff002a (VI_ATTR_RD_BUF_OPER_MODE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/> for GPIB, Serial, TCPIP, USB, 
            and VXI sessions, GPIB interface sessions, and TCPIP socket sessions.  There is no 
            corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ReceivedInterruptLevel">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4041 (VI_ATTR_RECV_INTR_LEVEL).  
            This attribute applies to VXI interrupt events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the VXI interrupt event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)"/> to return the 
            value.  However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.VxiInterruptEventArgs.IrqLevel"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ReceivedSignalProcessorStatusId">
            <summary>
            A standard VISA read-only attribute with value 0xbfff4011 (VI_ATTR_SIGP_STATUS_ID).  
            This attribute applies to VXI signal processor events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the VXI signal processor event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)"/> to return the value.  
            However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.VxiSignalProcessorEventArgs.StatusId"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ReceivedTriggerId">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4012 (VI_ATTR_RECV_TRIG_ID).  
            This attribute applies to VXI trigger events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the VXI trigger event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)"/> to return the value.  
            However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.VxiTriggerEventArgs.TriggerLine"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.ResourceManufacturerId">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0175 (VI_ATTR_RSRC_MANF_ID).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and any session class.  
            This attribute returns the value that applies to the underlying Keysight VISA C implementation 
            rather than the VISA.NET implementation.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialCtsState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00ae (VI_ATTR_ASRL_CTS_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.ClearToSendState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialDataBits">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0022 (VI_ATTR_ASRL_DATA_BITS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.DataBits"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialDcdState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00af (VI_ATTR_ASRL_DCD_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.DataCarrierDetectState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialDsrState">
            <summary>
            A standard VISA read-only attribute with value 0x3FFF00b1 (VI_ATTR_ASRL_DSR_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.DataSetReadyState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialDtrState">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00b2 (VI_ATTR_ASRL_DTR_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.DataTerminalReadyState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialEndIn">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00b3 (VI_ATTR_ASRL_END_IN).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.ReadTermination"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialEndOut">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00b4 (VI_ATTR_ASRL_END_OUT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.WriteTermination"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialFlowControl">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0025 (VI_ATTR_ASRL_FLOW_CNTRL).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.FlowControl"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialParity">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0023 (VI_ATTR_ASRL_PARITY).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.Parity"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialRIState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00bf (VI_ATTR_ASRL_RI_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.RingIndicatorState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialRtsState">
            <summary>
            A standard VISA read/write attribute with value 0x3fff00c0 (VI_ATTR_ASRL_RTS_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.RequestToSendState"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SerialStopBits">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0024 (VI_ATTR_ASRL_STOP_BITS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.StopBits"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.Slot">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00e8 (VI_ATTR_SLOT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.PxiSession.Slot"/> or <see cref="P:Keysight.Visa.VxiSession.Slot"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SourceAccess">
            <summary>
            A standard VISA read/write attribute with value 0x3fff003c (VI_ATTR_SRC_ACCESS_PRIV).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.SourceAccessPrivilege"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.SourceByteOrder">
            <summary>
            A standard VISA read/write attribute with value 0x3fff003d (VI_ATTR_SRC_BYTE_ORDER).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.SourceByteOrder"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.TcpPort">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0197 (VI_ATTR_TCPIP_PORT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.Port"/> or <see cref="P:Keysight.Visa.TcpipSocketSession.Port"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.TriggerId">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0177 (VI_ATTR_TRIG_ID).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.TriggerLine"/> property or <see cref="M:Keysight.Visa.PxiBackplaneSession.UnreserveTrigger(System.Int16,Ivi.Visa.TriggerLine)"/> 
            method, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.UsbInterfaceNumber">
            <summary>
            A standard VISA read-only attribute with value 0x3fff01a1 (VI_ATTR_USB_INTFC_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.UsbSession.UsbInterfaceNumber"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.UsbMaximumInterruptSize">
            <summary>
            A standard VISA read/write attribute with value 0x3fff01af (VI_ATTR_USB_MAX_INTR_SIZE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.UsbSession.MaximumInterruptSize"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.UsbProtocol">
            <summary>
            A standard VISA read-only attribute with value 0x3fff01a7 (VI_ATTR_USB_PROTOCOL).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.UsbSession.UsbProtocol"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.UsbReceivedInterruptSize">
            <summary>
            A standard VISA read-only attribute with value 0x3fff41b0 (VI_ATTR_USB_RECV_INTR_SIZE).  
            This attribute applies to USB interrupt events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the USB interrupt event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)"/> to return the value.  
            However, the recommended way to access this value is to use the length of the event arguments 
            <see cref="P:Ivi.Visa.UsbInterruptEventArgs.Data"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.VxiDeviceClass">
            <summary>
            A standard VISA read-only attribute with value 0x3fff006c (VI_ATTR_VXI_DEV_CLASS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.DeviceClass"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.VxiLogicalAddress">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00d5 (VI_ATTR_VXI_LA).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.LogicalAddress"/> or <see cref="P:Keysight.Visa.VxiMemorySession.LogicalAddress"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.VxiVmeInterruptStatus">
            <summary>
            A standard VISA read-only attribute with value 0x3fff008b (VI_ATTR_VXI_VME_INTR_STATUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiBackplaneSession.InterruptStatus"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.VxiVmeSystemFailureState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0094 (VI_ATTR_VXI_VME_SYSFAIL_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiBackplaneSession.SystemFailureStatus"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.WindowAccess">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00c3 (VI_ATTR_WIN_ACCESS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and PXI, VXI, PXI memory 
            access, or VXI memory access sessions.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.WindowAccessPrivilege">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0045 (VI_ATTR_WIN_ACCESS_PRIV).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/> and VXI, access, or VXI memory 
            access sessions.  Depending on the situation, this attribute may or may not be writable.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.WindowByteOrder">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0047 (VI_ATTR_WIN_BYTE_ORDER).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.MemoryMapByteOrder"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt16.WriteBufferOperationMode">
            <summary>
            A standard VISA read/write attribute with value 0x3fff002d (VI_ATTR_WR_BUF_OPER_MODE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)"/> for GPIB, Serial, TCPIP, USB, 
            and VXI sessions, GPIB interface sessions, and TCPIP socket sessions.  There is no 
            corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightAttributeInt32">
            <summary>
            Defines a list of standard (native) VISA C 32-bit integer attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeInt32 method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.KeysightGpibT1Delay">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0028 (VI_AGATTR_GPIB_T1_DELAY). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/> and GPIB Interface sessions.  
            This attribute allows setting and getting the T1 delay for the interface; it can be between 350 and 
            2400 nanoseconds, inclusive.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.KeysightPxiDmaChannel">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0057 (VI_AGATTR_DMA_CHANNEL). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or use the corresponding 
            <see cref="P:Keysight.Visa.PxiSession.DmaChannel"/> property.  Keysight internal use only.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.KeysightPxiDmaReadThreshold">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0054 (VI_AGATTR_DMA_READ_THRESHOLD). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or use the corresponding 
            <see cref="P:Keysight.Visa.PxiSession.DmaReadThreshold"/> property.  Keysight internal use only.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.KeysightPxiDmaWriteThreshold">
            <summary>
            A Keysight-specific read/write VISA attribute with value 0x0fff0055 (VI_AGATTR_DMA_WRITE_THRESHOLD). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or use the corresponding 
            <see cref="P:Keysight.Visa.PxiSession.DmaWriteThreshold"/> property.  Keysight internal use only.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.KeysightTcpipInterfaceProtocol">
            <summary>
            A Keysight-specific read-only VISA attribute with value 0x0fff001f (VI_AGATTR_INTERFACE_PROTOCOL). 
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.GpibSession.RemoteInterfaceProtocol"/> or <see cref="P:Keysight.Visa.GpibInterfaceSession.RemoteInterfaceProtocol"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.AsyncReturnCount32">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4026 (VI_ATTR_RET_COUNT_32).  
            This attribute is for internal use only, applies to Asynchronous IO results, and cannot 
            be accessed with GetAttributeInt32.  The recommended and only way to access this value 
            in VISA.NET is to use the <see cref="P:Keysight.Visa.AsynchronousIOResult.Count"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.DestinationIncrement">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0041 (VI_ATTR_DEST_INCREMENT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.DestinationIncrement"/> or <see cref="P:Keysight.Visa.RegisterBasedSession.DestinationIncrement"/> 
            (inherited by PXI, PXI memory access, VXI memory access sessions) 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.EventType">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4010 (VI_ATTR_EVENT_TYPE).  
            This attribute applies to all events (except asynchronous I/O), and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the an event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt32(System.Int32)"/> to return the value.  
            However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.VisaEventArgs.EventType"/> property.  All event args defined by VISA.NET 
            derive from VisaEventArgs.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.JobId">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4006 (VI_ATTR_JOB_ID).  
            This attribute is for internal use only, applies to Asynchronous IO results, and cannot 
            be accessed with GetAttributeInt32.  This attribute may not be accessed in VISA.NET and 
            is not relevant to VISA.NET use.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.MaximumEventQueueLength">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0005 (VI_ATTR_MAX_QUEUE_LENGTH).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.EventQueueCapacity"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.MemoryBase32">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00ad (VI_ATTR_MEM_BASE_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.VxiSession.MemoryBase"/> property, which returns the value of the 64-bit
            MemoryBase64 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.MemorySize32">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00dd (VI_ATTR_MEM_SIZE_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.VxiSession.MemorySize"/> property, which returns the value of the 64-bit
            MemorySize64 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar0">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0221 (VI_ATTR_PXI_MEM_BASE_BAR0_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar0"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar0 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar1">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0222 (VI_ATTR_PXI_MEM_BASE_BAR1_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar1"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar1 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar2">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0223 (VI_ATTR_PXI_MEM_BASE_BAR2_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar2"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar2 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar3">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0224 (VI_ATTR_PXI_MEM_BASE_BAR3_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar3"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar3 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar4">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0225 (VI_ATTR_PXI_MEM_BASE_BAR4_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar4"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar4 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemoryBase32Bar5">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0226 (VI_ATTR_PXI_MEM_BASE_BAR5_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar5"/> property, which returns the value of the 64-bit
            PxiMemoryBase64Bar5 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar0">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0231 (VI_ATTR_PXI_MEM_SIZE_BAR0_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar0"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar0 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar1">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0232 (VI_ATTR_PXI_MEM_SIZE_BAR1_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar1"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar1 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar2">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0233 (VI_ATTR_PXI_MEM_SIZE_BAR2_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar2"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar2 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar3">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0234 (VI_ATTR_PXI_MEM_SIZE_BAR3_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar3"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar3 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar4">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0235 (VI_ATTR_PXI_MEM_SIZE_BAR4_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar4"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar4 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiMemorySize32Bar5">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0236 (VI_ATTR_PXI_MEM_SIZE_BAR5_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar5"/> property, which returns the value of the 64-bit
            PxiMemorySize64Bar5 attribute.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.PxiReceivedInterruptData">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4241 (VI_ATTR_PXI_RECV_INTR_DATA).  
            This attribute applies to PXI interrupt events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the PXI interrupt event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt32(System.Int32)"/> to return the 
            value.  However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.PxiInterruptEventArgs.Data"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.ReceivedInterruptStatusId">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4023 (VI_ATTR_INTR_STATUS_ID).  
            This attribute applies to VXI interrupt events, and can be retrieved in Keysight VISA.NET by 
            casting the event args returned by the VXI interrupt event to <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> 
            and then using <see cref="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt32(System.Int32)"/> to return the 
            value.  However, the recommended way to access this value is to use the event arguments 
            <see cref="P:Ivi.Visa.VxiInterruptEventArgs.StatusId"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.ResourceImplementationVersion">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0003 (VI_ATTR_RSRC_IMPL_VERSION).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and any session class.  
            This attribute returns the value that applies to the underlying Keysight VISA C implementation 
            rather than the VISA.NET implementation.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.ResourceLockState">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0004 (VI_ATTR_RSRC_LOCK_STATE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.ResourceLockState"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.ResourceSpecificationVersion">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0170 (VI_ATTR_RSRC_SPEC_VERSION).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, available for all session 
            types.  Use of this attribute is not recommended in VISA.NET.  It could be confusing because 
            each VISA.NET session has its own underlying instance of the Keysight VISA.NET resource 
            manager, regardless of how it is instantiated.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.SerialAvailableByteCount">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00ac (VI_ATTR_ASRL_AVAIL_NUM).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.BytesAvailable"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.SerialBaud">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0021 (VI_ATTR_ASRL_BAUD).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.SerialSession.BaudRate"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.SourceIncrement">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0040 (VI_ATTR_SRC_INCREMENT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.SourceIncrement"/> or <see cref="P:Keysight.Visa.RegisterBasedSession.SourceIncrement"/> 
            (inherited by PXI, PXI memory access, VXI memory access sessions) 
            properties, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.Status">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4025 (VI_ATTR_STATUS).  
            This attribute is for internal use only, applies to Asynchronous IO results, and cannot 
            be accessed with GetAttributeInt32.  This value is used to determine the value of the 
            <see cref="P:Keysight.Visa.AsynchronousIOResult.CompletedSynchronously"/> property, but otherwise is 
            not represented in the VISA.NET API.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.TcpHiSLIPMaximumMessageSizeKB">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0302 (VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.HiSLIPMaximumMessageKBytes"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.TcpHiSLIPVersion">
            <summary>
            A standard VISA read only attribute with value 0x3fff0301 (VI_ATTR_TCPIP_HISLIP_VERSION).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.TcpipSession.HiSLIPProtocolVersion"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.TimeoutValue">
            <summary>
            A standard VISA read/write attribute with value 0x3fff001a (VI_ATTR_TMO_VALUE).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VisaSession.TimeoutMilliseconds"/> property, available for all session types.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.UserData32">
            <summary>
            A standard VISA read/write attribute with value 0x3fff0007 (VI_ATTR_USER_DATA_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> and 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)"/> for all session types.  There is no 
            corresponding VISA.NET property, as this attribute is not useful in VISA.NET.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.VxiTriggerStatus">
            <summary>
            A standard VISA read-only attribute with value 0x3fff008d (VI_ATTR_VXI_TRIG_STATUS).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiBackplaneSession.TriggerStatus"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.VxiTriggerSupport">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0194 (VI_ATTR_VXI_TRIG_SUPPORT).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.TriggerSupport"/> or <see cref="P:Keysight.Visa.VxiBackplaneSession.TriggerSupport"/> 
            property, depending on the session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.WindowBaseAddress32">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0098 (VI_ATTR_WIN_BASE_ADDR_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> for VXI and PXI message-based 
            instrument and memory access sessions.  There is no corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt32.WindowSize32">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0098 0x3fff009a (VI_ATTR_WIN_SIZE_32).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)"/> for VXI and PXI message-based 
            instrument and memory access sessions.  There is no corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightAttributeInt64">
            <summary>
            Defines a list of standard (native) VISA C 64-bit integer attributes and Keysight-specific VISA C attributes.  
            The value assigned to each member matches the value assigned to the corresponding VISA C attribute.
            </summary>
            <remarks>
            <para>Use this enumeration to supply legal values to the GetAttributeInt64 method defined in the 
            <see cref="T:Keysight.Visa.IKeysightNativeVisaSession"/> interface.  All session classes derive from this interface, 
            and so may be cast to this interface.  There are several overloads of the 
            <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/> method in this interface.  To minimize 
            the potential for error, Keysight recommends using the overload that uses this enumeration.</para>
            </remarks>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.AsyncReturnCount64">
            <summary>
            A standard VISA read-only attribute with value 0x3fff4028 (VI_ATTR_RET_COUNT_64).  
            This attribute is for internal use only, applies to Asynchronous IO results, and cannot 
            be accessed with GetAttributeInt64.  The recommended and only way to access this value 
            in VISA.NET is to use the <see cref="P:Keysight.Visa.AsynchronousIOResult.Count"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.MemoryBase64">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00d0 (VI_ATTR_MEM_BASE_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            corresponding <see cref="P:Keysight.Visa.VxiSession.MemoryBase"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.MemorySize64">
            <summary>
            A standard VISA read-only attribute with value 0x3fff00d1 (VI_ATTR_MEM_SIZE_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.VxiSession.MemorySize"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar0">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0229 (VI_ATTR_PXI_MEM_BASE_BAR1_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar0"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar1">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0228 (VI_ATTR_PXI_MEM_BASE_BAR0_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar1"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar2">
            <summary>
            A standard VISA read-only attribute with value 0x3fff022a (VI_ATTR_PXI_MEM_BASE_BAR2_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar2"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar3">
            <summary>
            A standard VISA read-only attribute with value 0x3fff022b (VI_ATTR_PXI_MEM_BASE_BAR3_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar3"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar4">
            <summary>
            A standard VISA read-only attribute with value 0x3fff022c (VI_ATTR_PXI_MEM_BASE_BAR4_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar4"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemoryBase64Bar5">
            <summary>
            A standard VISA read-only attribute with value 0x3fff022d (VI_ATTR_PXI_MEM_BASE_BAR5_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemBaseBar5"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar0">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0238 (VI_ATTR_PXI_MEM_SIZE_BAR0_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar0"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar1">
            <summary>
            A standard VISA read-only attribute with value 0x3fff0239 (VI_ATTR_PXI_MEM_SIZE_BAR1_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar1"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar2">
            <summary>
            A standard VISA read-only attribute with value 0x3fff023a (VI_ATTR_PXI_MEM_SIZE_BAR2_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar2"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar3">
            <summary>
            A standard VISA read-only attribute with value 0x3fff023b (VI_ATTR_PXI_MEM_SIZE_BAR3_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar3"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar4">
            <summary>
            A standard VISA read-only attribute with value 0x3fff023c (VI_ATTR_PXI_MEM_SIZE_BAR4_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar4"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.PxiMemorySize64Bar5">
            <summary>
            A standard VISA read-only attribute with value 0x3fff023d (VI_ATTR_PXI_MEM_SIZE_BAR5_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/>, or (recommended) use the 
            <see cref="P:Keysight.Visa.PxiSession.MemSizeBar5"/> property.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.WindowBaseAddress64">
            <summary>
            A standard VISA read-only attribute with value 0x3fff009b (VI_ATTR_WIN_BASE_ADDR_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/> for VXI and PXI message-based 
            instrument and memory access sessions.  There is no corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="F:Keysight.Visa.KeysightAttributeInt64.WindowSize64">
            <summary>
            A standard VISA read-only attribute with value 0x3fff009c (VI_ATTR_WIN_SIZE_64).  
            Use with <see cref="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)"/> for VXI and PXI message-based 
            instrument and memory access sessions.  There is no corresponding property in VISA.NET.
            </summary>
        </member>
        <member name="T:Keysight.Visa.KeysightVisaEventArgs">
            <summary>
            Provides additional data about a Keysight VISA event.  
            <para>This class inherits from <see cref="T:Ivi.Visa.INativeVisaEventArgs"/> to allow programs to access information 
            about events that may not be explicitly defined in this interface.</para>
            <para>For more information, see <see cref="!:HardwareEvents">Hardware Events</see>.</para>
            </summary>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.#ctor(Ivi.Visa.VisaEventArgs,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Keysight.Visa.KeysightVisaEventArgs" /> 
            class.
            </summary>
            <param name="eventArgs">Base event arguments from the VISA event.</param>
            <param name="eventContextHandle">A VISA context handle of the event.</param>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this event arguments object, but only if another thread has not already started 
            to dispose of the object.
            </summary>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.Dispose(System.Boolean)">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this session, but only if another thread has not already started to dispose of 
            this object.
            </summary>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.CheckDisposed">
            <summary>
            Throws an exception if the object is already disposed.
            </summary>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be unsigned byte.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeByte(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be unsigned byte.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be 16-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt16(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be 16-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be 32-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt32(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be 32-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be 64-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeInt64(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be 64-bit integer.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be Boolean.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be Boolean.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.  The 
            type of the attribute must be string.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.KeysightVisaEventArgs.GetAttributeString(System.Int32)">
            <summary>
            Retrieves the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.  The type of the attribute must be string.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Keysight.Visa.KeysightVisaEventArgs.IsDisposed">
            <summary>
            True if the object Dispose code has completed.
            </summary>
        </member>
        <member name="P:Keysight.Visa.KeysightVisaEventArgs.IsDisposedSyncRoot">
            <summary>
            Dispose creates a lock on this object while disposing, to prevent concurrent 
            execution of the Dispose code in multiple threads.
            </summary>
        </member>
        <member name="P:Keysight.Visa.KeysightVisaEventArgs.EventContextHandle">
            <summary>
            An event args reference for the native C event.  This may reference an object that
            derives from EventArgs, if the event handler for the event specified by the
            EventArg.EventType of EventArg.CustomEventType properties uses a derived class.
            </summary>
        </member>
        <member name="P:Keysight.Visa.KeysightVisaEventArgs.EventArgs">
            <summary>
            An event args reference for the native C event.  This may reference an object that
            derives from EventArgs, if the event handler for the event specified by the
            EventArg.EventType of EventArg.CustomEventType properties uses a derived class.
            </summary>
        </member>
        <member name="T:Keysight.Visa.GpibInterfaceSession">
            <summary>
            An instantiable class that supports all GPIB INTFC sessions. 
            </summary>
        </member>
        <member name="T:Keysight.Visa.VisaSession">
            <summary>
            An abstract class inherited by all VISA.NET session classes.  VisaSession includes 
            common functionality for all VISA.NET sessions, including general information about the 
            implementation, information about the device to which the session is connected, event management, 
            locks, and the ability to generically access features of the underlying VISA implementation.
            </summary>
            <remarks>
            <para>The VisaSession class must derive from IKeysightNativeVisaSession because Keysight VISA.NET 
            sessions delegate their work to Keysight VISA.  IKeysightNativeVisaSession allows limited access 
            to underlying VISA features, primarily undocumented attributes.</para>
            <para>The VisaSession class must derive from IDisposable because it must be able to dispose of 
            unmanaged resources including the corresponding sessions in the underlying VISA C implementation.</para>
            <para>Although it is technically possible, Keysight recomends that customers not derive 
            custom classes from this class.  Attempts to override some methods may result in a stack 
            overflow when the method is called.</para>
            <para>For more information, see <see cref="!:ResourcesAndSessions">Resources and Sessions</see>.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.IKeysightNativeVisaSession">
            <summary>Allows access to Keysight VISA C attributes and events. For more information, see <see cref="!:NativeAccessApi">The Native
            Access API</see>.</summary>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeByte(Keysight.Visa.KeysightAttributeByte)">
            <summary>
            Retrieves the value of the specified unsigned byte attribute from the native C implementation. 
            (Keysight Specific)
            </summary>
            <param name="attribute">An attribute (VISA.NET standard or Keysight-specific) supported by 
            Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)">
            <summary>
            Retrieves the value of the specified 16-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int16.MaxValue are converted to negative 
            Int16 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)">
            <summary>
            Retrieves the value of the specified 32-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int32.MaxValue are converted to negative 
            Int32 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)">
            <summary>
            Retrieves the value of the specified 64-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int64.MaxValue are converted to negative 
            Int64 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)">
            <summary>
            Retrieves the value of the specified Boolean attribute from the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.GetAttributeString(Keysight.Visa.KeysightAttributeString)">
            <summary>
            Retrieves the value of the specified string attribute from the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)">
            <summary>
            Sets the value of the specified unsigned byte attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned byte attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.</param>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)">
            <summary>
            Sets the value of the specified unsigned 16-bit integer attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned 16-bit integer attribute 
            (VISA.NET standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.  Note that when calling to the underlying 
            VISA implementation, negative values will be converted to unsigned positive values.</param>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)">
            <summary>
            Sets the value of the specified unsigned 32-bit integer attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned 32-bit integer attribute 
            (VISA.NET standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.  Note that when calling to the underlying 
            VISA implementation, negative values will be converted to unsigned positive values.</param>
        </member>
        <member name="M:Keysight.Visa.IKeysightNativeVisaSession.SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)">
            <summary>
            Sets the value of the specified Boolean attribute in the native C implementation.  (Keysight 
            Specific)
            </summary>
            <param name="attribute">A constant that identifies a Boolean attribute (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.</param>
        </member>
        <member name="F:Keysight.Visa.VisaSession._hasEnabledAnyEvent">
            <summary>
            If true, some event has been enabled.  (Once it is enabled, it is not disabled until 
            the session is disposed.)
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaSession._eventDispatcher">
            <summary>
            The wrapper that provides .NET style event handling
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaSession._synchronizeCallbacks">
            <summary>
            Specifies whether callbacks must be performed in a specific synchronization context.  If false, 
            the implementation is allowed to execute callbacks in any context.  The default value is true.
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaSession._native">
            <summary>
            This is an internal handle to the methods and properties defined in the 
            IKeysightNativeVisaSession interface.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Initializes the common features of a new instance of a VISA.NET session class to communicate 
            with the specified device.
            </summary>
            <param name="sessionType">The type of the instantiable, derived session class that is calling 
            this constructor.</param>
            <param name="resourceName">The name (VISA address) of the device with which this session 
            will communicate.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session.  LoadConfig is ignored 
            by Keysight VISA.NET.  Both modes may be specified.  The default is None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Initializes the common features of a new instance of a VISA.NET session class to communicate 
            with the specified device.
            </summary>
            <param name="sessionType">The type of the instantiable, derived session class that is calling 
            this constructor.</param>
            <param name="resourceName">The name (VISA address) of the device with which this session 
            will communicate.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session.  LoadConfig is ignored 
            by Keysight VISA.NET.  Both modes may be specified.  The default is None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to IO Libraries Connection 
            Expert documentation for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Finalize">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this session.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this session.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Dispose(System.Boolean)">
            <summary>
            Performs tasks associated with closing, freeing, releasing, and resetting unmanaged VISA 
            resources used by this session, but only if another thread has not already started to 
            dispose of this object.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaSession.CheckDisposed">
            <summary>
            Throws an exception if the object is already disposed.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaSession.AddEventListener(Ivi.Visa.EventType,Keysight.Visa.IVisaEventListener)">
            <summary>
            Adds an event listener.
            </summary>
            <param name="eventType">Event type to listen</param>
            <param name="listener">Listener to be added</param>
        </member>
        <member name="M:Keysight.Visa.VisaSession.RemoveEventListener(Ivi.Visa.EventType,Keysight.Visa.IVisaEventListener)">
            <summary>
            Removes an event listener.
            </summary>
            <param name="eventType">Event type to listen</param>
            <param name="listener">Listener to be removed</param>
        </member>
        <member name="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)">
            <summary>
            Disables a calling program's ability to receive events of the type specified by the 
            <paramref name="eventType"/> argument using a 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> method 
            (any overload).
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.  
            If eventType is EventType.AllEnabled the session stops receiving all events.</param>
            <remarks>
            <para>This method prevents new events from being added to the event queue(s).  However, 
            event occurrences already in the queue(s) are not discarded.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, <i>or</i> the .NET events which are defined 
            individually for each event type in the session class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)">
            <summary>
            Discards events of the type specified by the <paramref name="eventType"/> argument from 
            the queue for that event type.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.  
            If eventType is EventType.AllEnabled the session discards all events.</param>
            <remarks>
            <para>This method causes loss of event occurrences.</para>
            <para>The event occurrences discarded by this method are not available to a session at 
            a later time.</para>
            <para>This method does not affect events that have already been delivered to the 
            application.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)">
            <summary>
            Enables a calling program's ability to receive events of the type specified by the 
            <paramref name="eventType"/> argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <remarks>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            <para>When an event type is enabled, events will accumulate in the event queue for that 
            type until the calling program calls WaitOnEvent.  When the session is Disposed, any 
            undelivered events in the event queues are discarded.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.LockResource">
            <summary>
            Acquires a lock on the resource for this session.
            </summary>
            <remarks>
            <para>Since this overload does not specify a shared key, it will obtain an exclusive lock.  
            Once an exclusive lock has been granted, any request for a shared lock will fail.</para>
            <para>This overload uses an infinite timeout as the default, so that it will return only after 
            acquiring the lock.</para>
            <para>This overload supports nested exclusive locks.  For each session, LockResource and 
            <see cref="M:Keysight.Visa.VisaSession.UnlockResource"/> share an internal lock count, which is initialized to 0. Each 
            successful call to LockResource on the same session (and for the same lock type) increases 
            the lock count.  When a session locks the resource a multiple number of times, it is necessary 
            to invoke the UnlockResource method an equal number of times in order to unlock the resource. 
            That is, the lock count increments for each call to LockResource, and decrements for each call 
            to UnlockResource. A resource is actually unlocked only when the lock count is 0.</para>
            <para>If the session holds both exclusive and shared locks, successive calls to UnlockResource 
            will first decrement the exclusive lock count to 0, and then the shared lock count.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.LockResource(System.Int32)">
            <summary>
            Acquires a lock on the resource for this session.
            </summary>
            <param name="timeoutMilliseconds">If this resource is locked, the absolute time period (in 
            milliseconds) to wait for the resource to be unlocked before throwing an exception.  If the 
            value is VisaConstants.ImmediateTimeout (0), operations will never wait for the lock.  If the 
            value is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the lock will never 
            timeout.  Negative values other than -1 are treated as unsigned values in the range between 
            Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>Since this overload does not specify a shared key, it will obtain an exclusive lock.  
            Once an exclusive lock has been granted, any request for a shared lock will fail.</para>
            <para>This overload returns after either acquiring the lock, or after waiting for the amount of 
            time specified by the timeout.</para>
            <para>This overload supports nested exclusive locks.  For each session, LockResource and 
            <see cref="M:Keysight.Visa.VisaSession.UnlockResource"/> share an internal lock count, which is initialized to 0. Each 
            successful call to LockResource on the same session (and for the same lock type) increases 
            the lock count.  When a session locks the resource a multiple number of times, it is necessary 
            to invoke the UnlockResource method an equal number of times in order to unlock the resource. 
            That is, the lock count increments for each call to LockResource, and decrements for each call 
            to UnlockResource. A resource is actually unlocked only when the lock count is 0.</para>
            <para>If the session holds both exclusive and shared locks, successive calls to UnlockResource 
            will first decrement the exclusive lock count to 0, and then the shared lock count.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.LockResource(System.TimeSpan)">
            <summary>
            Acquires a lock on the resource for this session.
            </summary>
            <param name="timeout">If this resource is locked, the absolute time period to wait for the 
            resource to be unlocked before throwing an exception.  If the time span in milliseconds is 0, 
            operations will never wait for the lock.  If the time span is TimeSpan.MaxValue or the time 
            span in milliseconds is greater than or equal to UInt32.MaxValue, the attempt to wait for the 
            lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>Since this overload does not specify a shared key, it will obtain an exclusive lock.  
            Once an exclusive lock has been granted, any request for a shared lock will fail.</para>
            <para>This overload returns after either acquiring the lock, or after waiting for the amount of 
            time specified by the timeout.</para>
            <para>This overload supports nested exclusive locks.  For each session, LockResource and 
            <see cref="M:Keysight.Visa.VisaSession.UnlockResource"/> share an internal lock count, which is initialized to 0. Each 
            successful call to LockResource on the same session (and for the same lock type) increases 
            the lock count.  When a session locks the resource a multiple number of times, it is necessary 
            to invoke the UnlockResource method an equal number of times in order to unlock the resource. 
            That is, the lock count increments for each call to LockResource, and decrements for each call 
            to UnlockResource. A resource is actually unlocked only when the lock count is 0.</para>
            <para>If the session holds both exclusive and shared locks, successive calls to UnlockResource 
            will first decrement the exclusive lock count to 0, and then the shared lock count.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.LockResource(System.Int32,System.String)">
            <summary>
            Acquires a lock on the resource for this session.
            </summary>
            <param name="timeoutMilliseconds">If this resource is locked, the absolute time period (in 
            milliseconds) to wait for the resource to be unlocked before throwing an exception.  If the 
            value is VisaConstants.ImmediateTimeout (0), operations will never wait for the lock.  If the 
            value is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the lock will never 
            timeout.  Negative values other than -1 are treated as unsigned values in the range between 
            Int32.MaxValue and UInt32.MaxValue.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>Then name of the key that was granted.</returns>
            <remarks>
            <para>This overload specifies a shared key, and will obtain a shared lock.  Once a shared lock 
            has been granted, any request for a shared lock with a different shared key will fail.  However, 
            a request for an exclusive lock may succeed.</para>
            <para>This overload of LockResource returns after either acquiring the lock, or after waiting 
            for the amount of time specified by the timeout.</para>
            <para>A calling program can pass null or the empty string for the sharedKey parameter, in 
            which case this method will generate a unique access key and return it as the return value.  
            If a user application does specify a sharedKey value, the method will try to use this value as 
            the shared key value.</para>
            <para>If the resource is not locked, this method will use the sharedKey as the access key 
            and grant the lock.  When the operation succeeds, the sharedKey will also be returned as the 
            method's return value, and VISA will add the session to the list of sessions sharing the lock 
            for the particular resource. The session obtaining a shared lock in this manner will then have 
            the same access privileges as the first session that obtained the lock.</para>
            <para>This overload supports nested shared locks.  For each session, LockResource and 
            <see cref="M:Keysight.Visa.VisaSession.UnlockResource"/> share an internal lock count, which is initialized to 0. Each 
            successful call to LockResource on the same session (and for the same lock type) increases 
            the lock count.  When a session locks the resource a multiple number of times, it is necessary 
            to invoke the UnlockResource method an equal number of times in order to unlock the resource. 
            That is, the lock count increments for each call to LockResource, and decrements for each call 
            to UnlockResource. A resource is actually unlocked only when the lock count is 0.</para>
            <para>If the session holds both exclusive and shared locks, successive calls to UnlockResource 
            will first decrement the exclusive lock count to 0, and then the shared lock count.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.LockResource(System.TimeSpan,System.String)">
            <summary>
            Acquires a lock on the resource for this session.
            </summary>
            <param name="timeout">If this resource is locked, the absolute time period to wait for the 
            resource to be unlocked before throwing an exception.  If the time span in milliseconds is 0, 
            operations will never wait for the lock.  If the time span is TimeSpan.MaxValue or the time 
            span in milliseconds is greater than or equal to UInt32.MaxValue, the attempt to wait for the 
            lock will never timeout.  Negative time spans are not valid.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>Then name of the key that was granted.</returns>
            <remarks>
            <para>This overload specifies a shared key, and will obtain a shared lock.  Once a shared lock 
            has been granted, any request for a shared lock with a different shared key will fail.  However, 
            a request for an exclusive lock may succeed.</para>
            <para>This overload of LockResource returns after either acquiring the lock, or after waiting 
            for the amount of time specified by the timeout.</para>
            <para>A calling program can pass null or the empty string for the sharedKey parameter, in 
            which case this method will generate a unique access key and return it as the return value.  
            If a user application does specify a sharedKey value, the method will try to use this value as 
            the shared key value.</para>
            <para>If the resource is not locked, this method will use the sharedKey as the access key 
            and grant the lock.  When the operation succeeds, the sharedKey will also be returned as the 
            method's return value, and VISA will add the session to the list of sessions sharing the lock 
            for the particular resource. The session obtaining a shared lock in this manner will then have 
            the same access privileges as the first session that obtained the lock.</para>
            <para>This overload supports nested shared locks.  For each session, LockResource and 
            <see cref="M:Keysight.Visa.VisaSession.UnlockResource"/> share an internal lock count, which is initialized to 0. Each 
            successful call to LockResource on the same session (and for the same lock type) increases 
            the lock count.  When a session locks the resource a multiple number of times, it is necessary 
            to invoke the UnlockResource method an equal number of times in order to unlock the resource. 
            That is, the lock count increments for each call to LockResource, and decrements for each call 
            to UnlockResource. A resource is actually unlocked only when the lock count is 0.</para>
            <para>If the session holds both exclusive and shared locks, successive calls to UnlockResource 
            will first decrement the exclusive lock count to 0, and then the shared lock count.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.UnlockResource">
            <summary>
            Unlocks the resource.
            </summary>
            <remarks>
            <para>For each session, <see cref="M:Keysight.Visa.VisaSession.LockResource"/> and UnlockResource share an internal lock count, which 
            is initialized to 0. Each successful call to LockResource on the same session (and for 
            the same lock type) increases the lock count.  When a session locks the resource a multiple 
            number of times, it is necessary to invoke the UnlockResource method an equal number of 
            times in order to unlock the resource. That is, the lock count increments for each call 
            to LockResource, and decrements for each call to UnlockResource. A resource is actually 
            unlocked only when the lock count is 0.</para>
            <para>It is possible to obtain both shared and exclusive locks on the same resource, in 
            that order.  In such cases, this method decrements the exclusive lock count first, and 
            then the shared lock count.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.LockResource"/>
            <seealso cref="M:Keysight.Visa.VisaSession.LockResource(System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.LockResource(System.Int32,System.String)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.LockResource(System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.LockResource(System.TimeSpan,System.String)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">
            <summary>
            Waits for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            indefinitely.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            indefinitely.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <param name="status">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <param name="timeoutMilliseconds">The absolute time period (in milliseconds) to wait for the 
            event before returning.  If the value is VisaConstants.ImmediateTimeout (0), operations will not 
            wait for the event at all.  If the value is VisaConstants.InfiniteTimeout (-1), the attempt to 
            wait for the event will never timeout.  Negative values other than -1 are treated as unsigned 
            values in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <param name="timeout">The absolute time period to wait for the event before returning.  If the 
            time span in milliseconds is 0, operations will not wait for the event at all.  If the time 
            span is TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to 
            UInt32.MaxValue, the attempt to wait for the event will never timeout.  Negative time spans 
            are not valid.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <param name="timeoutMilliseconds">The absolute time period (in milliseconds) to wait for the 
            event before returning.  If the value is VisaConstants.ImmediateTimeout (0), operations will not 
            wait for the event at all.  If the value is VisaConstants.InfiniteTimeout (-1), the attempt to 
            wait for the event will never timeout.  Negative values other than -1 are treated as unsigned 
            values in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <param name="status">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread on which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">A VISA.NET standard event type supported by Keysight VISA.NET.</param>
            <param name="timeout">The absolute time period to wait for the event before returning.  If the 
            time span in milliseconds is 0, operations will not wait for the event at all.  If the time 
            span is TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to 
            UInt32.MaxValue, the attempt to wait for the event will never timeout.  Negative time spans 
            are not valid.</param>
            <param name="status">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
            <remarks>
            <para>If eventType is EventType.AllEnabled, the function waits for any event that is enabled 
            for the given session.  In this case the calling program can determine the type of the event 
            returned by looking at the return value EventType property.</para>
            <para>WaitOnEvent removes the specified event from the event queue if one that matches the 
            type is available. The process of dequeuing makes an additional space available in the queue 
            for events of the same type.</para>
            <para>A calling program must call <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/> to enable the reception 
            of events of the specified type before calling WaitOnEvent. WaitOnEvent does not perform any 
            enabling or disabling of event reception.</para>
            <para>The return value may contain additional information specific to particular event types 
            that is only accessible by casting to the event argument class for that type.  For example, 
            if the event is a USB Interrupt, the return value must be cast to UsbInterruptEventArgs in 
            order to access the ExceededMaximumSize and Data properties that are specific to USB interrupt 
            events.</para>
            <para>Keysight VISA.NET does not implement or recognize any custom event types.</para>
            <seealso cref="T:Ivi.Visa.VisaEventArgs"/>
            <seealso cref="T:Ivi.Visa.GpibControllerInChargeEventArgs"/>
            <seealso cref="T:Ivi.Visa.PxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.UsbInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiInterruptEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiSignalProcessorEventArgs"/>
            <seealso cref="T:Ivi.Visa.VxiTriggerEventArgs"/>
            <seealso cref="T:Keysight.Visa.KeysightVisaEventArgs"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#DisableEvent(System.Int32)">
            <summary>
            Disables a calling program's ability to receive events of the type specified by the 
            <paramref name="eventType"/> argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.  Values correspond to the defined values in the EventType enumeration.  
            If eventType is "0x3fff7fff" (= EventType.AllEnabled) the session stops receiving all events.</param>
            <remarks>
            <para>This method prevents new events from being added to the event queue(s).  However, 
            event occurrences already in the queue(s) are not discarded.</para>
            <para>Client programs should either use the event-related methods DisableEvents, 
            DiscardEvents, EnableEvents, and WaitOnEvent with the appropriate eventType, -or- the 
            .NET events which are defined individually for each event type in the session class to 
            which they apply.  If a calling program uses both mechanisms at the same time, it will 
            receive the event twice, once for each mechanism.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#DiscardEvents(System.Int32)">
            <summary>
            Discards events of the type specified by the <paramref name="eventType"/> argument from 
            the queue for that event type.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.  Values correspond to the defined values in the EventType enumeration.  
            If eventType is "0x3fff7fff" (= EventType.AllEnabled) the session discards all events.</param>
            <remarks>
            <para>This method causes loss of event occurrences.</para>
            <para>The event occurrences discarded by this method are not available to a session at 
            a later time.</para>
            <para>This method does not affect events that have already been delivered to the 
            application.</para>
            <para>Client programs should either use the event-related methods DisableEvents, 
            DiscardEvents, EnableEvents, and WaitOnEvent with the appropriate eventType, -or- the 
            .NET events which are defined individually for each event type in the session class to 
            which they apply.  If a calling program uses both mechanisms at the same time, it will 
            receive the event twice, once for each mechanism.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#EnableEvent(System.Int32)">
            <summary>
            Enables a calling program's ability to receive events of the type specified by the 
            <paramref name="eventType"/> argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <remarks>
            <para>Client programs should either use the event-related methods DisableEvents, 
            DiscardEvents, EnableEvents, and WaitOnEvent with the appropriate eventType, -or- the 
            .NET events which are defined individually for each event type in the session class to 
            which they apply.  If a calling program uses both mechanisms at the same time, it will 
            receive the event twice, once for each mechanism.</para>
            <para>When an event type is enabled, events will accumulate in the event queue for that 
            type until the calling program calls WaitOnEvent.  When the session is Disposed, any 
            undelivered events in the event queues are discarded.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeByte(Keysight.Visa.KeysightAttributeByte)">
            <summary>
            Retrieves the value of the specified unsigned byte attribute from the native C implementation. 
            (Keysight Specific)
            </summary>
            <param name="attribute">An attribute (VISA.NET standard or Keysight-specific) supported by 
            Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeByte(System.Int32)">
            <summary>
            Retrieves the value of the specified unsigned byte attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute must 
            be unsigned byte.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified unsigned byte attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be unsigned byte.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeInt16(Keysight.Visa.KeysightAttributeInt16)">
            <summary>
            Retrieves the value of the specified 16-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int16.MaxValue are converted to negative 
            Int16 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt16(System.Int32)">
            <summary>
            Retrieves the value of the specified 16-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 16-bit integer.  If the attribute ID for the desired attribute is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int16.MaxValue are converted to negative 
            Int16 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified 16-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 16-bit integer.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int16.MaxValue are converted to negative 
            Int16 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeInt32(Keysight.Visa.KeysightAttributeInt32)">
            <summary>
            Retrieves the value of the specified 32-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int32.MaxValue are converted to negative 
            Int32 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt32(System.Int32)">
            <summary>
            Retrieves the value of the specified 32-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 32-bit integer.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int32.MaxValue are converted to negative 
            Int32 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified 32-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 32-bit integer.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int32.MaxValue are converted to negative 
            Int32 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeInt64(Keysight.Visa.KeysightAttributeInt64)">
            <summary>
            Retrieves the value of the specified 64-bit integer attribute from the native C implementation.
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int64.MaxValue are converted to negative 
            Int64 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt64(System.Int32)">
            <summary>
            Retrieves the value of the specified 64-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 64-bit integer.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int64.MaxValue are converted to negative 
            Int64 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified 64-bit integer attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 64-bit integer.</param>
            <returns>The value of the attribute.  Note that when calling to the underlying 
            VISA implementation, unsigned values that exceed Int64.MaxValue are converted to negative 
            Int64 values - no overflow is reported.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean)">
            <summary>
            Retrieves the value of the specified Boolean attribute from the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieves the value of the specified Boolean attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be Boolean.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified Boolean attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be Boolean.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#GetAttributeString(Keysight.Visa.KeysightAttributeString)">
            <summary>
            Retrieves the value of the specified string attribute from the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies one of the attributes (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeString(System.Int32)">
            <summary>
            Retrieves the value of the specified string attribute from the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be string.  If the attribute ID for the desired attribute is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieves the value of the specified string attribute from the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be string.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#SetAttributeByte(Keysight.Visa.KeysightAttributeByte,System.Byte)">
            <summary>
            Sets the value of the specified unsigned byte attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned byte attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeByte(System.Int32,System.Byte)">
            <summary>
            Sets the value of the specified unsigned byte attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be unsigned byte.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeByte if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeByte(Ivi.Visa.NativeVisaAttribute,System.Byte)">
            <summary>
            Sets the value of the specified unsigned byte attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be unsigned byte.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeByte if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#SetAttributeInt16(Keysight.Visa.KeysightAttributeInt16,System.Int16)">
            <summary>
            Sets the value of the specified unsigned 16-bit integer attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned 16-bit integer attribute 
            (VISA.NET standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.  Note that when calling to the underlying 
            VISA implementation, negative values will be converted to unsigned positive values.</param>
            <remarks>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt16(System.Int32,System.Int16)">
            <summary>
            Sets the value of the specified unsigned 16-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 16-bit integer.  If the attribute ID for the desired attribute is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int16.MaxValue, convert it to the corresponding negative Int16 value before calling this 
            method.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeInt16 if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt16(Ivi.Visa.NativeVisaAttribute,System.Int16)">
            <summary>
            Sets the value of the specified unsigned 16-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 16-bit integer.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int16.MaxValue, convert it to the corresponding negative Int16 value before calling this 
            method.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeInt16 if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#SetAttributeInt32(Keysight.Visa.KeysightAttributeInt32,System.Int32)">
            <summary>
            Sets the value of the specified unsigned 32-bit integer attribute in the native C implementation.  
            (Keysight Specific)
            </summary>
            <param name="attribute">A constant that identifies an unsigned 32-bit integer attribute 
            (VISA.NET standard or Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.  Note that when calling to the underlying 
            VISA implementation, negative values will be converted to unsigned positive values.</param>
            <remarks>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt32(System.Int32,System.Int32)">
            <summary>
            Sets the value of the specified unsigned 32-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 32-bit integer.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeInt32 if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt32(Ivi.Visa.NativeVisaAttribute,System.Int32)">
            <summary>
            Sets the value of the specified unsigned 32-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 32-bit integer.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeInt32 if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt64(System.Int32,System.Int64)">
            <summary>
            Sets the value of the specified unsigned 64-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be 64-bit integer.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int64.MaxValue, convert it to the corresponding negative Int64 value before calling this 
            method.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as Ivi.Visa.NativeVisaAttribute if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeInt64(Ivi.Visa.NativeVisaAttribute,System.Int64)">
            <summary>
            Sets the value of the specified unsigned 64-bit integer attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be 64-bit integer.</param>
            <param name="value">The new value of the attribute.  If the value is greater than 
            Int64.MaxValue, convert it to the corresponding negative Int64 value before calling this 
            method.</param>
            <remarks>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Keysight#Visa#IKeysightNativeVisaSession#SetAttributeBoolean(Keysight.Visa.KeysightAttributeBoolean,System.Boolean)">
            <summary>
            Sets the value of the specified Boolean attribute in the native C implementation.  (Keysight 
            Specific)
            </summary>
            <param name="attribute">A constant that identifies a Boolean attribute (VISA.NET standard or 
            Keysight-specific) supported by Keysight VISA.NET.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeBoolean if possible.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(System.Int32,System.Boolean)">
            <summary>
            Sets the value of the specified Boolean attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be Boolean.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is declared as KeysightAttributeBoolean if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeBoolean(Ivi.Visa.NativeVisaAttribute,System.Boolean)">
            <summary>
            Sets the value of the specified Boolean attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be Boolean.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>Keysight recommends using the overload where the attribute parameter is declared as 
            KeysightAttributeBoolean if possible.</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeString(System.Int32,System.String)">
            <summary>
            Sets the value of the specified string attribute in the native C implementation.
            </summary>
            <param name="attribute">An integer attribute ID that identifies an  attribute (VISA.NET 
            standard or Keysight-specific) supported by Keysight VISA.NET.  The type of the attribute 
            must be string.  If the attribute ID for the desired attribute is greater than 
            Int32.MaxValue, convert it to the corresponding negative Int32 value before calling this 
            method.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>When using this overload of SetAttributeString, the burdon is on the calling program to 
            provide a valid value for the attribute parameter.  Keysight recommends using the overload 
            where the attribute parameter is typed as Ivi.Visa.NativeVisaAttribute</para>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#SetAttributeString(Ivi.Visa.NativeVisaAttribute,System.String)">
            <summary>
            Sets the value of the specified string attribute in the native C implementation.
            </summary>
            <param name="attribute">A VISA.NET standard attribute supported by Keysight VISA.NET.  The 
            type of the attribute must be string.</param>
            <param name="value">The new value of the attribute.</param>
            <remarks>
            <para>This method will throw an exception if the specified attribute is read/write and global, 
            and the resource is locked by another session.</para>
            <para>In some cases VISA.NET may choose not to change the value of the attribute, and this 
            method will still succeed.  In such cases VISA would return the warning status code 
            VI_WARN_NSUP_ATTR_STATE.  Since VISA.NET does not have a mechanism for reporting warnings, 
            this warning is not passed along to the calling program.  This warning is reserved for cases 
            where VISA.NET will continue to operate correctly despite the fact that the attribute value 
            has not been changed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            indefinitely.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            indefinitely.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <param name="status">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <param name="timeoutMilliseconds">The absolute time period (in milliseconds) to wait for the 
            event before returning.  If the value is VisaConstants.ImmediateTimeout (0), operations will not 
            wait for the event at all.  If the value is VisaConstants.InfiniteTimeout (-1), the attempt to 
            wait for the event will never timeout.  Negative values other than -1 are treated as unsigned 
            values in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <param name="timeout">The absolute time period to wait for the event before returning.  If 
            the time span in milliseconds is 0, operations will not wait for the event at all.  If the 
            time span is TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to 
            UInt32.MaxValue, the attempt to wait for the event will never timeout.  Negative time spans 
            are not valid.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <param name="timeoutMilliseconds">The absolute time period (in milliseconds) to wait for the 
            event before returning.  If the value is VisaConstants.ImmediateTimeout (0), operations will not 
            wait for the event at all.  If the value is VisaConstants.InfiniteTimeout (-1), the attempt to 
            wait for the event will never timeout.  Negative values other than -1 are treated as unsigned 
            values in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <param name="eventQueueStatus">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#WaitOnEvent(System.Int32,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for an occurrence of the specified event for this session. In particular, WaitOnEvent 
            suspends execution of the thread o which it is called and waits for the specified event 
            for at least the time period specified by timeout.
            </summary>
            <param name="eventType">An integer event ID that identifies an event type supported by 
            Keysight VISA.NET.</param>
            <param name="timeout">The absolute time period to wait for the event before returning.  If 
            the time span in milliseconds is 0, operations will not wait for the event at all.  If the 
            time span is TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to 
            UInt32.MaxValue, the attempt to wait for the event will never timeout.  Negative time spans 
            are not valid.</param>
            <param name="status">The status of the event queue for the specified event type.</param>
            <returns>The event arguments for the event.</returns>
        </member>
        <member name="P:Keysight.Visa.VisaSession.InternalHandle">
            <summary>
            The VISA C handle to the underlying VISA C session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.IsDisposed">
            <summary>
            Indicates whether the object's Dispose code has completed (true) or not (false).
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.IsDisposedSyncRoot">
            <summary>
            The object on which Dispose creates a lock while disposing, to prevent concurrent 
            execution of the Dispose code in multiple threads.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.EventQueueCapacity">
            <summary>
            The maximum number of events that can be queued at any time on this session.  The default 
            is 50.
            </summary>
            <remarks>
            <para>The range is between 1 and UInt32.MaxValue, inclusive.</para>
            <para>This property cannot be changed after calling <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, beginning an 
            asynchronous I/O operation, or registering an event handler for an event.</para>
            <para>This property only applies to this session (VISA local scope).</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.HardwareInterfaceName">
            <summary>
            A human-readable description of the hardware interface associated with this session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.HardwareInterfaceNumber">
            <summary>
            The board number of the hardware interface associated with this session.
            </summary>
            <remarks>
            The range is between 0 and UInt16.MaxValue, inclusive.  The default is 0.
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.HardwareInterfaceType">
            <summary>
            The type (GPIB, ASRL, etc.) of the hardware interface associated with this session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceClass">
            <summary>
            The resource class of the currently open resource.  Possible values are INSTR, INTFC, MEMMAC, 
            SOCKET, and BACKPLANE.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceImplementationVersion">
            <summary>
            The version of this Keysight VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceLockState">
            <summary>
            The state of the resource-wide lock on the currently open resource.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceManufacturerId">
            <summary>
            The VXI manufacturer ID of the software vendor of this VISA.NET implementation - '4095'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceManufacturerName">
            <summary>
            The name of the software vendor that corresponds to the ResourceManufacturerId property - 
            'Keysight Technologies, Inc.'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceName">
            <summary>
            The VISA resource name of the currently open resource. This name is the canonical version 
            of the resource name and therefore may vary from the resourceName parameter used to 
            instantiate the session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceSpecificationVersion">
            <summary>
            The version of the VISA.NET specification that describes the functionality provided by this 
            session class.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.SynchronizeCallbacks">
            <summary>
            Specifies whether callbacks must be performed in a specific synchronization context.  If false, 
            the implementation is allowed to execute callbacks in any context.  The default value is true.
            This property applies to this session only (local scope).
            </summary>
            <remarks>
            <para>This property applies to both I/O callbacks and events, but the point in time at which the 
            synchronization context is captured is different.  For events, context is captured at event 
            registration, for each event type and delegate, regardless of the current state of this property. 
            When an event is raised, the implementation uses this property to determine the context in 
            which to invoke the delegate.  For asynchronous I/O, context is captured at the begin operation 
            (e.g. BeginRead, BeginWrite) if this property is true.</para>
            <para>The default value is true.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.TimeoutMilliseconds">
            <summary>
            The I/O timeout in milliseconds for I/O communication on this resource session.
            </summary>
            <remarks>
            <para>If the timeout is VisaConstants.ImmediateTimeout (0), operations will never wait for the 
            device to respond.  If the timeout is VisaConstants.InfiniteTimeout (-1), I/O communication 
            will never timeout.  Negative values other than -1 are treated as unsigned values in the 
            range between Int32.MaxValue and UInt32.MaxValue.  This property applies to this session only 
            (VISA local scope).</para>
            <para>The default value is 2000 milliseconds.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.Ivi#Visa#INativeVisaSession#Handle">
            <summary>
            The session ID used by the underlying Keysight VISA C implementation that corresponds to this 
            session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ExportEnabled">
            <summary>Together with the Keysight <see cref="!:ResourceManager.FindExportedResourcesOnly">ResourceManager.FindExportedResourcesOnly</see> property, determines whether the resource
            associated with this session instance is reported by the Keysight <see cref="!:ResourceManager.Find"/> and <see cref="!:ResourceManager.Parse"/> methods.</summary>
            <remarks>
            	<para>This property is specific to Keysight VISA.NET.</para>
            	<para>This property applies to the connected resource (global scope), and affects all sessions 
            connected to the resource.</para>
            	<para>If this property is false, and if the Keysight <see cref="P:ResourceManager.FindExportedResourcesOnly"/> 
            is true, the resource associated with this session instance is not reported by the Keysight 
            <see cref="M:ResourceManager.Find"/> and <see cref="M:ResourceManager.Parse"/> methods.  If 
            true, or if the Keysight ResourceManager.FindExportedResourcesOnly property is false, the 
            resource associated with this session instance is reported by the Keysight ResourceManager.Find 
            and ResourceManager.ParseResource methods.  </para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.ResourceManager">
            <summary>
            A private instance of the <see cref="T:ResourceManager"/> created when this session was 
            instantiated, and available until this session is disposed.
            </summary>
            <remarks>
            <para>This property is specific to Keysight VISA.NET.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.WaitForLockRelease">
            <summary>
            Indicates whether methods and properties from this session instance will wait for a timeout 
            period for a resource lock to be released (true) or not (false).
            </summary>
            <remarks>
            <para>This property is specific to Keysight VISA.NET.</para>
            <para>This property only applies to this session (VISA local scope).</para>
            <para> If WaitForLockRelease is true, and if the resource has been exclusively locked, methods and properties from 
            this session instance will wait, for a period equal to the session timeout, for the lock to be 
            released.  If the lock is released within the timeout period, the method or property will 
            execute normally.  If the lock is not released within the timeout period, the method or 
            property will throw an exception that indicates a timeout error rather than a locking error.  </para>
            <para>The default is false, in which case methods and properties from this session instance will 
            not wait for the timeout period if the resource is locked. If the resource is locked, they will throw 
            an exception that indicates a locking error.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VisaSession.SessionType">
            <summary>
            The type of the current session.
            </summary>
            <remarks>
            <para>This property is specific to Keysight VISA.NET.</para>
            <para>This property only applies to this session (VISA local scope).</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.#ctor(System.String)">
            <summary>
            Perform the operations necessary to instantiate a GpibInterfaceSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and an infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Perform the operations necessary to instantiate a GpibInterfaceSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Perform the operations necessary to instantiate a GpibInterfaceSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.AssertTrigger">
            <summary>
            Asserts a software trigger.
            </summary>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.PassControl(System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
            <remarks>
            <para>This operation passes controller in charge status to the device indicated by 
            primaryAddress and then deasserts the ATN line.</para>
            <para>This method assumes that the targeted device has controller capability.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.PassControl(System.Int16,System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
            <param name="secondaryAddress">The secondary address of the GPIB device.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.ControlAtn(Ivi.Visa.AtnMode)">
            <summary>
            Controls the state of the GPIB ATN interface line, and optionally the active controller 
            state of the local interface board.
            </summary>
            <param name="command">The action to be taken with respect to the GPIB ATN line.</param>
            <remarks>
            <para> This operation asserts or deasserts the GPIB ATN interface line according to the 
            specified mode. The mode can also specify whether the local interface board should 
            acquire or release Controller Active status.</para>
            <para>It is generally not necessary to use the viGpibControlATN operation in most 
            applications. Other methods such as <see cref="M:Keysight.Visa.GpibInterfaceSession.PassControl(System.Int16)">PassControl</see> and 
            <see cref="M:Keysight.Visa.GpibInterfaceSession.SendCommand(System.Byte[])"/> modify the ATN and/or CIC state automatically.</para>
            <seealso cref="M:Keysight.Visa.GpibInterfaceSession.PassControl(System.Int16)"/>
            <seealso cref="M:Keysight.Visa.GpibInterfaceSession.PassControl(System.Int16,System.Int16)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.SendCommand(System.Byte[])">
            <summary>
            Writes GPIB command bytes on the bus.
            </summary>
            <param name="data">The GPIB command bytes.</param>
            <returns>The number of bytes actually written.</returns>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.SendRemoteLocalCommand(Ivi.Visa.GpibInterfaceRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local
            state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the GPIB REN line.</param>
            <remarks>
            <para>This operation asserts or deasserts the GPIB REN interface line according to the 
            specified mode. The mode can also specify whether the device associated with this 
            session should be placed in local state (before deasserting REN) or remote state 
            (after asserting REN).</para>
            <para>This operation is valid only if the GPIB interface associated with this session 
            is currently the system controller.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.SendInterfaceClear">
            <summary>
            Pulses the interface clear line (IFC) for at least 100 microseconds.  This operation
            asserts the IFC line and the local interface becomes controller in charge (CIC).
            </summary>
            <remarks>
            <para>The local board must be the system controller.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#AbortAsyncOperation(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Requests the session to terminate normal execution of an asynchronous read or write 
            operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.  When done, notify the
            calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[])">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[])">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#EndRead(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#EndReadString(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation and
            return the string that was read.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#EndWrite(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous write operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes written during the write operation.</returns>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Read">
            <summary>
            Read bytes until a newline or END is reached, whichever comes first.
            </summary>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte[],System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer internally.
            The tradeoff is that it eliminates an uneeded copy from the unmanaged buffer to the .NET 
            buffer parameter, which should result in noticeably better performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte*,System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">A reference to an array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer for the 
            read buffer parameter.  The tradeoff is that it eliminates an uneeded copy from the 
            unmanaged buffer to the .NET buffer parameter, which should result in noticeably better 
            performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#ReadString">
            <summary>
            Read characters into the return string until a newline or END is reached, whichever comes
            first.
            </summary>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[])">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The bytes to be written.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte*,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="pBuffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="pBuffer">A reference to the bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Write(System.String)">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The string to be written.</param>
        </member>
        <member name="M:Keysight.Visa.GpibInterfaceSession.Ivi#Visa#IMessageBasedRawIO#Write(System.String,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> characters from <paramref name="buffer"/> to the device,
            starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The string to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.Cleared">
            <summary>
            Occurs when the GPIB controller has been sent a device clear message.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.ControllerInCharge">
            <summary>
            Occurs when the GPIB controller has gained or lost CIC (controller in charge) status.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.Listen">
            <summary>
            Occurs when the GPIB controller has been addressed to listen.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the interface.
            </summary>
            <remarks>
            <para>When this event is received, client code should call ReadStatusByte.</para>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.Talk">
            <summary>
            Occurs when the GPIB controller has been addressed to talk.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.GpibInterfaceSession.Trigger">
            <summary>
            Occurs when a trigger interrupt is received from the interface.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.AddressState">
            <summary>
            Indicates whether the specified GPIB interface is currently addressed to talk or listen,
            or is not addressed.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.AllowDma">
            <summary>
            Indicates whether I/O accesses should use DMA (true) or Programmed I/O (false). For some GPIB 
            cards, this attribute may have global effects even though it is documented to be a local 
            attribute, which may affect performance but not functionality.
            </summary>
            <remarks>
            <para>The default is true.</para>
            <para>For some configurations, this property may not allow you to change whether DMA is 
            enabled, so reading this property's value back may not echo the value that was set.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.AtnState">
            <summary>
            The current state of the GPIB ATN (ATtentioN) interface line.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.HS488CableLength">
            <summary>
            The total length of the GPIB cable used in this GPIB interface, in meters.
            </summary>
            <remarks>
            <para>The range is between 1 and 15 inclusive.  The property may also return 0 (HS488 
            disabled) or -1 (HS488 not implemented).</para>
            <para>If HS488 is not supported by this GPIB interface, attempts to set this property will 
            throw an exception.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.DeviceStatusByte">
            <summary>
            The 488-style status byte of the local controller associated with this session.  
            Trying to set this property to a value other than 0 will normally result in an 
            exception.
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.
            </summary>
            <remarks>
            <para>For some configurations, this property may not allow you to change the protocol type, 
            so reading this property's value back may not echo the value that was set.</para>
            </remarks>
            <remarks>
            <para>For some configurations, this property may not allow you to change the protocol type, 
            so reading this property's value back may not echo the value that was set.</para>
            <para>For GPIB sessions you can choose between IOProtocol.Normal and IOProtocol.HS488 
            (high-speed) data transfers.</para>
            <para>The default is IOProtocol.Normal.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.IsControllerInCharge">
            <summary>
            Indicates whether the specified GPIB interface is currently the controller in charge (CIC).
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.IsSystemController">
            <summary>
            Specifies whether the specified GPIB interface is currently the system controller.
            </summary>
            <remarks>
            <para>For some configurations this attribute may be modified only through a configuration 
            utility.  For these cases, trying to set this property will throw an exception.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.NdacState">
            <summary>
            The current state of the GPIB NDAC (Not Data ACcepted) interface line.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.PrimaryAddress">
            <summary>
            The primary address of the local GPIB controller used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 30, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.RenState">
            <summary>
            The current state of the GPIB REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.SecondaryAddress">
            <summary>
            The secondary address of the local GPIB controller used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 30, inclusive.  The value -1 indicates that there is no 
            secondary address.  The default is -1.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.SendEndEnabled">
            <summary>
            Enables/disables asserting an END on the last byte of a write.
            </summary>
            <remarks>
            <para>The default is true.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.SrqState">
            <summary>
            The current state of the GPIB SRQ (Service ReQuest) interface line.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacter">
            <summary>
            The ASCII character used to terminate a raw I/O read operation.
            <seealso cref="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacterEnabled"/>
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.  The default is 0x0a (line feed).</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacterEnabled">
            <summary>
            If true, a raw I/O read operation ends when a termination character is received.
            <seealso cref="P:Keysight.Visa.GpibInterfaceSession.TerminationCharacter"/>
            </summary>
            <remarks>
            <para>The default is false.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibInterfaceSession.RemoteInterfaceProtocol">
            <summary>
            The LAN protocol used for remote sessions. (Keysight Specific)
            </summary>
        </member>
        <member name="T:Keysight.Visa.MemoryMap">
            <summary>
            The MemoryMap class is an support class that supports MEMACC operations for the PxiMemorySession 
            and VxiMemorySession classes.  It derives from <see cref="T:Ivi.Visa.IMemoryMap"/>.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this session.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Dispose(System.Boolean)">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this implementation of Keysight VISA.NET, but only if another thread has not already 
            started to dispose of this object.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.CheckDisposed">
            <summary>
            Throws an exception if the object is already disposed.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Peek8(System.Int64)">
            <summary>
            Read a byte from <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The byte that was read.</returns>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Peek16(System.Int64)">
            <summary>
            Read a 16-bit integer from <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 16-bit integer that was read.</returns>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Peek32(System.Int64)">
            <summary>
            Read a 32-bit integer from <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 32-bit integer that was read.</returns>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Peek64(System.Int64)">
            <summary>
            Read a 64-bit integer from <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 64-bit integer that was read.</returns>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Poke8(System.Int64,System.Byte)">
            <summary>
            Write a byte value to <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The byte that is written.</param>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Poke16(System.Int64,System.Int16)">
            <summary>
            Write a 16-bit integer value to <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 16-bit integer that is written.</param>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Poke32(System.Int64,System.Int32)">
            <summary>
            Write a 32-bit integer value to <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 32-bit integer that is written.</param>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MemoryMap.Poke64(System.Int64,System.Int64)">
            <summary>
            Write a 64-bit integer value to <paramref name="offset"/> in the mapped memory.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 64-bit integer that is written.</param>
            <remarks>
            <para>The mapped memory is mapped in the MemoryMap class constructor.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.IsDisposed">
            <summary>
            True if the object Dispose code has completed.
            </summary>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.IsDisposedSyncRoot">
            <summary>
            Dispose creates a lock on this object while disposing, to prevent concurrent 
            execution of the Dispose code in multiple threads.
            </summary>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.AddressSpace">
            <summary>
            The address space that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.BaseAddress">
            <summary>
            The starting address of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace"/>
            that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.Size">
            <summary>
            The size of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace"/>
            that is currently mapped to this session, starting at the
            <see cref="P:Ivi.Visa.IMemoryMap.BaseAddress"/>
            </summary>
        </member>
        <member name="P:Keysight.Visa.MemoryMap.VirtualAddress">
            <summary>
            Returns IntPtr.Zero if the window is only accessible through the operations provided
            on this interface.  A return value other than IntPtr.Zero indicates you can dereference
            the mapped address as a pointer.
            </summary>
        </member>
        <member name="T:Keysight.Visa.MessageBasedRawIO">
            <summary>
            The MessageBasedRawIO class is designed to implement message based read/write. For more information, see <see cref="P:Keysight.Visa.MessageBasedRawIO.RawIO">Raw I/O</see>.
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._session">
            <summary>
            The session that proceeds raw I/O
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._pendingResult">
            <summary>
            To handle the case that BeginRead/BeginWrite may complete synchronously
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._pendingJobs">
            <summary>
            All pending read/write jobs
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._eventAdapter">
            <summary>
            The delegate that will be invoked when I/O completion event happens
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._enabled">
            <summary>
            Indicate whether the event has been enabled
            </summary>
        </member>
        <member name="F:Keysight.Visa.MessageBasedRawIO._lockObject">
            <summary>
            Used for lock
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.#ctor(Keysight.Visa.VisaSession)">
            <summary>
            Constructor
            </summary>
            <param name="session">The session to proceed raw I/O.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.System#IDisposable#Dispose">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Close">
            <summary>
            Disables event listener and removes all pending jobs.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.InstallHandler">
            <summary>
            Registers listener to IO completion event.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.UninstallHandler">
            <summary>
            Unregister listener to IO completion event.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.OnVisaIOEvent(System.UInt32)">
            <summary>
            Handles IO completion event, it is the delegate called back from VISA-C when IO event occurs.
            </summary>
            <param name="context">The event context</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#AbortAsyncOperation(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Requests the session to terminate normal execution of an asynchronous read or write 
            operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the asynchronous results 
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.  When done, notify the
            calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[])">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[])">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#EndRead(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#EndReadString(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation and
            return the string that was read.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#EndWrite(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous write operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes written during the write operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Read">
            <summary>
            Read bytes until a newline or END is reached, whichever comes first.
            </summary>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte[],System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer internally.
            The tradeoff is that it eliminates an uneeded copy from the unmanaged buffer to the .NET 
            buffer parameter, which should result in noticeably better performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte*,System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">A reference to an array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer for the 
            read buffer parameter.  The tradeoff is that it eliminates an uneeded copy from the 
            unmanaged buffer to the .NET buffer parameter, which should result in noticeably better 
            performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#ReadString">
            <summary>
            Read characters into the return string until a newline or END is reached, whichever comes
            first.
            </summary>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[])">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The bytes to be written.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte*,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="pBuffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="pBuffer">A reference to the bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Write(System.String)">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The string to be written.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedRawIO.Ivi#Visa#IMessageBasedRawIO#Write(System.String,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> characters from <paramref name="buffer"/> to the device,
            starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The string to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:Keysight.Visa.MessageBasedRawIO.RawIO">
            <summary>
            A reference to the raw (no formatting) I/O interface.
            </summary>
        </member>
        <member name="T:Keysight.Visa.PxiBackplaneSession">
            <summary>
            An instantiable class that supports all PXI BACKPLANE sessions. 
            </summary>
            <remarks>
            <para>PXI instrument vendors do not ordinarily expose the information needed to directly access 
            a PXI instrument.  This information is cryptic and may change from one firmware version to the next. Instead, vendors provide instrument drivers, software front panels, and other programs 
            for instrument access.  Under normal circumstances, instrument users should not attempt to access 
            PXI backplanes or instruments using this class.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a PxiBackplaneSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and an infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a PxiBackplaneSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility. The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception; otherwise, this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never time out.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a PxiBackplaneSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception; otherwise, this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never time out.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.ReserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a single trigger line that the caller can then map and/or assert.
            </summary>
            <param name="bus">The bus segment in which to reserve the trigger.</param>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.ReserveTriggers(System.Int16[],Ivi.Visa.TriggerLine[])">
            <summary>
            Reserve multiple trigger lines that the caller can then map and/or assert.
            </summary>
            <param name="buses">The bus segments in which to reserve the triggers.</param>
            <param name="lines">The trigger lines to reserve.</param>
            <remarks>
            <para>This method will succeed only if it can reserve all of the bus/line pairs.  
            If any of the bus/line pairs cannot be reserved, this method will not reserve any 
            of them.</para>
            <para>Note that the buses and lines arrays are parallel: the lengths must be the 
            same, and buses[n] corresponds to lines[n].</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.UnreserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a single trigger line that the caller previously reserved.
            </summary>
            <param name="bus">The bus segment in which to unreserve the trigger.</param>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Maps the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <remarks>
            <para>Mapping a trigger line (as either source or destination) multiple times requires 
            special hardware capabilities and is not guaranteed to be implemented.</para>
            <para>If this operation is called multiple times on the same backplane resource with the same 
            source trigger line and different destination trigger lines, the result should be that when 
            the source trigger line is asserted all specified destination trigger lines should also be 
            asserted.</para>
            <para>If this operation is called multiple times on the same backplane resource with different 
            source trigger lines and the same destination trigger line the result should be that when any 
            of the specified source trigger lines is asserted, the destination trigger line should also be 
            asserted.</para>
            <para>Mapping one trigger line to another modifies the state of hardware. Therefore, the 
            effect continues beyond the scope of the VISA.NET session that mapped it, even if that VISA.NET 
            session is closed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Maps the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">If true, the trigger has already been mapped.</param>
            <remarks>
            <para>Mapping a trigger line (as either source or destination) multiple times requires 
            special hardware capabilities and is not guaranteed to be implemented.</para>
            <para>If this operation is called multiple times on the same backplane resource with the same 
            source trigger line and different destination trigger lines, the result should be that when 
            the source trigger line is asserted all specified destination trigger lines should also be 
            asserted.</para>
            <para>If this operation is called multiple times on the same backplane resource with different 
            source trigger lines and the same destination trigger line the result should be that when any 
            of the specified source trigger lines is asserted, the destination trigger line should also be 
            asserted.</para>
            <para>Mapping one trigger line to another modifies the state of hardware. Therefore, the 
            effect continues beyond the scope of the VISA.NET session that mapped it, even if that VISA.NET 
            session is closed.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmaps the specified source trigger line.
            </summary>
            <param name="sourceBus">The bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <remarks>
            <para>This operation unmaps only one trigger mapping per call. If 
            <see cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">MapTrigger</see> was 
            called multiple times on the same backplane resource and created multiple mappings for the 
            trigger source, trigger mappings other than the one specified by the trigger source remain in 
            effect after this call completes.</para>
            <seealso cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmaps the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceBus">The bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <remarks>
            <para>This operation unmaps only one trigger mapping per call. If 
            <see cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">MapTrigger</see> was 
            called multiple times on the same backplane resource and created multiple mappings for either 
            the trigger source or destination, trigger mappings other than the one specified by the 
            trigger source or destination remain in effect after this call completes.</para>
            <seealso cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.PxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiBackplaneSession.ChassisNumber">
            <summary>
            The identification number of this PXI chassis.
            </summary>
            <remarks>
            <para>The range is from 1 to 32767, inclusive.  The value -1 indicates that the chassis is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiBackplaneSession.ManufacturerName">
            <summary>
            The name of the hardware vendor for this PXI chassis.
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiBackplaneSession.ModelName">
            <summary>
            The name of this chassis.
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.PxiMemorySession">
            <summary>
            An instantiable class that supports all PXI MEMACC sessions. 
            </summary>
            <remarks>
            <para>PXI instrument vendors do not ordinarily expose the information needed to directly access 
            a PXI instrument.  This information is cryptic and may change from one firmware version to the next.
            Instead, vendors provide instrument drivers, software front panels, and other programs 
            for instrument access.  Under normal circumstances, instrument users should not attempt to access 
            PXI instruments using this class.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.RegisterBasedSession">
            <summary>
            An abstract (non-instantiable by itself) class inherited 
            by all VISA.NET register-based session classes.  
            </summary>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Perform the operations necessary to instantiate the RegisterBasedSession portion of a class 
            that derives from it.
            </summary>
            <param name="sessionType">The type of the derived session that is calling this constructor.</param>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to IO Libraries Connection 
            Expert documentation for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Perform the operations necessary to instantiate the RegisterBasedSession portion of a class 
            that derives from it.
            </summary>
            <param name="sessionType">The type of the derived session that is calling this constructor.</param>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to IO Libraries Connection 
            Expert documentation for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Maps the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space"/> to be mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>An <see cref="T:Ivi.Visa.IMemoryMap">IMemoryMap</see>IMemoryMap interface reference to 
            an instance of the <see cref="T:Keysight.Visa.MemoryMap"/> class, which provides the ability to Peek and Poke 
            mapped memory.</returns>
            <remarks>
            <para>You can only have one map at a time for a given session. If you need to have 
            multiple maps to a device, you must open one session for each map needed.</para>
            <para>For instrument (INSTR) sessions, the <paramref name="offset"/> parameter is 
            rthe offset address elative to the device's allocated address base for the corresponding 
            address space specified.</para>
            <para>For VXI memory access (MEMACC) sessions, the <paramref name="offset"/> parameter 
            is an absolute offset from the start of the VXI mapSpace.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>MapAddress does not need to be called before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The "high-level" In and Out methods operate independently of the "low-level" Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Reads in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Reads in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Reads in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Writes an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Writes a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Writes a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Writes a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
            <remarks>
            <para>You do not need to call MapAddress before calling this method.</para>
            <para>If this session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter specifies an absolute address.</para>
            <para>The high-level In and Out methods operate independently of the low-level Peek 
            and Poke methods defined in the <see cref="T:Keysight.Visa.MemoryMap"/> class, regardless of the configured 
            state of the hardware that is used to perform memory accesses.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 8-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Moves an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 8-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Moves a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 16-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*2) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Moves a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 16-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*2) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Moves a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 32-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*4) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Moves a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 32-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*4) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Moves a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/> .</para>
            <para>The <paramref name="count"/> parameter is the number of 64-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*8) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Moves a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="sourceOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="sourceOffset"/> parameter 
            is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            <para>The <paramref name="count"/> parameter is the number of 64-bit elements to transfer, 
            beginning at the specified offset. Therefore, (sourceOffset + count*8) cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            <para>The <paramref name="count"/> parameter is the number of 8-bit elements to transfer, 
            beginning at the specified offset. Therefore, sourceOffset + count*8 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            <para>The count parameter is the number of 8-bit elements to transfer, beginning at the specified 
            <paramref name="sourceIndex"/>. Therefore, sourceIndex + sourceBuffer.Length cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            <para>The count parameter is the number of 16-bit elements to transfer, beginning at the specified 
            <paramref name="sourceIndex"/>. Therefore, sourceIndex + sourceBuffer.Length*2 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            <para>The count parameter is the number of 32-bit elements to transfer, beginning at the specified 
            <paramref name="sourceIndex"/>. Therefore, sourceIndex + sourceBuffer.Length*4 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.RegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the <paramref name="destinationOffset"/> 
            parameter specifies a relative offset from the start of the instrument’s address space. If 
            the session is a memory access (MEMACC) session, the <paramref name="destinationOffset"/> 
            parameter is an absolute offset from the start of memory in the specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value <see cref="F:Ivi.Visa.AddressSpace.PxiAllocation"/>.</para>
            <para>The count parameter is the number of 64-bit elements to transfer, beginning at the specified 
            <paramref name="sourceIndex"/>. Therefore, sourceIndex + sourceBuffer.Length*8 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.RegisterBasedSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.
            </summary>
            <remarks>
            <para>For some configurations, this property may not allow you to change whether DMA is 
            enabled, so reading this property's value back may not echo the value that was set.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.RegisterBasedSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <remarks>
            <para>For MoveOutXX methods, this property specifies how much the destination offset will 
            be incremented after every transfer.</para>
            <para>The default value of this attribute is 1, indicating that the destination address will 
            be incremented by 1 after each transfer, so that items are moved into consecutive elements.</para>
            <para>If this property is set to 0, the MoveOutXX methods will always write to the same 
            element, essentially treating the destination as a FIFO register.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.RegisterBasedSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <remarks>
            <para>For MoveInXX methods, this property specifies how much the source offset will 
            be incremented after every transfer.</para>
            <para>The default value of this attribute is 1, indicating that the source address will be 
            incremented by 1 after each transfer, so that items are moved from consecutive elements.</para>
            <para>If this property is set to 0, the MoveInXX methods will always read from the same 
            element, essentially treating the source as a FIFO register.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a PxiMemorySession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and an infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Perform the operations necessary to instantiate a PxiMemorySession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Perform the operations necessary to instantiate a PxiMemorySession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.MemoryAllocate(System.Int64)">
            <summary>
            Allocates memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <returns>The offset of the allocated device memory.</returns>
            <remarks>
            <para>The offset returned for a PXI memory session is an absolute physical address of a contiguous block of memory that has been allocated 
            by the operating system. The memory block is locked, meaning it will not be swapped 
            out.  A common use for this memory is to do user-mode DMA to or from a PXI device.</para>
            <para>Both the high-level memory access functions defined in RegisterBasedSession (InXX, 
            OutXX, MoveInXX, MoveOutXX) and the low-level memory access functions defined in the 
            MemoryMap class (PeekXX, PokeXX) can be used to access the allocated memory.</para>
            <seealso cref="T:Keysight.Visa.RegisterBasedSession"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.MemoryAllocate(System.Int64,System.Boolean)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <param name="require32BitRegion">The entire allocated region must be 
            in the 32-bit address range.</param>
            <returns>The offset of the allocated device memory.</returns>
            <remarks>
            <para>The absolute physical address of a contiguous block of memory which has been allocated 
            by the operating system. The memory block is also locked, meaning it will not be swapped 
            out.  A common use for this memory is to do user-mode DMA to or from a PXI device.</para>
            <para>Both the high-level memory access functions defined in RegisterBasedSession (InXX, 
            OutXX, MoveInXX, MoveOutXX) and the low-level memory access functions defined in the 
            MemoryMap class (PeekXX, PokeXX) can be used to access the allocated memory.</para>
            <seealso cref="T:Keysight.Visa.RegisterBasedSession"/>
            <seealso cref="T:Keysight.Visa.MemoryMap"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiMemorySession.MemoryFree(System.Int64)">
            <summary>
            Frees previously-allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="T:Keysight.Visa.PxiSession">
            <summary>
            An instantiable class that supports all PXI INSTR sessions. 
            </summary>
            <remarks>
            <para>PXI instrument vendors do not ordinarily expose the information needed to directly access 
            a PXI instrument.  This information is cryptic and may change from one firmware version to the next.
            Instead, vendors provide instrument drivers, software front panels, and other programs 
            for instrument access.  Under normal circumstances, instrument users should not attempt to access 
            PXI instruments using this class.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a PxiSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and an infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a PxiSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            is None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception; otherwise, this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a PxiSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception; otherwise, this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never time out.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.PxiSession.ReserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Keysight VISA.NET does not support this method.
            </summary>
            <param name="line">The trigger line to reserve.</param>
            <remarks>This is a standard method to reserve a PXI trigger line, but it is not supported by Keysight VISA.NET.</remarks>
        </member>
        <member name="M:Keysight.Visa.PxiSession.UnreserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Keysight VISA.NET does not support this method.
            </summary>
            <param name="line">The trigger line to unreserve.</param>
            <remarks>This is a standard method to unreserve a PXI trigger line, but it is not supported by Keysight VISA.NET.</remarks>
        </member>
        <member name="E:Keysight.Visa.PxiSession.Interrupt">
            <summary>
            Occurs when a PXI interrupt is received from the device.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ActualLinkWidth">
            <summary>
            The actual, negotiated link width.
            </summary>
            <remarks>
            <para>The value may be 1, 4 or 8.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.AllowWriteCombining">
            <summary>
            Specifies whether the implementation should attempt to combine bus write transfers 
            into a larger transfer before bursting over the PCI bus.
            <para>The default is false.</para>
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.BusNumber">
            <summary>
            The PCI bus number.
            </summary>
            <remarks>
            <para>The range is from 0 to 255, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ChassisNumber">
            <summary>
            The identification number of the chassis where this device is located.  If the chassis 
            has not been identified, this property returns -1.
            </summary>
            <remarks>
            <para>The range is from 1 to 32767, inclusive.  The value -1 indicates that the chassis is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DeviceNumber">
            <summary>
            The PCI device number.
            </summary>
            <remarks>
            <para>The range is from 0 to 31, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DstarBusNumber">
            <summary>
            The differential star bus number.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the bus is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DstarLineSet">
            <summary>
            The connected set of PXI Express differential star bus lines.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the bus is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.FunctionNumber">
            <summary>
            The PCI function number.
            </summary>
            <remarks>
            <para>The range is from 0 to 7, inclusive.</para>
            <para>All devices have a function 0. Multifunction devices will also support other function numbers.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.IsExpress">
            <summary>
            If true, the device is a PXI Express device.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ManufacturerId">
            <summary>
            The subsystem PCI vendor identification number of the hardware vendor for this device, or if 
            the subsystem information does not exist, the primary PCI vendor identification number.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MaxLinkWidth">
            <summary>
            The maximum usable link width.
            </summary>
            <remarks>
            <para>The value may be 1, 4 or 8.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar0">
            <summary>
            The memory type used in Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar1">
            <summary>
            The memory type used in Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar2">
            <summary>
            The memory type used in Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar3">
            <summary>
            The memory type used in Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar4">
            <summary>
            The memory type used in Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemTypeBar5">
            <summary>
            The memory type used in Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar0">
            <summary>
            The memory base address for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar1">
            <summary>
            The memory base address for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar2">
            <summary>
            The memory base address for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar3">
            <summary>
            The memory base address for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar4">
            <summary>
            The memory base address for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemBaseBar5">
            <summary>
            The memory base address for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar0">
            <summary>
            The memory size for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar1">
            <summary>
            The memory size for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar2">
            <summary>
            The memory size for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar3">
            <summary>
            The memory size for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar4">
            <summary>
            The memory size for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.MemSizeBar5">
            <summary>
            The memory size for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ModelCode">
            <summary>
            The vendor-specific subsystem PCI model number for this device, or if the subsystem 
            information does not exist, the primary PCI model number.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.  The default is 0.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.Slot">
            <summary>
            The physical slot location of this device within its chassis.  If the location is not known, 
            this property returns VisaConstants.UnknownSlotNumber.
            </summary>
        </member>
        <member name="P:Keysight.Visa.PxiSession.SlotLinkWidth">
            <summary>
            The link width used by the slot.
            </summary>
            <remarks>
            <para>The value may be 1, 4 or 8.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.SlotLocalBusLeft">
            <summary>
            The slot number or special feature connected to local left bus lines.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the slot is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.SlotLocalBusRight">
            <summary>
            The slot number or special feature connected to local right bus lines.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the slot is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.SlotPath">
            <summary>
            The slot path.
            </summary>
            <remarks>
            <para>PXI slot paths are a sequence of values representing the PCI device number 
            and function number of a PCI module and each parent PCI bridge that routes the 
            module to the host PCI bridge. The string format of the attribute value is 
            device1[.function1][,device2[.function2]][,...].</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.StarTriggerBus">
            <summary>
            The value for the PXI star trigger bus.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the trigger is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.StarTriggerLine">
            <summary>
            The value for the connected PXI star trigger line.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the trigger is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.TriggerBus">
            <summary>
            The trigger bus number of this device.
            </summary>
            <remarks>
            <para>The range is from 0 to 32767, inclusive.  The value -1 indicates that the trigger is 
            unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DmaChannel">
            <summary>
            Keysight internal use only.  The DMA Channel for a DMA transfer.
            </summary>
            <remarks>
            <para>This property is for Keysight internal use only.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DmaReadThreshold">
            <summary>
            Keysight internal use only.  The DMA read threshold for a DMA transfer.
            </summary>
            <remarks>
            <para>This property is for Keysight internal use only.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.PxiSession.DmaWriteThreshold">
            <summary>
            Keysight internal use only.  The DMA write threshold for a DMA transfer.
            </summary>
            <remarks>
            <para>This property is for Keysight internal use only.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.RemoteHardwareInterfaceType">
            <summary>
            The type (GPIB, ASRL, etc.) of a remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Custom">
            <summary>
            A type supported by Keysight VISA, where the type is not known.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Gpib">
            <summary>
            Indicates a GPIB remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Vxi">
            <summary>
            Indicates a VXI remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Serial">
            <summary>
            Indicates a Serial remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Tcpip">
            <summary>
            Indicates a TCPIP remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Usb">
            <summary>
            Indicates a USB remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Lan">
            <summary>
            Indicates a LAN remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Rsib">
            <summary>
            Indicates an RSIB remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.Socket">
            <summary>
            Indicates a TCPIP Sockets remote hardware interface.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteHardwareInterfaceType.HiSLIP">
            <summary>
            Indicates a TCPIP HiSLIP remote hardware interface.
            </summary>
        </member>
        <member name="T:Keysight.Visa.RemoteProtocol">
            <summary>
            Indicates the protocol used to connect this PC to the remote PC when using Keysight VISA.NET 
            remote access.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteProtocol.NotRemoting">
            <summary>
            The session is connected to a resource on the local PC.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteProtocol.Vxi11">
            <summary>
            The session is connected to a resource on a remote PC using a VXI-11 protocol.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteProtocol.SiclLan">
            <summary>
            The session is connected to a resource on a remote PC using a SICL-LAN protocol.
            </summary>
        </member>
        <member name="F:Keysight.Visa.RemoteProtocol.HiSlip">
            <summary>
            The session is connected to a resource on a remote PC using a HiSLIP protocol.
            </summary>
        </member>
        <member name="T:Keysight.Visa.GpibSession">
            <summary>
            An instantiable class that supports all GPIB INSTR sessions. 
            </summary>
        </member>
        <member name="T:Keysight.Visa.MessageBasedSession">
            <summary>
            An abstract (non-instantiable by itself) class inherited 
            by all VISA.NET message-based session classes.  
            </summary>
            <remarks>
            <para>Although it is technically possible, <b>Keysight recommends that customers not derive 
            custom classes from this class.</b>  Attempts to override some methods may result in a stack 
            overflow when the method is called.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Perform the operations necessary to instantiate the MessageBasedSession portion of a class 
            that derives from it.
            </summary>
            <param name="sessionType">The type of the derived session that is calling this constructor.</param>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to IO Libraries Connection 
            Expert documentation for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.#ctor(Keysight.Visa.SessionType,System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Perform the operations necessary to instantiate the MessageBasedSession portion of a class 
            that derives from it.
            </summary>
            <param name="sessionType">The type of the derived session that is calling this constructor.</param>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to IO Libraries Connection 
            Expert documentation for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger, depending on the default trigger protocol for the 
            session type.
            </summary>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and output buffer (both 
            raw and formatted I/O buffers).  It also may terminate ending operations on the device.
            </summary>
            <remarks>
            <para>For a GPIB session, this method sends a Device Clear to the device.</para>
            <para>For a TCPIP socket session, if IOProtocol property is Ieee4882, this method sends the 
            the string "*CLS\n" to the device. Otherwise, this operation is not valid.</para>
            <para>For a serial session, this method flushes the instrument buffer.</para>
            <para>For a USB session, this method sends the INITIATE_CLEAR and CHECK_CLEAR_STATUS commands 
            on the control pipe.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the 488.2 status byte.
            </summary>
            <returns>A value that indicates which status byte bits are set.</returns>
            <remarks>
            <para>For a session to a Serial device or TCPIP socket, if IOProtocol is Ieee4882, this 
            method sends the string "*STB?\n" to the device, and reads the status byte.  If IOProtocol 
            is not Ieee4882, this method cannot return the status byte. If the status information is 
            only one byte long, the most significant byte is returned with the zero value. If the service 
            requester does not respond in the actual timeout period, the method times out.</para>
            <para>For a session to a USB instrument, this function sends the READ_STATUS_BYTE command 
            on the control pipe.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#AbortAsyncOperation(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Requests the session to terminate normal execution of an asynchronous read or write 
            operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the asynchronous results 
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Int32,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.  When done, notify the
            calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[])">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginRead(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndRead method must be called whenever BeginRead completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.String,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[])">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling or using the wait 
            handle in the asynchronous results returned by the method.  For more details refer to the 
            asynchronous I/O examples in the "Using VISA.NET" section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#BeginWrite(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
            <remarks>
            <para>The calling program can detect when the I/O is complete using polling, using the wait 
            handle in the asynchronous results returned by the method, or waiting for the callback method 
            to be called.  For more details refer to the asynchronous I/O examples in the "Using VISA.NET" 
            section of the VISA.NET help file.</para>
            <para>The EndWrite method must be called whenever BeginWrite completes successfully and 
            returns a non-null IVisaAsyncResult.  If it is not called, the implementation may leak memory 
            associated with the underlying asynchronous operation.</para>
            <para>Keysight IO Libraries Suite allows only a single thread at a time from a given session 
            to access the device. To perform multiple asynchronous operations simultaneously, you can work 
            around this limitation by opening multiple sessions to the device and doing one asynchronous 
            call on each session.  However, it is the responsibility of the calling program to insure 
            that multiple asynchronous operations to a device are properly coordinated.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#EndRead(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#EndReadString(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation and
            return the string that was read.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#EndWrite(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous write operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes written during the write operation.</returns>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Read">
            <summary>
            Read bytes until a newline or END is reached, whichever comes first.
            </summary>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes, or until a newline or END is reached, whichever
            comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>An array of the bytes read.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte[],System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer internally.
            The tradeoff is that it eliminates an uneeded copy from the unmanaged buffer to the .NET 
            buffer parameter, which should result in noticeably better performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Read(System.Byte*,System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until a newline or END is reached, whichever comes first.
            </summary>
            <param name="buffer">A reference to an array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            <para>This overload of the read method is unsafe because it uses a .NET pointer for the 
            read buffer parameter.  The tradeoff is that it eliminates an uneeded copy from the 
            unmanaged buffer to the .NET buffer parameter, which should result in noticeably better 
            performance for large buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#ReadString">
            <summary>
            Read characters into the return string until a newline or END is reached, whichever comes
            first.
            </summary>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#ReadString(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until a newline or
            END is reached, whichever comes first.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END or newline terminated
            the read operation.</param>
            <returns>The string read during the read operation.</returns>
            <remarks>
            <para>If the device does not use a newline as it's termination character, you may have to 
            change the TerminationCharacter to match what the device uses.</para>
            <para>Not all devices and I/O interfaces correctly handle or generate END indicators.  In 
            general VISA.NET can accomodate these discrepancies, but you may need to tweak properties 
            like SendEndEnabled in order to read from the device.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[])">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The bytes to be written.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Write(System.Byte*,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="pBuffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="pBuffer">A reference to the bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Write(System.String)">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The string to be written.</param>
        </member>
        <member name="M:Keysight.Visa.MessageBasedSession.Ivi#Visa#IMessageBasedRawIO#Write(System.String,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> characters from <paramref name="buffer"/> to the device,
            starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The string to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="E:Keysight.Visa.MessageBasedSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            <para>When this event is received, client code should call <see cref="M:Keysight.Visa.MessageBasedSession.ReadStatusByte"/>.</para>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the device.  This property applies to this 
            session only (VISA local scope).
            </summary>
            <remarks>
            <para>For some configurations, this property may not allow you to change the protocol type to 
            certain values, so reading this property's value back may not echo the value that was set.</para>
            <para>For VXI sessions you can choose between IOProtocol.Normal (normal word serial) or 
            IOProtocol.Fdc (fast data channel, or FDC).  The default for VXI is IOProtocol.Normal.</para>
            <para>For GPIB sessions you can choose between IOProtocol.Normal and IOProtocol.HS488 
            (high-speed) data transfers.  The default for GPIB is IOProtocol.Ieee4882.</para>
            <para>For ASRL sessions, you can choose between IOProtocol.Normal and IOProtocol.Ieee4882 
            (IEEE 488.2 style transfers), in which case the Serial AssertTrigger, ReadSTB, and Clear 
            methods send 488.2-defined strings.  The default for Serial is IOProtocol.Ieee4882.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.  This property applies 
            to this session only (VISA local scope).
            </summary>
            <remarks>
            <para>The default is true.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.  This property applies to this session only (VISA 
            local scope).
            <seealso cref="P:Keysight.Visa.MessageBasedSession.TerminationCharacterEnabled"/>
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.  The default is 0x0a (line feed).</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.TerminationCharacterEnabled">
            <summary>
            If true, read operations end when a termination character is received.  This property applies to this 
            session only (VISA local scope).
            <seealso cref="P:Keysight.Visa.MessageBasedSession.TerminationCharacter"/>
            </summary>
            <remarks>
            <para>The default is false.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.FormattedIO">
            <summary>
            A reference to the Formatted I/O interface.  Keysight VISA.NET uses the standard Formatted 
            I/O implementation provided by the IVI Foundation in the VISA.NET Shared Components.
            </summary>
        </member>
        <member name="P:Keysight.Visa.MessageBasedSession.RawIO">
            <summary>
            A reference to the raw (no formatting) I/O interface.
            </summary>
        </member>
        <member name="M:Keysight.Visa.GpibSession.#ctor(System.String)">
            <summary>
            Perform the operations necessary to instantiate a GpibSession class without any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Perform the operations necessary to instantiate a GpibSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Perform the operations necessary to instantiate a GpibSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.GpibInstrumentRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local state
            of the device.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
            <remarks>
            <para>This operation asserts or deasserts the GPIB REN interface line according to the 
            specified mode. The mode can also specify whether the device associated with this 
            session should be placed in local state (before deasserting REN) or remote state 
            (after asserting REN).</para>
            <para>RemoteLocalMode.LocalWithoutLockout maps to GpibInstrRemoteLocalMode.GoToLocalDeassertRen.</para>
            <para>RemoteLocalMode.Remote maps to GpibInstrRemoteLocalMode.AddressDeviceAssertRen.</para>
            <para>RemoteLocalMode.RemoteWithLocalLockout maps to GpibInstrRemoteLocalMode.AddressDeviceSendLocalLockout.</para>
            <para>RemoteLocalMode.Local maps to GpibInstrRemoteLocalMode.GoToLocal.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.GpibSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local state
            of the device.
            </summary>
            <param name="mode">Indicates the action to be taken.  
            </param>
            <remarks>
            <para>This operation asserts or deasserts the GPIB REN interface line according to the 
            specified mode. The mode can also specify whether the device associated with this 
            session should be placed in local state (before deasserting REN) or remote state 
            (after asserting REN).</para>
            <para>RemoteLocalMode.LocalWithoutLockout maps to GpibInstrRemoteLocalMode.GoToLocalDeassertRen.</para>
            <para>RemoteLocalMode.Remote maps to GpibInstrRemoteLocalMode.AddressDeviceAssertRen.</para>
            <para>RemoteLocalMode.RemoteWithLocalLockout maps to GpibInstrRemoteLocalMode.AddressDeviceSendLocalLockout.</para>
            <para>RemoteLocalMode.Local maps to GpibInstrRemoteLocalMode.GoToLocal.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  This property applies to this session 
            only (VISA local scope).
            </summary>
            <remarks>
            <para>The default is true.</para>
            <para>For some configurations, this property may not allow you to change whether DMA is 
            enabled, so reading this property's value back may not echo the value that was set.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.PrimaryAddress">
            <summary>
            The primary address of the GPIB device used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 30, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.ReaddressingEnabled">
            <summary>
            Specifies whether to use repeat addressing before each read or write operation.  This property 
            applies to this session only (VISA local scope).
            </summary>
            <remarks>
            <para>The default value is true.</para>
            <para>For some configurations, this property may not allow you to change whether DMA is 
            enabled, so reading this property's value back may not echo the value that was set.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.RenState">
            <summary>
            The current state of the GPIB REN interface line.
            </summary>
        </member>
        <member name="P:Keysight.Visa.GpibSession.SecondaryAddress">
            <summary>
            The secondary address of the GPIB device used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 30, inclusive.  The value -1 indicates that there is no 
            secondary address.  The default is -1.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.UnaddressingEnabled">
            <summary>
            Specifies whether to unaddress the device (UNT and UNL) after each read or write operation.  
            This property applies to this session only (VISA local scope).  Trying to set this property 
            to a value other than false will normally result in an exception.
            </summary>
            <remarks>
            <para>The default value is false.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.GpibSession.RemoteInterfaceProtocol">
            <summary>
            The LAN protocol used for remote sessions. (Keysight Specific)
            </summary>
        </member>
        <member name="T:Keysight.Visa.SerialSession">
            <summary>
            An instantiable class that supports all SERIAL INSTR sessions. 
            </summary>
        </member>
        <member name="M:Keysight.Visa.SerialSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a SerialSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a SerialSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.SerialSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a SerialSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.SerialSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with serial interfaces.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
            <remarks>
            <para>This method flushes the RawIO buffers.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.SerialSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for serial communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s).</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
            <remarks>
            <para>Not all serial drivers support user-defined buffer sizes, so it is possible that a 
            this method may not be able to control this feature. If an application requires a specific 
            buffer size for performance reasons, but this method cannot control the size, Keysight 
            recommends that the calling program use some form of handshaking to prevent overflow 
            conditions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.BytesAvailable">
            <summary>
            The number of bytes available in the global receive buffer.
            </summary>
            <remarks>
            <para>The range is between Int32.MinValue and Int32.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int32.MaxValue + 1 and UInt32.MaxValue before they are 
            used.  The default is 0.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.BaudRate">
            <summary>
            The baud rate of the interface.
            </summary>
            <remarks>
            <para>The range is between Int32.MinValue and Int32.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int32.MaxValue + 1 and UInt32.MaxValue before they are 
            used.  The default is 9600.</para>
            <para>When setting this property, the calling program must specify a value that is supported 
            by the hardware being used.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.ClearToSendState">
            <summary>
            The current state of the Clear To Send (CTS) input signal.
            </summary>
        </member>
        <member name="P:Keysight.Visa.SerialSession.DataBits">
            <summary>
            The number of data bits contained in each frame (5, 6, 7, or 8).
            </summary>
            <remarks>
            <para>The range is between 5 and 8, inclusive.  The default is 8.</para>
            <para>The data bits for each frame are located in the low-order bits of every byte stored in 
            memory.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.DataCarrierDetectState">
            <summary>
            The current state of the Data Carrier Detect (DCD) input signal.
            </summary>
        </member>
        <member name="P:Keysight.Visa.SerialSession.DataSetReadyState">
            <summary>
            The current state of the Data Set Ready (DSR) input signal.
            </summary>
        </member>
        <member name="P:Keysight.Visa.SerialSession.DataTerminalReadyState">
            <summary>
            The state of the Data Terminal Ready (DTR) output signal.
            </summary>
        </member>
        <member name="P:Keysight.Visa.SerialSession.FlowControl">
            <summary>
            The flow control mechanism(s) used by this serial connection.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.SerialFlowControlModes.None"/>.</para>
            <para>If set to SerialFlowControlModes.None, the transfer mechanism does not use flow control, 
            and buffers on both sides of the connection are assumed to be large enough to hold all data 
            transferred.</para>
            <para>If set to <see cref="F:Ivi.Visa.SerialFlowControlModes.XOnXOff"/>, the transfer mechanism uses 
            the XON and XOFF characters to perform flow control. The transfer mechanism controls input 
            flow by sending XOFF when the receive buffer is nearly full, and it controls the output 
            flow by suspending transmission when XOFF is received.</para>
            <para>If set to <see cref="F:Ivi.Visa.SerialFlowControlModes.RtsCts"/>, the transfer mechanism uses 
            the RTS output signal and the CTS input signal to perform flow control. The transfer mechanism 
            controls input flow by unasserting the RTS signal when the receive buffer is nearly full, and 
            it controls output flow by suspending the transmission when the CTS signal is unasserted.</para>
            <para>If set to <see cref="F:Ivi.Visa.SerialFlowControlModes.DtrDsr"/>, the transfer mechanism uses the 
            DTR output signal and the DSR input signal to perform flow control. The transfer mechanism 
            controls input flow by unasserting the DTR signal when the receive buffer is nearly full, and 
            it controls output flow by suspending the transmission when the DSR signal is unasserted.</para>
            <para>This attribute can specify multiple flow control mechanisms by bit-ORing multiple 
            values together. However, certain combinations may not be supported by all serial ports 
            and/or operating systems. Note that Keysight Connection Expert cannot be used to specify 
            multiple flow control mechanisms; it must be done programmatically.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.Parity">
            <summary>
            The parity used with every frame transmitted and received.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.SerialParity.None"/>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.ReadTermination">
            <summary>
            The method used to terminate read operations.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.SerialTerminationMethod.TerminationCharacter"/>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.ReplacementCharacter">
            <summary>
            The character used to replace incoming characters that arrive with errors (such as
            parity errors).
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.  The default is 0.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.RequestToSendState">
            <summary>
            The current state of the Request To Send (RTS) output signal.
            </summary>
            <remarks>
            <para>If <see cref="P:Keysight.Visa.SerialSession.FlowControl"/> is equal to <see cref="F:Ivi.Visa.SerialFlowControlModes.RtsCts"/>, 
            this property is ignored when changed, but can be read to determine whether the background 
            flow control is asserting or unasserting the signal.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.RingIndicatorState">
            <summary>
            The current state of the Ring Indicator (RI) input signal.
            </summary>
            <remarks>
            <para>The RI signal is often used by modems to indicate that the telephone line is ringing.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.StopBits">
            <summary>
            The number of stop bits used to indicate the end of a frame.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.SerialStopBitsMode.One"/>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.WriteTermination">
            <summary>
            The method used to terminate write operations.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.SerialTerminationMethod.None"/>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.XOffCharacter">
            <summary>
            The value of the XOFF character used for XON/XOFF flow control (both directions).
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.  The default is 0x13 (ctrl+S).</para>
            <para>If <see cref="P:Keysight.Visa.SerialSession.FlowControl"/> is not equal to <see cref="F:Ivi.Visa.SerialFlowControlModes.XOnXOff"/>, 
            this property is ignored.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.SerialSession.XOnCharacter">
            <summary>
            The value of the XON character used for XON/XOFF flow control (both directions).
            </summary>
            <remarks>
            <para>The range is between 0 and Byte.MaxValue, inclusive.  The default is 0x11 (ctrl+Q).</para>
            <para>If <see cref="P:Keysight.Visa.SerialSession.FlowControl"/> is not equal to <see cref="F:Ivi.Visa.SerialFlowControlModes.XOnXOff"/>, 
            this property is ignored.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.SessionType">
            <summary>
            Indicates one of the session types implemented by Keysight VISA.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.GpibInterfaceSession">
            <summary>
            Indicates the GPIB Interface session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.GpibSession">
            <summary>
            Indicates the GPIB session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.PxiBackplaneSession">
            <summary>
            Indicates the PXI Backplane type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.PxiMemorySession">
            <summary>
            Indicates the PXI Memory Access (MEMACC) session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.PxiSession">
            <summary>
            Indicates the PXI session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.SerialSession">
            <summary>
            Indicates the Serial session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.TcpipSession">
            <summary>
            Indicates the TCPIP session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.TcpipSocketSession">
            <summary>
            Indicates the TCPIP Sockets session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.UsbSession">
            <summary>
            Indicates the USB session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.VxiBackplaneSession">
            <summary>
            Indicates the VXI Backplane session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.VxiMemorySession">
            <summary>
            Indicates the VXI Memory Access (MEMACC) session type.
            </summary>
        </member>
        <member name="F:Keysight.Visa.SessionType.VxiSession">
            <summary>
            Indicates the VXI session type.
            </summary>
        </member>
        <member name="T:Keysight.Visa.TcpipSession">
            <summary>
            An instantiable class that supports all TCPIP INSTR sessions. 
            </summary>
        </member>
        <member name="M:Keysight.Visa.TcpipSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for the TCPIP connection.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="M:Keysight.Visa.TcpipSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Controls the state of the REN line and, optionally, the remote/local state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the REN state.</param>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, in
            IPv4 dot-notation or IPv6 representation.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.DeviceName">
            <summary>
            The LAN device name used by the VXI-11 or HiSLIP protocol during connection.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.Port">
            <summary>
            The device-side port number being used for communication.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.IsHiSLIP">
            <summary>
            If true, this session is a HiSLIP session.
            </summary>
            <remarks>
            <para>If the session is not a HiSLIP session, the HiSLIP specific properties will throw an 
            exception (<see cref="P:Keysight.Visa.TcpipSession.HiSLIPOverlapEnabled"/>, <see cref="P:Keysight.Visa.TcpipSession.HiSLIPProtocolVersion"/>, 
            and <see cref="P:Keysight.Visa.TcpipSession.HiSLIPMaximumMessageKBytes"/>).</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.HiSLIPOverlapEnabled">
            <summary>
            Specifies whether the HiSLIP "overlap" mode is enabled.
            </summary>
            <remarks>
            <para>The default is the mode suggested by the connected device.</para>
            <para>If enabled, the connection uses overlap mode to allow overlapped responses. If disabled, 
            the connection uses synchronous mode to detect and recover from interrupted errors. If 
            changed, VISA.NET will do a Device Clear operation to change the mode.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.HiSLIPProtocolVersion">
            <summary>
            The negotiated HiSLIP protocol version.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.HiSLIPMaximumMessageKBytes">
            <summary>
            The HiSLIP maximum message size in kilobytes, where a kilobyte is 1024 bytes.
            </summary>
            <remarks>
            <para>The range is between Int32.MinValue and Int32.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int32.MaxValue + 1 and UInt32.MaxValue before they are 
            used.  The default is 1024, which results in a 1 MB maximum message size.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.TcpipSession.RemoteHardwareInterfaceType">
            <summary>
            The type (GPIB, ASRL, etc.) of the remote hardware interface associated with this session.
            </summary>
            <remarks>
            <para>This property is specific to Keysight VISA.NET.</para>
            <para>Remote VXI session only support message-based VXI devices.  VXI memory access methods 
            (for example, the <see cref="T:Keysight.Visa.MemoryMap"/> Peek and Poke methods) are not supported over LAN.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.TcpipSocketSession">
            <summary>
            An instantiable class that supports all TCPIP SOCKET sessions. 
            </summary>
        </member>
        <member name="M:Keysight.Visa.TcpipSocketSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSocketSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSocketSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSocketSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSocketSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a TcpipSocketSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.TcpipSocketSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with the TCPIP connection.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:Keysight.Visa.TcpipSocketSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for the TCPIP connection.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s).</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:Keysight.Visa.TcpipSocketSession.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, formatted in
            dot-notation.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSocketSession.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:Keysight.Visa.TcpipSocketSession.KeepAlive">
            <summary>
            If true, the TCP/IP provider enables the use of keep-alive packets on TCP connections.
            </summary>
            <remarks>
            <para>If a connection is dropped as a result of "keep-alives," any current or subsequent 
            I/O calls on the session will throw an exception.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.TcpipSocketSession.NoDelay">
            <summary>
            If true, the Nagle algorithm is disabled.
            </summary>
            <remarks>
            <para>The Nagle algorithm improves network performance by buffering "send" data until 
            a full-size packet can be sent. This attribute is enabled by default in VISA.NET to 
            verify that synchronous writes get flushed immediately.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.TcpipSocketSession.Port">
            <summary>
            The port number for a given TCP/IP address (required for a TCP/IP SOCKET resource).
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int61.MaxValue + 1 and UInt16.MaxValue before they are 
            used.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.UsbSession">
            <summary>
            An instantiable class that supports all USB INSTR sessions. 
            </summary>
        </member>
        <member name="M:Keysight.Visa.UsbSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a UsbSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a UsbSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.UsbSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a UsbSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.UsbSession.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Requests arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>The data received from the device.</returns>
            <remarks>
            <para>The usage of each parameter is based on the relevant USB base or 
            class specification, or on a vendor-specific request definition.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Sends arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
            <remarks>
            <para>The usage of each parameter is based on the relevant USB base or 
            class specification, or on a vendor-specific request definition.</para>
            <para>Since the USBTMC specification does not currently define any standard control port 
            requests in the direction of host-to-device, this function is intended for use with only 
            vendor-defined requests. However, this method does not check the requestType parameter for 
            this.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.UsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Sends arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:Keysight.Visa.UsbSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Controls the state of the USB REN interface line and, optionally, the remote/local
            state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the USB REN line.</param>
        </member>
        <member name="E:Keysight.Visa.UsbSession.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.Is4882Compliant">
            <summary>
            If true, the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:Keysight.Visa.UsbSession.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt
            IN pipe.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.The default value is the same as the maximum packet size of the interrupt IN pipe.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.ManufacturerId">
            <summary>
            The USB vendor identification number of the hardware vendor for this device.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.ModelCode">
            <summary>
            The vendor-specific model number for this USB device.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.  The default is 0</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.UsbInterfaceNumber">
            <summary>
            The USB interface number of the interface to which the USB device is connected.
            </summary>
            <remarks>
            <para>The range is between 0 and 254, inclusive.  The default is 0.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.UsbProtocol">
            <summary>
            The USB protocol number.
            </summary>
            <remarks>
            <para>The range is between 0 and 255, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.UsbSession.UsbSerialNumber">
            <summary>
            The serial number of the USB device.
            </summary>
            <remarks>
            <para>The value of this attribute should be used for display purposes only and not for programmatic 
            decisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.AsynchronousIOResult.Buffer">
            <summary>
            The data buffer that contains the data to be written (for asynchronous writes) or the
            data read so far (for asynchronous reads).
            </summary>
        </member>
        <member name="P:Keysight.Visa.AsynchronousIOResult.Count">
            <summary>
            The value of the count argument for the method call that created this VISA asynchronous
            results object.  If the method did not include a count, then 0.
            </summary>
        </member>
        <member name="P:Keysight.Visa.AsynchronousIOResult.Index">
            <summary>
            The value of the index argument for the method call that created this VISA asynchronous
            results object.  If the method did not include an index, then 0.
            </summary>
        </member>
        <member name="P:Keysight.Visa.AsynchronousIOResult.IsAborted">
            <summary>
            If true, the asynchronous I/O operation was aborted by a call to AbortRead() or
            AbortWrite().
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper">
            <summary>
            The Native wrapper class is designed to encapsulate all VISA C methods, types, and 
            error handling.
            </summary>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.AccessModes)">
            <summary>
            Convert a value of type Ivi.Visa.AccessModes to the NativeEnums.AccessModes value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="accessModes">The value of type Ivi.Visa.AccessModes to be converted.</param>
            <returns>The NativeEnums.AccessModes value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.AddressSpace)">
            <summary>
            Convert a value of type Ivi.Visa.AddressSpace to the NativeWrapper.AddressSpace value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="addressSpace">The value of type Ivi.Visa.AddressSpace to be converted.</param>
            <returns>The NativeWrapper.AddressSpace value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.AddressSpace)">
            <summary>
            Convert a value of type NativeWrapper.AddressSpace returned from pInvoke calls to VISA C 
            to the corresponding NativeWrapper.AddressSpace value.
            </summary>
            <param name="addressSpace">The value of type NativeWrapper.AddressSpace to be converted.</param>
            <returns>The corresponding Ivi.Visa.AddressSpace value.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.AtnMode)">
            <summary>
            Convert a value of type Ivi.Visa.AtnMode to the NativeWrapper.AtnMode value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="atnMode">The value of type Ivi.Visa.AtnMode to be converted.</param>
            <returns>The NativeWrapper.AtnMode value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.IOBuffers)">
            <summary>
            Convert a value of type Ivi.Visa.IOBuffers to the NativeWrapper.BufferType value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="buffers">The value of type Ivi.Visa.IOBuffers to be converted.</param>
            <returns>The NativeWrapper.BufferType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Convert a value of type Ivi.Visa.IOBuffers to the NativeWrapper.BufferType value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="buffers">The value of type Ivi.Visa.IOBuffers to be converted.</param>
            <param name="discard">Indicates whether the contents of the buffer are to be discarded.</param>
            <returns>The NativeWrapper.BufferType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.ByteOrder)">
            <summary>
            Convert a value of type Ivi.Visa.ByteOrder to the NativeWrapper.ByteOrder value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="byteOrder">The value of type Ivi.Visa.ByteOrder to be converted.</param>
            <returns>The NativeWrapper.ByteOrder value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.ByteOrder)">
            <summary>
            Convert a value of type Ivi.Visa.ByteOrder to the NativeWrapper.ByteOrder value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="byteOrder">The value of type Ivi.Visa.ByteOrder to be converted.</param>
            <returns>The NativeWrapper.ByteOrder value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.DataWidth)">
            <summary>
            Convert a value of type Ivi.Visa.DataWidth to the NativeWrapper.DataWidth value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="width">The value of type Ivi.Visa.DataWidth to be converted.</param>
            <returns>The NativeWrapper.DataWidth value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.EventType,System.Boolean)">
            <summary>
            Convert a value of type Ivi.Visa.EventType to the NativeWrapper.EventType 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="eventType">The value of type Ivi.Visa.EventType to be converted.</param>
            <param name="allowAllEnabled">Indicates whether AllEnabled is a valid value.</param>
            <returns>The NativeWrapper.EventType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.EventType,System.Boolean)">
            <summary>
            Convert a value of type NativeWrapper.EventType used in VISA C callbacks to the 
            Ivi.Visa.EventType value used in the VISA.NET API.
            </summary>
            <param name="eventType">The value of type NativeWrapper.EventType to be converted.</param>
            <param name="allowAllEnabled">Indicates whether AllEnabled is a valid value.</param>
            <returns>The Ivi.Visa.EventType value used by VISA.NET.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.GpibAddressedState)">
            <summary>
            Convert a value of type Ivi.Visa.GpibAddressedState to the NativeWrapper.GpibAddressedState 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="type">The value of type Ivi.Visa.GpibAddressedState to be converted.</param>
            <returns>The NativeWrapper.GpibAddressedState value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.HardwareInterfaceType)">
            <summary>
            Convert a value of type Ivi.Visa.HardwareInterfaceType to the NativeWrapper.HardwareInterfaceType 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="type">The value of type Ivi.Visa.HardwareInterfaceType to be converted.</param>
            <returns>The NativeWrapper.HardwareInterfaceType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.IOProtocol)">
            <summary>
            Convert a value of type Ivi.Visa.IOProtocol to the NativeWrapper.IOProtocol 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="ioProtocol">The value of type Ivi.Visa.IOProtocol to be converted.</param>
            <returns>The NativeWrapper.IOProtocol value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.IOProtocol)">
            <summary>
            Convert a value of type Ivi.Visa.IOProtocol to the NativeWrapper.IOProtocol 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="ioProtocol">The value of type Ivi.Visa.IOProtocol to be converted.</param>
            <returns>The NativeWrapper.IOProtocol value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.LineState)">
            <summary>
            Convert a value of type NativeWrapper.LineState to the Ivi.Visa.LineState value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="lineState">The value of type NativeWrapper.LineState returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.LineState value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.LineState)">
            <summary>
            Convert a value of type Ivi.Visa.LineState to the NativeWrapper.LineState Int32 value used by 
            the pInvoke calls to VISA C.
            </summary>
            <param name="lineState">The value of type Ivi.Visa.LineState to be converted.</param>
            <returns>The Int16 native LineState value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.PxiMemoryType)">
            <summary>
            Convert a value of type Ivi.Visa.PxiMemoryType to the NativeWrapper.PxiMemoryType 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="type">The value of type Ivi.Visa.PxiMemoryType to be converted.</param>
            <returns>The NativeWrapper.PxiMemoryType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.RemoteHardwareInterfaceType)">
            <summary>
            Convert a value of type Ivi.Visa.HardwareInterfaceType to the NativeWrapper.HardwareInterfaceType 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="type">The value of type Ivi.Visa.HardwareInterfaceType to be converted.</param>
            <returns>The NativeWrapper.HardwareInterfaceType value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Convert a value of type Ivi.Visa.RemoteLocalMode to the NativeWrapper.RemoteLocalMode value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="remoteLocalMode">The value of type Ivi.Visa.RemoteLocalMode to be converted.</param>
            <returns>The NativeWrapper.RemoteLocalMode value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.GpibInstrumentRemoteLocalMode)">
            <summary>
            Convert a value of type Ivi.Visa.GpibInstrRemoteLocalMode to the NativeWrapper.RemoteLocalMode value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="remoteLocalMode">The value of type Ivi.Visa.GpibInstrRemoteLocalMode to be converted.</param>
            <returns>The NativeWrapper.RemoteLocalMode value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.GpibInterfaceRemoteLocalMode)">
            <summary>
            Convert a value of type Ivi.Visa.GpibInterfaceRemoteLocalMode to the NativeWrapper.RemoteLocalMode value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="remoteLocalMode">The value of type Ivi.Visa.GpibInterfaceRemoteLocalMode to be converted.</param>
            <returns>The NativeWrapper.RemoteLocalMode value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.RemoteTcpipProtocol)">
            <summary>
            Convert a value of type Keysight.Visa.RemoteTcpipProtocol to the NativeWrapper.RemoteTcpipProtocol 
            value used by the pInvoke calls to VISA C.
            </summary>
            <param name="remoteProtocol">The value of type Keysight.Visa.RemoteTcpipProtocol to be converted.</param>
            <returns>The NativeWrapper.RemoteTcpipProtocol value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.ResourceLockState)">
            <summary>
            Convert a value of type Ivi.Visa.ResourceLockState to the NativeWrapper.ResourceLockState value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="lockState">The value of type Ivi.Visa.ResourceLockState to be converted.</param>
            <returns>The NativeWrapper.ResourceLockState value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.ResourceLockState)">
            <summary>
            Convert a value of type Ivi.Visa.ResourceLockState to the NativeWrapper.ResourceLockState value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="lockState">The value of type Ivi.Visa.ResourceLockState to be converted.</param>
            <returns>The NativeWrapper.ResourceLockState value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.SerialFlowControlModes)">
            <summary>
            Convert a value of type NativeWrapper.SerialFlowControlModes to the Ivi.Visa.SerialFlowControlModes value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="flowControlModes">The value of type NativeWrapper.SerialFlowControlModes returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.SerialFlowControlModes value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.SerialFlowControlModes)">
            <summary>
            Convert a value of type Ivi.Visa.SerialFlowControlModes to the NativeWrapper.SerialFlowControlModes Int32 value used by 
            the pInvoke calls to VISA C.
            </summary>
            <param name="flowControlModes">The value of type Ivi.Visa.SerialFlowControlModes to be converted.</param>
            <returns>The Int16 native SerialFlowControlModes value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.SerialParity)">
            <summary>
            Convert a value of type NativeWrapper.SerialParity to the Ivi.Visa.SerialParity value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="parity">The value of type NativeWrapper.SerialParity returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.SerialParity value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.SerialParity)">
            <summary>
            Convert a value of type Ivi.Visa.SerialParity to the NativeWrapper.SerialParity Int32 value used by 
            the pInvoke calls to VISA C.
            </summary>
            <param name="parity">The value of type Ivi.Visa.SerialParity to be converted.</param>
            <returns>The Int16 native SerialParity value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.SerialStopBitsMode)">
            <summary>
            Convert a value of type NativeWrapper.SerialStopBitsMode to the Ivi.Visa.SerialStopBitsMode value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="mode">The value of type NativeWrapper.SerialStopBitsMode returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.SerialStopBitsMode value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.SerialStopBitsMode)">
            <summary>
            Convert a value of type Ivi.Visa.SerialStopBitsMode to the NativeWrapper.SerialStopBitsMode Int32 value used by 
            the pInvoke calls to VISA C.
            </summary>
            <param name="mode">The value of type Ivi.Visa.SerialStopBitsMode to be converted.</param>
            <returns>The Int16 native SerialStopBitsMode value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.SerialTerminationMethod)">
            <summary>
            Convert a value of type NativeWrapper.SerialTerminationMethod to the Ivi.Visa.SerialTerminationMethod value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="terminationMethod">The value of type NativeWrapper.SerialTerminationMethod returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.SerialTerminationMethod value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.SerialTerminationMethod)">
            <summary>
            Convert a value of type Ivi.Visa.SerialTerminationMethod to the NativeWrapper.SerialTerminationMethod Int32 value used by 
            the pInvoke calls to VISA C.
            </summary>
            <param name="terminationMethod">The value of type Ivi.Visa.SerialTerminationMethod to be converted.</param>
            <returns>The Int16 native SerialTerminationMethod value used by the pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.TriggerLine)">
            <summary>
            Convert a value of type Ivi.Visa.TriggerLine to the NativeWrapper.TriggerLine value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="triggerLine">The value of type Ivi.Visa.TriggerLine to be converted.</param>
            <returns>The NativeWrapper.TriggerLine value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.TriggerLine)">
            <summary>
            Convert a value of type NativeWrapper.TriggerLine returned from a pInvoke calls to VISA C 
            to the corresponding Ivi.Visa.TriggerLine value.
            </summary>
            <param name="triggerLine">The value of type NativeWrapper.TriggerLine to be converted.</param>
            <returns>The corresponding Ivi.Visa.TriggerLine value.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.TriggerLines)">
            <summary>
            Convert a value of type NativeWrapper.TriggerLines to the Ivi.Visa.TriggerLines value to be returned 
            from the NativeWrapper method.
            </summary>
            <param name="nativeTriggerLines">The value of type NativeWrapper.TriggerLines returned from the pInvoke 
            calls to VISA C.</param>
            <returns>The Ivi.Visa.TriggerLines value returned from the NativeWrapper method.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Convert a value of type Ivi.Visa.VxiTriggerProtocol to the NativeWrapper.TriggerProtocol value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="protocol">The value of type Ivi.Visa.VxiTriggerProtocol to be converted.</param>
            <returns>The NativeWrapper.TriggerProtocol value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaStringAttribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeString or SetAttributeString.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeString or SetAttributeString, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaBooleanAttribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeBoolean or SetAttributeBoolean.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeBoolean or SetAttributeBoolean, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaByteAttribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeByte or SetAttributeByte.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeByte or SetAttributeByte, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaInt16Attribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeInt16 or SetAttributeInt16.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeInt16 or SetAttributeInt16, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaInt32Attribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeInt32 or SetAttributeInt32.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeInt32 or SetAttributeInt32, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaInt64Attribute(System.Int32)">
            <summary>
            Checks to see if the specified value can be used by GetAttributeInt64 or SetAttributeInt64.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>True if the value can be used with GetAttributeInt64 or SetAttributeInt64, 
            otherwise false.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertVisaAttribute(System.Int32)">
            <summary>
            Checks to make sure that the visaAttribute parameter represents a valid Keysight VISA attribute.
            If it does, it returns the value as an unsigned, 32-bit integer.  If it does not, it throws an 
            ArgumentOutOfRangeException exception.
            </summary>
            <param name="visaAttribute">The integer to be checked.</param>
            <returns>An unsigned, 32-bit integer, converted from the visaAttribute parameter.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.VxiAccessPrivilege)">
            <summary>
            Convert a value of type Ivi.Visa.VxiAccessPrivilege to the NativeWrapper.VxiAccessPrivilege value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="accessPrivilege">The value of type Ivi.Visa.VxiAccessPrivilege to be converted.</param>
            <returns>The NativeWrapper.VxiAccessPrivilege value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.VxiAccessPrivilege)">
            <summary>
            Convert a value of type Ivi.Visa.VxiAccessPrivilege to the NativeWrapper.VxiAccessPrivilege value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="accessPrivilege">The value of type Ivi.Visa.VxiAccessPrivilege to be converted.</param>
            <returns>The NativeWrapper.VxiAccessPrivilege value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.VxiCommandMode)">
            <summary>
            Convert a value of type Ivi.Visa.VxiCommandMode to the NativeWrapper.VxiCommandMode value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="mode">The value of type Ivi.Visa.VxiCommandMode to be converted.</param>
            <returns>The NativeWrapper.VxiCommandMode value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertFromNative(Keysight.Visa.NativeWrapper.VxiDeviceClass)">
            <summary>
            Convert a value of type NativeWrapper.VxiDeviceClass returned from the pInvoke calls to VISA C 
            to the corresponding Ivi.Visa.VxiDeviceClass value.
            </summary>
            <param name="deviceClass">The value of type NativeWrapper.VxiDeviceClass to be converted.</param>
            <returns>The corresponding Ivi.Visa.VxiDeviceClass value.</returns>
        </member>
        <member name="M:Keysight.Visa.NativeWrapper.ConvertToNative(Ivi.Visa.VxiUtilitySignal)">
            <summary>
            Convert a value of type Ivi.Visa.VxiUtilitySignal to the NativeWrapper.VxiUtilitySignal value used 
            by the pInvoke calls to VISA C.
            </summary>
            <param name="signal">The value of type Ivi.Visa.VxiUtilitySignal to be converted.</param>
            <returns>The NativeWrapper.VxiUtilitySignal value used by pInvoke calls to VISA C.</returns>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.SuccessCodes">
            <summary>
            Defines some success status codes that may be returned by VISA C.  Only the success codes that 
            are used in the VISA.NET code are included here.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.WarningCodes">
            <summary>
            Defines some warning status codes that may be returned by VISA C.  Only the warning codes that 
            are used in the VISA.NET code are included here.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.ErrorCodes">
            <summary>
            Defines some error status codes that may be returned by VISA C.  Only the error codes that 
            are used in the VISA.NET code are included here.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.PxiTriggerProtocol">
            <summary>
            Defines some success status codes that may be returned by VISA C.  Only the success codes that 
            are used in the VISA.NET code are included here.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.AccessModes">
            <summary>
            Defines "pInvoke" access modes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.AddressSpace">
            <summary>
            Defines "pInvoke" address spaces used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.AtnMode">
            <summary>
            Defines "pInvoke" ATN modes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.BufferType">
            <summary>
            Defines "pInvoke" buffer types used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.ByteOrder">
            <summary>
            Defines "pInvoke" VXI byte orders used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.DataWidth">
            <summary>
            Defines "pInvoke" DataWidths used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.EventMechanism">
            <summary>
            Defines "pInvoke" event mechanisms used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.EventType">
            <summary>
            Defines "pInvoke" event types used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.HardwareInterfaceType">
            <summary>
            Defines "pInvoke" hardware interface types used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.RemoteHardwareInterfaceType">
            <summary>
            Defines "pInvoke" hardware interface types used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.RemoteLocalMode">
            <summary>
            Defines "pInvoke" remote/local modes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.ResourceLockState">
            <summary>
            Defines "pInvoke" lock states used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.TriggerLine">
            <summary>
            Defines "pInvoke" trigger lines used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.TriggerLines">
            <summary>
            Defines "pInvoke" trigger lines used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VxiTriggerProtocol">
            <summary>
            Defines "pInvoke" trigger protocols used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttribute">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeString">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeBoolean">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeReadWriteBoolean">
            <summary>
            Defines writable "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeByte">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeInt16">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeInt32">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VisaAttributeInt64">
            <summary>
            Defines "pInvoke" Keysight VISA attributes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VxiAccessPrivilege">
            <summary>
            Defines "pInvoke" VXI access privileges used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VxiCommandMode">
            <summary>
            Defines "pInvoke" VXI command modes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VxiDeviceClass">
            <summary>
            Defines "pInvoke" VXI device classes used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.VxiUtilitySignal">
            <summary>
            Defines "pInvoke" VXI utility signals used by pInvoke calls to VISA C.
            </summary>
        </member>
        <member name="T:Keysight.Visa.NativeWrapper.NativeMethods">
            <summary>
            Method declarations for the native VISA C functions.
            </summary>
        </member>
        <member name="T:Keysight.Visa.ResourceManager">
            <summary>
            Provides services related to general management of recognized I/O 
            resources, including finding resources, parsing resource strings, opening I/O connections to 
            resources, and providing general information about the Keysight VISA.NET implementation.
            </summary>
            <remarks>Typically, there is only one active instance of the ResourceManager class. In a few cases, you may need two instances: one
            with <see cref="P:Keysight.Visa.ResourceManager.FindExportedResourcesOnly">FindExportedResourcesOnly</see> true, and one
            with <see cref="P:Keysight.Visa.ResourceManager.FindExportedResourcesOnly">FindExportedResourcesOnly</see> false.
            <para>For more information, see <see cref="!:ResourceManagers">Resource Managers and the GRM</see>.</para></remarks>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.#ctor">
            <summary>
            Create an instance of the ResourceManager class.
            </summary>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.#ctor(System.Boolean)">
            <summary>
            Create an instance of the ResourceManager class.
            </summary>
            <param name="onlyFindExportedResources">If true, only those resources with property ExportEnabled 
            = true will be returned from viFindRsrc() and viParseRsrc().  The default value is false, which 
            means that all resources will be returned regardless of the value of their ExportEnabled property. 
            (Keysight Specific)</param>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Finalize">
            <summary>
            The default destructor for the ResourceManager class performs tasks associated with freeing, 
            releasing, or resetting unmanaged VISA resources used by this instance of the resource manager.
            </summary>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Dispose">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this implementation of Keysight VISA.NET.
            </summary>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Dispose(System.Boolean)">
            <summary>
            Performs tasks associated with freeing, releasing, or resetting unmanaged VISA resources 
            used by this implementation of Keysight VISA.NET, but only if another thread has not already 
            started to dispose of this object.
            </summary>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.CheckDisposed">
            <summary>
            Throws an exception if the object is already disposed.
            </summary>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Find(System.String)">
            <summary>
            Finds all of the VISA.NET resources that match the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>The list of resources matching the search <paramref name="pattern"/>.</returns>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of Find.  Refer to the <i>IO Libraries Suite Help</i> for more details.</para>
            <para> The <see cref="P:Keysight.Visa.ResourceManager.ReturnAll"/> property determines whether Find will return all discovered instruments 
            or just those that are marked as favorites.  ReturnAll defaults to false, so that only favorites 
            are returned.
            </para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Open(System.String)">
            <summary>
            Creates a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>A reference to VISA.NET session for the specified resource.</returns>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of Open.  Refer to the <i>IO Libraries Suite Help</i>
             for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, Open verifies 
            that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time 
            taken to acquire the requested lock, and may also include the time needed to open a 
            session to the resource.  If the timeout is VisaConstants.ImmediateTimeout (0), the method 
            will not wait at all.  If the timeout is VisaConstants.InfiniteTimeout (-1), the method 
            will never timeout.  Negative values other than -1 are treated as unsigned values in 
            the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <returns>A reference to VISA.NET session for the specified resource.</returns>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of Open.  Refer to the <i>IO Libraries Suite Help</i> 
             for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, Open verifies 
            that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name or an alias for a VISA resource defined in 
            the Keysight Connection Expert utility.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time 
            taken to acquire the requested lock, and may also include the time needed to open a 
            session to the resource.  If the timeout is VisaConstants.ImmediateTimeout (0), the method 
            will not wait at all.  If the timeout is VisaConstants.InfiniteTimeout (-1), the method 
            will never timeout.  Negative values other than -1 are treated as unsigned values in 
            the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <param name="openStatus">The status of the open operation.</param>
            <returns>A reference to VISA.NET session for the specified resource.</returns>
            <remarks>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of Open.  Refer to the <i>IO Libraries Suite Help</i> 
             for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, Open verifies 
            that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.ResourceManager.Parse(System.String)">
            <summary>
            Parses a resource string to get extended interface information.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <remarks>
            <para>This method should succeed for all strings returned by <see cref="M:Keysight.Visa.ResourceManager.Find(System.String)"/> and recognized 
            by <see cref="M:Keysight.Visa.ResourceManager.Open(System.String)">Open</see>.</para>
            <para>The value returned in <see cref="P:Ivi.Visa.ParseResult.ExpandedUnaliasedName"/> is, in most cases, 
            identical to the canonical resource name. However, there may be cases where the canonical name 
            includes information that the driver may not know until the resource has actually been opened. 
            In these cases, the value returned will be semantically similar.</para>
            <para>The value returned in <see cref="P:Ivi.Visa.ParseResult.AliasIfExists"/> allows programmatic access 
            to user-defined aliases.  Keysight VISA.NET recognizes aliases defined in the Keysight Connection 
            Expert utility, which allows multiple aliases per resource.  Parse returns the first alias it 
            finds in the parse results.  The ordering is not deterministic, so you should write your 
            code to expect aliasIfExists to return any one of the defined aliases if multiple aliases 
            exist.</para>
            <seealso cref="M:Keysight.Visa.ResourceManager.Open(System.String)"/>
            <seealso cref="M:Keysight.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.ResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.Handle">
            <summary>
            The session pointer to the underlying Keysight VISA implementation's resource manager session 
            for this instance of the ResourceManager class.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.IsDisposed">
            <summary>
            True if the object Dispose code has completed.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.IsDisposedSyncRoot">
            <summary>
            Dispose creates a lock on this object while disposing, to prevent concurrent 
            execution of the Dispose code in multiple threads.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.ImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
            <remarks>
            This is not necessarily the version of the underlying VISA C implementation.
            </remarks>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.ManufacturerId">
            <summary>
            The Keysight VISA.NET manufacturer ID - '4095'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.ManufacturerName">
            <summary>
            The VISA.NET vendor name - 'Keysight Technologies, Inc.'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.SpecificationVersion">
            <summary>
            The version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.IOLibrariesPath">
            <summary>
            The full pathname of the Keysight IO Libraries directory used by this implementation of Keysight 
            VISA.NET.  The pathname returned varies, depending on whether the process is a 32-bit or 
            64-bit process. (Keysight Specific)
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.IOLibrariesRegistryKey">
            <summary>
            The full pathname of the Keysight IO Libraries registry key used by this implementation of 
            Keysight VISA.NET.  The pathname returned varies, depending on whether the process is a 32-bit 
            or 64-bit process. (Keysight Specific)
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.FindExportedResourcesOnly">
            <summary>
            Determines whether only those sessions with property <see cref="P:Keysight.Visa.VisaSession.ExportEnabled"/> 
            = true will be returned from the <see cref="M:Keysight.Visa.ResourceManager.Find(System.String)"/> and <see cref="M:Keysight.Visa.ResourceManager.Parse(System.String)"/> methods.  
            (Keysight Specific)
            </summary>
            <remarks>
            <para>The default value is false, which means that all sessions will be returned 
            regardless of the value of the <see cref="P:Keysight.Visa.VisaSession.ExportEnabled"/> property.</para>
            <para>This property applies only to this RM session, in conjunction with the 
            <see cref="P:Keysight.Visa.VisaSession.ExportEnabled"/> property of any child VISA sessions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.VisaFrameworkPath">
            <summary>
            The full pathname of the VISA Framework directory used by this implementation of Keysight 
            VISA.NET.  The pathname returned varies, depending on whether the process is a 32-bit or 
            64-bit process.  (Keysight Specific)
            </summary>
        </member>
        <member name="P:Keysight.Visa.ResourceManager.ReturnAll">
            <summary>
            Determines whether <see cref="M:Keysight.Visa.ResourceManager.Find(System.String)"/> will return all discovered instruments or
            just those that are marked as favorites.  The default value is false, meaning <see cref="M:Keysight.Visa.ResourceManager.Find(System.String)"/> will return only favorite instruments.  
            Use Connection Expert to mark favorite instruments; by default, all locally-connected (non-LAN) instruments and all manually-added instruments
            are favorites.
            (Keysight Specific)
            </summary>
        </member>
        <member name="T:Keysight.Visa.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.AllowedGpibInterfaceNativeEventTypes">
            <summary>
              Looks up a localized string similar to Allowed event types for this event handler are VI_EVENT_CLEAR, VI_EVENT_GPIB_CIC, VI_EVENT_GPIB_LISTEN, VI_EVENT_GPIB_TALK, and VI_EVENT_TRIG.  The actual type is {0}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.AllowedVxiBackplaneNativeEventTypes">
            <summary>
              Looks up a localized string similar to Allowed event types for this event handler are VI_EVENT_VXI_VME_SYSFAIL, VI_EVENT_VXI_VME_SYSRESET, and VI_EVENT_TRIG.  The actual type is {0}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.AllowedVxiNativeEventTypes">
            <summary>
              Looks up a localized string similar to Allowed event types for this event handler are VI_EVENT_VXI_VME_INTR, VI_EVENT_VXI_SIGP, and VI_EVENT_TRIG.  The actual type is {0}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.ArrayCountExceeds32BitLimitation">
            <summary>
              Looks up a localized string similar to Count ({0}) is out of range for the native implementation of visa..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.ArrayCountOutOfRange">
            <summary>
              Looks up a localized string similar to Count ({0}) is out of range for buffer of length {1} when starting at offset {2}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.ArrayIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index ({0}) is out of range for buffer of length {1}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.Attr64ValueTooLarge">
            <summary>
              Looks up a localized string similar to When running in a 32-bit process, the absolute value of an Int64 attribute may not exceed UInt32.MaxValue.  Value = {0}.
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.BufferCountOutOfRange">
            <summary>
              Looks up a localized string similar to Count ({0}) is out of range for buffer..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.BufferIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Index ({0}) is out of range for buffer..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.CannotInstantiateVisaNetProvider">
            <summary>
              Looks up a localized string similar to Unable to instantiate VISA.NET provider class {0}.{1}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.EndStringNotSupportedForPointerBasedReads">
            <summary>
              Looks up a localized string similar to The EndString method cannot be used to complete pointer-based read operations..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.EventHandlerNotRegistered">
            <summary>
              Looks up a localized string similar to &quot;An event handler is not registered for this session and event type {0}.&quot;.
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.GpibIntfcServiceRequestEventNotSupported">
            <summary>
              Looks up a localized string similar to Keysight VISA.NET does not support GPIB Interface ServiceRequest events..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.HiSLIPMaximumMessageKBytesNotSupported">
            <summary>
              Looks up a localized string similar to The HiSLIPMaximumMessageKBytesNotSupported property is not yet supported..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.HiSLIPOverlapEnabledNoSupported">
            <summary>
              Looks up a localized string similar to The HiSLIPOverlapEnabledNoSupported property is not yet supported..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.HiSLIPProtocolVersionNotSupported">
            <summary>
              Looks up a localized string similar to The HiSLIPProtocolVersionNotSupported property is not yet supported..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.InvalidAsyncResult">
            <summary>
              Looks up a localized string similar to The IVisaAsyncResult object is invalid..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.InvalidJobID">
            <summary>
              Looks up a localized string similar to Invalid JobID = {0}..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.IResourceManagerNotImplemented">
            <summary>
              Looks up a localized string similar to VISA.NET provider class {0}.{1} does not implement IResourceManager..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.NoNativeEnumMappingForType">
             <summary>
               Looks up a localized string similar to Internal error.
            No native enum mappings found for enum type &apos;{0}&apos;..
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.NoNativeEnumMappingForValue">
             <summary>
               Looks up a localized string similar to Internal error.
            No native enum mapping found for value &apos;{0}&apos; on enum type &apos;{1}&apos;..
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.SessionForEventIsDisposed">
            <summary>
              Looks up a localized string similar to An event was raised by VISA C, but the originating VISA.NET session has been disposed..
            </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.UnknownVisaInterfaceType">
             <summary>
               Looks up a localized string similar to Unrecognized or unsupported VISA hardware interface type.
            {0}.
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.UnrecognizedGpibInterfaceRemoteLocalMode">
             <summary>
               Looks up a localized string similar to Internal error.
            The GpibInterfaceRemoteLocalMode &apos;{0}&apos; is not recognized or not supported..
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.UnrecognizedRemoteLocalMode">
             <summary>
               Looks up a localized string similar to Internal error.
            The RemoteLocalMode &apos;{0}&apos; is not recognized or not supported..
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.VisaErrorWithDescriptionOnly">
             <summary>
               Looks up a localized string similar to VISA status code = 0x{0:X} hex, {0} decimal
            {1}.
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.VisaErrorWithInfo">
             <summary>
               Looks up a localized string similar to VISA status code = {0} (0x{1:X} hex, {1} decimal)
            {2}.
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.VisaErrorWithMacroNameOnly">
             <summary>
               Looks up a localized string similar to VISA status code = {0} (0x{1:X} hex, {1} decimal)
            (could not retrieve description from VISA session).
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.VisaErrorWithoutInfo">
             <summary>
               Looks up a localized string similar to VISA status code = 0x{0:X} hex, {0} decimal
            (could not retrieve description from VISA session).
             </summary>
        </member>
        <member name="P:Keysight.Visa.Resources.WrongAsyncResult">
             <summary>
               Looks up a localized string similar to Unexpected asynchronous result object.
            Expected type: VisaWrapperAsyncResult
            Actual type: {0}.
             </summary>
        </member>
        <member name="T:Keysight.Visa.VisaConvert">
            <summary>
            Provides static conversion methods for converting Unicode strings 
            (used by VISA.NET) to and from ASCII (used by most message-based instruments).
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaConvert.ToString(System.Byte[])">
            <summary>
            Converts an ASCII string in a byte buffer to a Unicode string.
            </summary>
            <param name="buffer">The ASCII string to be converted.</param>
            <returns>The converted Unicode string.</returns>
        </member>
        <member name="M:Keysight.Visa.VisaConvert.ToBytes(System.String)">
            <summary>
            Converts a Unicode string to a ASCII string in a byte buffer.
            </summary>
            <param name="buffer">The Unicode string to be converted.</param>
            <returns>The converted ASCII string.</returns>
        </member>
        <member name="T:Keysight.Visa.VisaEventDispatcher">
            <summary>
            The VisaEventDispatcher class is designed to wrap VISA-C event Listener,
            so as to provide .NET style event usage.
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaEventDispatcher._session">
            <summary>
            The session that hooks up event handlers
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaEventDispatcher._sessionHandle">
            <summary>
            The underlying handle of that session
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaEventDispatcher._eventAdapter">
            <summary>
            The delegate that will be invoked when event happens
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaEventDispatcher._eventListeners">
            <summary>
            The container of event listeners
            </summary>
        </member>
        <member name="F:Keysight.Visa.VisaEventDispatcher._lockObject">
            <summary>
            Used for lock
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.#ctor(Ivi.Visa.IVisaSession,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="session">The session to listen events.</param>
            <param name="sessionHandle">The vi handle of the session.</param>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.System#IDisposable#Dispose">
            <summary>
            Frees resources
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.AddEventListener(Ivi.Visa.EventType,Keysight.Visa.IVisaEventListener)">
            <summary>
            Adds an event listener
            </summary>
            <param name="eventType">Event type to listen</param>
            <param name="listener">Listener to be added</param>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.RemoveEventListener(Ivi.Visa.EventType,Keysight.Visa.IVisaEventListener)">
            <summary>
            Removes an event listener
            </summary>
            <param name="eventType">Event type to listen</param>
            <param name="listener">Listener to be removed</param>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.Close">
            <summary>
            Closes all event listeners
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.InstallHandler(Ivi.Visa.EventType)">
            <summary>
            Installs event handler, so that the given event type will call back from VISA-C
            </summary>
            <param name="eventType">The event type to listen</param>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.UninstallHandler(Ivi.Visa.EventType)">
            <summary>
            Uninstalls event handler, so that the give event type will no longer call back from VISA-C
            </summary>
            <param name="eventType">The event type not to listen</param>
        </member>
        <member name="M:Keysight.Visa.VisaEventDispatcher.DispatchEvent(Ivi.Visa.EventType,System.UInt32)">
            <summary>
            Dispatches event to listeners. It is the delegate call back from VISA-C when event occurs.
            </summary>
            <param name="eventType">The type of the event</param>
            <param name="context">The event context</param>
        </member>
        <member name="T:Keysight.Visa.IVisaEventListener">
            <summary>
            Defines a listener of VISA C events.
            </summary>
        </member>
        <member name="M:Keysight.Visa.IVisaEventListener.OnEvent(Ivi.Visa.IVisaSession,Ivi.Visa.EventType,System.UInt32)">
            <summary>
            Call back when an event occurs
            </summary>
            <param name="session">The session that associates with the event</param>
            <param name="eventType">The type of the event</param>
            <param name="context">The event context</param>
        </member>
        <member name="M:Keysight.Visa.IVisaEventListener.IsEquivalent(Keysight.Visa.IVisaEventListener)">
            <summary>
            Checks whether two listeners are the same.
            </summary>
            <param name="listener">The listener to compare against.</param>
            <returns>True if the same, otherwise false.</returns>
        </member>
        <member name="T:Keysight.Visa.AbstractVisaEventListener`1">
            <summary>
            The class provides basic implementation of IVisaEventListener.
            </summary>
            <typeparam name="T">VisaEventArgs</typeparam>
        </member>
        <member name="F:Keysight.Visa.AbstractVisaEventListener`1._handler">
            <summary>
            The event handler passed by application.
            </summary>
        </member>
        <member name="M:Keysight.Visa.AbstractVisaEventListener`1.#ctor(System.EventHandler{`0})">
            <summary>
            Constructor
            </summary>
            <param name="handler">The event handler passed by application.</param>
        </member>
        <member name="M:Keysight.Visa.AbstractVisaEventListener`1.CreateEventArgs(Ivi.Visa.IVisaSession,Ivi.Visa.EventType,System.UInt32)">
            <summary>
            Creates event arguments that will be used by the event handler passed by application.
            </summary>
            <param name="session">The session that associates with the event</param>
            <param name="eventType">The type of the event</param>
            <param name="context">The event context</param>
            <returns>Event arguments</returns>
        </member>
        <member name="M:Keysight.Visa.AbstractVisaEventListener`1.Keysight#Visa#IVisaEventListener#OnEvent(Ivi.Visa.IVisaSession,Ivi.Visa.EventType,System.UInt32)">
            <summary>
            Calls the event handler passed by application with event arguments.
            Itself is Called back when an event occurs.
            </summary>
            <param name="session">The session that associates with the event</param>
            <param name="eventType">The type of the event</param>
            <param name="context">The event context</param>
        </member>
        <member name="M:Keysight.Visa.AbstractVisaEventListener`1.Keysight#Visa#IVisaEventListener#IsEquivalent(Keysight.Visa.IVisaEventListener)">
            <summary>
            Checks whether they are the same listener.
            </summary>
            <param name="listener">The listener to compare against.</param>
            <returns>True if the same, otherwise false.</returns>
        </member>
        <member name="T:Keysight.Visa.VisaEventListener">
            <summary>
            The class implement IVisaEventListener that is used for most VISA events.
            </summary>
        </member>
        <member name="T:Keysight.Visa.GpibControllerInChargeEventListener">
            <summary>
            The listener for GpibControllerInCharege event.
            </summary>
        </member>
        <member name="T:Keysight.Visa.PxiInterruptEventListener">
            <summary>
            The listener for PxiInterrupt event.
            </summary>
        </member>
        <member name="T:Keysight.Visa.UsbInterruptEventListener">
            <summary>
            The listener for UsbInterrupt event.
            </summary>
        </member>
        <member name="T:Keysight.Visa.VxiInterruptEventListener">
            <summary>
            The listener for VxiInterrupt event.
            </summary>
        </member>
        <member name="T:Keysight.Visa.VxiSignalProcessorEventListener">
            <summary>
            The listener for VxiSignalProcessor event.
            </summary>
        </member>
        <member name="T:Keysight.Visa.VxiTriggerEventListener">
            <summary>
            The listener for VxiTrigger event.
            </summary>
        </member>
        <member name="M:Keysight.Visa.VisaUtility.ConvertTimeSpanTimeoutToInt32(System.TimeSpan)">
            <summary>
            Convert a TimeSpan timeout value to an Int32 timeout value.
            </summary>
            <param name="timeout">The absolute time period to wait before throwing a timeout 
            exception.  If the time span in milliseconds is 0, operations will never wait.  
            If the time span is TimeSpan.MaxValue or the time span in milliseconds is greater 
            than or equal to UInt32.MaxValue, the attempt to wait will never timeout.  Negative 
            time spans are not valid.</param>
            <returns>The timeout value in milliseconds.  0 indicates an immediate timeout and -1 
            indicates an infinite timeout.</returns>
        </member>
        <member name="P:Keysight.Visa.VisaUtility.ImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaUtility.ManufacturerID">
            <summary>
            The Keysight VISA.NET manufacturer ID - '4095'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaUtility.ManufacturerName">
            <summary>
            The VISA.NET vendor name - 'Keysight Technologies'.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaUtility.SpecificationVersion">
            <summary>
            The version of the VISA.NET 4.3.6 specification with which this implementation complies.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VisaUtility.NoSecondaryGpibAddress">
            <summary>
            The value used by VISA to indicate that there is no secondary GPIB address.
            </summary>
        </member>
        <member name="T:Keysight.Visa.VxiBackplaneSession">
            <summary>
            An instantiable class that supports all VXI BACKPLANE sessions. 
            </summary>
            <remarks>
            <para>VXI instrument vendors do not ordinarily expose the information needed to directly access 
            a VXI instrument using registers.  This information is cryptic and may change from firmware version 
            to firmware version.  Instead, vendors provide instrument drivers, software front panels, and 
            other programs for instrument access.  Under normal circumstances, instrument end users should not 
            attempt to access VXI backplanes or instruments using this class.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a VxiBackplaneSession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a VxiBackplaneSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a VxiBackplaneSession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.AssertInterrupt(System.Int16,System.Int32)">
            <summary>
            Keysight VISA.NET does not support this method.
            </summary>
            <param name="irqLevel">The specified device interrupt or signal.</param>
            <param name="statusId">The status value to be presented during an interrupt
            acknowledge cycle.</param>
            <remarks>This is a standard method to assert a specified device interrupt or signal, but it is not supported by Keysight VISA.NET.  </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.AssertTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Asserts a software or hardware trigger.
            </summary>
            <param name="line">The trigger to assert.</param>
            <param name="protocol">The VXI trigger protocol to use when asserting the trigger.</param>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.AssertUtilitySignal(Ivi.Visa.VxiUtilitySignal)">
            <summary>
            Keysight VISA.NET does not support this method.
            </summary>
            <param name="signal">The utility bus signal to assert.</param>
             <remarks>This is a standard method to assert a specified utility bus signal, but it is not supported by Keysight VISA.NET.  </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Maps the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <remarks>
            <para>Mapping a trigger line (as either source or destination) multiple times requires 
            special hardware capabilities and is not guaranteed to be implemented.</para>
            <para>If this operation is called multiple times on the same backplane resource with the same 
            source trigger line and different destination trigger lines, the result should be that when 
            the source trigger line is asserted all specified destination trigger lines should also be 
            asserted.</para>
            <para>If this operation is called multiple times on the same backplane resource with different 
            source trigger lines and the same destination trigger line the result should be that when any 
            of the specified source trigger lines is asserted, the destination trigger line should also be 
            asserted.</para>
            <para>Mapping one trigger line to another modifies the state of hardware. Therefore, the 
            effect continues beyond the scope of the VISA.NET session that mapped it, even if that VISA.NET 
            session is closed.</para>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">If true, the trigger has already been mapped.</param>
            <remarks>
            <para>Mapping a trigger line (as either source or destination) multiple times requires 
            special hardware capabilities and is not guaranteed to be implemented.</para>
            <para>If this operation is called multiple times on the same backplane resource with the same 
            source trigger line and different destination trigger lines, the result should be that when 
            the source trigger line is asserted all specified destination trigger lines should also be 
            asserted.</para>
            <para>If this operation is called multiple times on the same backplane resource with different 
            source trigger lines and the same destination trigger line the result should be that when any 
            of the specified source trigger lines is asserted, the destination trigger line should also be 
            asserted.</para>
            <para>Mapping one trigger line to another modifies the state of hardware. Therefore, the 
            effect continues beyond the scope of the VISA.NET session that mapped it, even if that VISA.NET 
            session is closed.</para>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <remarks>
            <para>This operation unmaps only one trigger mapping per call. If 
            <see cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">MapTrigger</see> was called multiple times 
            on the same backplane resource and created multiple mappings for the trigger source, trigger 
            mappings other than the one specified by the trigger source remain in effect after this call 
            completes.</para>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)"/>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <remarks>
            <para>This operation unmaps only one trigger mapping per call. If 
            <see cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">MapTrigger</see> was called multiple times 
            on the same backplane resource and created multiple mappings for the trigger source, trigger 
            mappings other than the one specified by the trigger source remain in effect after this call 
            completes.</para>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)"/>
            <seealso cref="M:Keysight.Visa.VxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiBackplaneSession.Trigger">
            <summary>
            Occurs when a trigger is received from the VXI backplane.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiBackplaneSession.SystemFailure">
            <summary>
            Occurs when the VXI backplane experiences a system failure.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiBackplaneSession.SystemReset">
            <summary>
            Occurs when the VXI backplane has initiated a system reset.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiBackplaneSession.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe (chassis), which serves as a unique ID for
            the mainframe.
            </summary>
            <remarks>
            <para>The range is between 0 and 255, inclusive.</para>
            <para>This is the logical address of a given device in the mainframe, usually the device with 
            the lowest logical address. Other possible values include the logical address of the Slot 0 
            controller or of the parent-side extender. Often, these are all the same value.</para>
            <para>Since the purpose of this attribute is to provide a unique ID for each mainframe, a 
            VISA manufacturer can choose any of these values, but must be consistent across mainframes.</para>
            <para>The value <see cref="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress"/> (-1) indicates that a 
            chassis logical address cannot be determined.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiBackplaneSession.TriggerStatus">
            <summary>
            The VXI trigger line(s) that are currently set.
            </summary>
            <remarks>
            <para>All of the members defined in the <see cref="T:Ivi.Visa.TriggerLines"/> enumeration are valid for VXI.</para>
            <para>TriggerLines has the [Flags] attribute - multiple trigger lines may be specified by OR-ing 
            them together.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiBackplaneSession.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
            <remarks>
            <para>All of the members defined in the <see cref="T:Ivi.Visa.TriggerLines"/> enumeration are valid for VXI.</para>
            <para>TriggerLines has the [Flags] attribute - multiple trigger lines may be specified by OR-ing 
            them together.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiBackplaneSession.InterruptStatus">
            <summary>
            The current state of the VXI/VME interrupt lines.
            </summary>
            <remarks>
            <para>This is a bit vector with bits 0-6 corresponding to interrupt lines 1-7.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiBackplaneSession.SystemFailureStatus">
            <summary>
            The current state of the VXI/VME SYSFAIL (SYStem FAILure) backplane line.
            </summary>
        </member>
        <member name="T:Keysight.Visa.VxiMemorySession">
            <summary>
            An instantiable class that supports all VXI MEMACC sessions. 
            </summary>
            <remarks>
            <para>VXI instrument vendors do not ordinarily expose the information needed to directly access 
            a VXI instrument using register-based communication.  This information is cryptic and may change 
            from one firmware version to the next.  Instead, vendors provide instrument drivers, software 
            front panels, and other programs for instrument access.  Under normal circumstances, instrument 
            end users should not attempt to access VXI instruments using this class.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiMemorySession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate a VxiMemorySession class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiMemorySession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate a VxiMemorySession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiMemorySession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate a VxiMemorySession class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiMemorySession.Move(Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,System.Int64)">
            <summary>
            Moves data from the specified source to the specified destination.
            </summary>
            <param name="sourceSpace">The address space of the source.</param>
            <param name="sourceOffset">The offset (in bytes) of the memory
            <paramref name="sourceSpace"/> from which data is moved.</param>
            <param name="sourceWidth">The data width of the source.</param>
            <param name="destinationSpace">The address space of the destination.</param>
            <param name="destinationOffset">The offset (in bytes) of the memory
            <paramref name="destinationSpace"/> to which data is moved.</param>
            <param name="destinationWidth">The data width of the destination.</param>
            <param name="sourceCount">The number of elements to move, where the data width of the 
            elements to move is identical to the source data width.</param>
            <remarks>
            <para>The offset parameters are absolute offsets from the start of memory in the specified 
            VXI address space.</para>
            <para>This method operates successfully independently from "low-level" memory operations defined 
            in the <see cref="T:Keysight.Visa.MemoryMap"/> class (PeekXX, PokeXX).  The operations are independent regardless 
            of the configured state of the hardware that is used to perform memory accesses.</para>
            <para>The <paramref name="sourceCount"/> parameter is the number of elements (of the size 
            corresponding to the operation) to transfer, beginning at the specified offset. Therefore, 
            offset + (count * size) cannot exceed the amount of memory exported by the device in the 
            given space.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiMemorySession.LogicalAddress">
            <summary>
            The logical address of the VXI or VME controller for this interface.
            </summary>
            <remarks>
            <para>The range is between 0 and 255, inclusive.</para>
            </remarks>
        </member>
        <member name="T:Keysight.Visa.VxiSession">
            <summary>
            An instantiable class that supports all VXI INSTR sessions. 
            </summary>
            <remarks>
            <para>The VxiSession class supports both register-based communication, and message-based communication (for instruments that support 
            it).  In general, message-based communication is recommended 
            for instrument end users, and register-based communication is not.</para>
            <para>VXI instrument vendors do not ordinarily expose the information needed to directly access 
            a VXI instrument using register-based communication.  This information is cryptic and may change 
            from one firmware version to the next.  Instead, vendors provide either a message-based 
            alternative or some form of programmatic access via instrument drivers, software front panels, 
            and so on.  Under normal circumstances, instrument end users should not attempt to access VXI 
            instruments using register-based communication.</para>
            <para>Methods and properties that implement register-based properties are marked "[Register-Based]"
            in the documentation, including Intellisense.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.#ctor(System.String)">
            <summary>
            Performs the operations necessary to instantiate the <see cref="T:VxiSession"/> class without 
            any locking.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with 
            <see cref="F:Ivi.Visa.AccessModes.None"/> and and infinite timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite help</i> for more details.</para>
            <para>For instruments that are auto-discovered in Keysight Connection Expert, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, Open does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.TimeSpan)">
            <summary>
            Performs the operations necessary to instantiate the <see cref="T:VxiSession"/> class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeout">If the accessMode parameter requests an exclusive lock, this parameter 
            specifies the absolute time period that the constructor waits for a locked resource to be 
            unlocked before throwing an exception, otherwise this parameter is ignored.  If the time 
            span in milliseconds is 0, operations will never wait for the lock.  If the time span is 
            TimeSpan.MaxValue or the time span in milliseconds is greater than or equal to UInt32.MaxValue, 
            the attempt to wait for the lock will never timeout.  Negative time spans are not valid.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.#ctor(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Performs the operations necessary to instantiate the <see cref="T:VxiSession"/> class.
            </summary>
            <param name="resourceName">The descriptor of the resource to which this class will be 
            connected.</param>
            <param name="accessModes">The modes by which the resource is to be accessed. ExclusiveLock is 
            used to acquire an exclusive lock immediately upon opening a session. LoadConfig is used to 
            configure attributes to values specified by some external configuration utility.  The default 
            in None.</param>
            <param name="timeoutMilliseconds">If the accessMode parameter requests an exclusive lock, this 
            parameter specifies the absolute time period (in milliseconds) that the constructor waits 
            for a locked resource to be unlocked before throwing an exception, otherwise this parameter 
            is ignored.  If the value is VisaConstants.ImmediateTimeout (0), operations will never wait for 
            the lock.  If the timeout is VisaConstants.InfiniteTimeout (-1), the attempt to wait for the 
            lock will never timeout.  Negative values other than -1 are treated as unsigned values 
            in the range between Int32.MaxValue and UInt32.MaxValue.</param>
            <remarks>
            <para>This constructor attempts to open a connection to the specified resource with the 
            specified access modes and timeout.</para>
            <para>Some Keysight IO Libraries Connection Expert settings and Keysight Instrument Discovery 
            Service policies affect the operation of this constructor.  Refer to the <i>IO Libraries Suite Help</i> 
            for more details.</para>
            <para>For instruments that are auto-discovered by the Discovery Service, the constructor 
            verifies that the instrument is present.</para>
            <para>For instruments that are manually-added, the constructor does not verify the presence of the 
            instrument. If the device is not present or not turned on, you will not discover this until 
            you attempt to communicate with the instrument.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Maps the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space"/> to be 
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>A reference to the IMemoryMap interface, which provides the ability to 
            Peek and Poke mapped memory.</returns>
            <remarks>
            <para>You can only have one map at a time for a given session. If you need to have 
            multiple maps to a device, you must open one session for each map needed.</para>
            <para>The mapBase parameter is the offset address relative to the device's allocated 
            address base for the corresponding address space specified.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            [Register-Based]  Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Keysight.Visa.VxiSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            [Register-Based]  Reads in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Keysight.Visa.VxiSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            [Register-Based]  Reads in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Keysight.Visa.VxiSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            [Register-Based]  Reads in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Keysight.Visa.VxiSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            [Register-Based]  Writes an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Keysight.Visa.VxiSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            [Register-Based]  Writes a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Keysight.Visa.VxiSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            [Register-Based]  Writes a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Keysight.Visa.VxiSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Writes a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 8-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            [Register-Based]  Moves an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 8-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 16-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*2) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            [Register-Based]  Moves a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 16-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*2) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 32-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*4) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            [Register-Based]  Moves a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 32-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*4) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 64-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*8) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            [Register-Based]  Moves a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 64-bit elements to transfer, beginning at the 
            specified offset. Therefore, (offset + count*8) cannot exceed the amount of memory exported 
            by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            [Register-Based]  Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 8-bit elements to transfer, beginning at the 
            specified sourceIndex. Therefore, sourceIndex + sourceBuffer.Length cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            [Register-Based]  Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 16-bit elements to transfer, beginning at the 
            specified sourceIndex. Therefore, sourceIndex + sourceBuffer.Length*2 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            [Register-Based]  Moves a 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 32-bit elements to transfer, beginning at the 
            specified sourceIndex. Therefore, sourceIndex + sourceBuffer.Length*4 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            [Register-Based]  Moves a 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            [Register-Based]  Moves a 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
            <remarks>
            <para>If the session is an instrument (INSTR) session, the offset parameter specifies a relative 
            offset from the start of the instrument’s address space. If the session is a memory access 
            (MEMACC) session, the offset parameter is an absolute offset from the start of memory in the 
            specified address space.</para>
            <para>All operations on a PXI memory access session that accept a space parameter to indicate 
            the address space for bus access will accept the value AddressSpace.PxiAllocation.</para>
            <para>The count parameter is the number of 64-bit elements to transfer, beginning at the 
            specified sourceIndex. Therefore, sourceIndex + sourceBuffer.Length*8 cannot exceed the amount 
            of memory exported by the device in the given space.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.AssertTrigger(Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="protocol">The trigger protocol to use when the trigger is asserted.</param>
        </member>
        <member name="M:Keysight.Visa.VxiSession.CommandQuery(Ivi.Visa.VxiCommandMode,System.Int32)">
            <summary>
            Sends the device a miscellaneous command or query and/or retrieves the response to a
            previous query.
            </summary>
            <param name="mode">Indicates whether to issue a command and/or retrieve a response, and the 
            type or size of the command or response.</param>
            <param name="command">The command to send.</param>
            <returns>The response retrieved from the device.  If the mode does not include a response, 
            this method returns zero.</returns>
            <remarks>
            <para>If the mode parameter specifies sending a 16-bit command, the upper half of the command 
            parameter is ignored. If the mode parameter specifies just retrieving a response, the command 
            parameter is ignored. If the mode parameter specifies sending a command only, the return value 
            may be 0. If a response is retrieved but is only a 16-bit value, the upper half of the return 
            value will be set to 0.</para>
            <para>Refer to the VXI Specification for defined word serial commands. The command values 
            Byte Available, Byte Request, Clear, and Trigger are not valid for this operation.</para>
            </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MemoryAllocate(System.Int64)">
            <summary>
            [Register-Based]  Keysight VISA.NET does not support this 
            method.
            </summary>
            <param name="size">The size of the allocated memory in bytes</param>
            <returns>The offset of the allocated device memory.</returns>
            <remarks>This is a standard method to allocate memory from the device’s memory region, but it is not supported by Keysight VISA.NET.  </remarks>
        </member>
        <member name="M:Keysight.Visa.VxiSession.MemoryFree(System.Int64)">
            <summary>
            [Register-Based]  Keysight VISA.NET does not support this method.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
             <remarks>This is a standard method to free previously allocated memory, but it is not supported by Keysight VISA.NET.  </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.AllowDma">
            <summary>
            [Register-Based]  Specifies whether direct memory access is enabled.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.DestinationIncrement">
            <summary>
            [Register-Based]  For MoveOut methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <remarks>
            <para>For MoveOutXX methods, this property specifies how much the destination offset will 
            be incremented after every transfer.</para>
            <para>The default value of this attribute is 1, indicating that the destination address will 
            be incremented by 1 after each transfer, so that items are moved into consecutive elements.</para>
            <para>If this property is set to 0, the MoveOutXX method will always write to the same 
            element, essentially treating the destination as a FIFO register.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.SourceIncrement">
            <summary>
            [Register-Based]  For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
            <remarks>
            <para>For MoveInXX methods, this property specifies how much the source offset will 
            be incremented after every transfer.</para>
            <para>The default value of this attribute is 1, indicating that the source address will be 
            incremented by 1 after each transfer, so that items are moved from consecutive elements.</para>
            <para>If this property is set to 0, the MoveInXX methods will always read from the same 
            element, essentially treating the source as a FIFO register.</para>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiSession.Interrupt">
            <summary>
            Occurs when a VXIbus interrupt is received from the device.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiSession.SignalProcessor">
            <summary>
            Occurs when a VXIbus signal or VXIbus interrupt is received from the device.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="E:Keysight.Visa.VxiSession.Trigger">
            <summary>
            Occurs when a VXIbus trigger is received from the device.
            </summary>
            <remarks>
            <para>Multiple event handlers may be registered for this event.</para>
            <para>When a calling program registers an event handler, it is possible that the event 
            handler might be called before the call to register the event handler returns. In this 
            case, the event handlers registered for an event are executed before the return of 
            the event handler registration.</para>
            <para>Client programs should either use the event-related methods <see cref="M:Keysight.Visa.VisaSession.DisableEvent(Ivi.Visa.EventType)"/>, 
            <see cref="M:Keysight.Visa.VisaSession.DiscardEvents(Ivi.Visa.EventType)"/>, <see cref="M:Keysight.Visa.VisaSession.EnableEvent(Ivi.Visa.EventType)"/>, and 
            <see cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)">VisaSession.WaitOnEvent</see> 
            (any overload) with the appropriate eventType, -or- the .NET events which are defined 
            individually for each event stype in the ession class to which they apply.  If a calling 
            program uses both mechanisms at the same time, it will receive the event twice, once for 
            each mechanism.</para>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)"/>
            <seealso cref="M:Keysight.Visa.VisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)"/>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.CommanderLogicalAddress">
            <summary>
            The logical address of the commander of the VXI device used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 255, inclusive.  The value -1 indicates that the logical
            address is unknown.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.DestinationAccessPrivilege">
            <summary>
            [Register-Based]  The address modifier used in high-level access methods, such as OutXX() and 
            MoveOutXX(), when writing to the destination.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged">DataPrivileged</see>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.DestinationByteOrder">
            <summary>
            [Register-Based]  The destination address space byte order used in high-level access methods, such 
            as OutXX() and MoveOutXX(), when writing to the destination.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.ByteOrder.BigEndian">BigEndian</see>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.DeviceClass">
            <summary>
            The VXI-defined device class to which the resource belongs.
            </summary>
            <remarks>
            <para>VME devices are usually either register based (<see cref="F:Ivi.Visa.VxiDeviceClass.Register">Register</see>) 
            or belong to a miscellaneous class (<see cref="F:Ivi.Visa.VxiDeviceClass.Other">Other</see>).</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.FastDataChannelNumber">
            <summary>
            [Register-Based]  The FDC channel that will be used when transferring data.
            </summary>
            <remarks>
            <para>The range is between 0 and 7, inclusive.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.FastDataChannelUseStreaming">
            <summary>
            [Register-Based]  If true, FDC streaming will be used when transferring data (Normal mode or Stream
            mode).
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.FastDataChannelUsePair">
            <summary>
            [Register-Based]  If true, a channel pair will be used when transferring data, rather than a single
            channel.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.Is4882Compliant">
            <summary>
            If true, the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.IsImmediateServant">
            <summary>
            If true, the device is an immediate servant of the controller running VISA.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.LogicalAddress">
            <summary>
            The logical address of the VXI or VME device used by the given session.
            </summary>
            <remarks>
            <para>The range is between 0 and 511, inclusive.</para>
            <para>For a VME device, the logical address is actually a pseudo-address in the range 256 to 511.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe, which serves as a unique ID for
            the mainframe.
            </summary>
            <remarks>
            <para>The range is between 0 and 255, inclusive.</para>
            <para>This is the logical address of a given device in the mainframe, usually the device with 
            the lowest logical address. Other possible values include the logical address of the Slot 0 
            controller or of the parent-side extender. Often, these are all the same value.</para>
            <para>Since the purpose of this attribute is to provide a unique ID for each mainframe, a 
            VISA manufacturer can choose any of these values, but must be consistent across mainframes.</para>
            <para>The value <see cref="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress">VxiUnknownLogicalAddress</see> 
            (-1) indicates that a chassis logical address cannot be determined.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.ManufacturerId">
            <summary>
            The VXIbus vendor identification number of the hardware vendor for this device.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the <see cref="P:Keysight.Visa.VxiSession.ManufacturerId"/> property.
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.MemoryMapAccessPrivilege">
            <summary>
            [Register-Based]  The address modifier to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> 
            operations when accessing the mapped window.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged">DataPrivileged</see>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.MemoryMapByteOrder">
            <summary>
            [Register-Based]  The byte order to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.MemoryBase">
            <summary>
            [Register-Based]  The base address of the device in VXIbus memory address space.
            </summary>
            <remarks>
            <para>The base address is applicable to A24 or A32 address space.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.MemorySize">
            <summary>
            [Register-Based]  The size of the memory requested by the device in the VXIbus address space.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.MemorySpace">
            <summary>
            [Register-Based]  The VXIbus address space used by the device.
            </summary>
            <remarks>
            <para>The default is AddressSpace.VxiA16.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.ModelCode">
            <summary>
            The vendor-specific model number for this VXIbus device.
            </summary>
            <remarks>
            <para>The range is between Int16.MinValue and Int16.MaxValue, inclusive.  Negative values are 
            converted to unsigned integers between Int16.MaxValue + 1 and UInt16.MaxValue before they are 
            used.  The default is 0</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the <see cref="P:Keysight.Visa.VxiSession.ModelCode"/> property).
            </summary>
            <remarks>
            <para>When using multiple implementations of VISA.NET from different vendors, the value of 
            this attribute should be used for display purposes only and not for programmatic decisions, 
            as the value can be different between VISA implementations and/or revisions.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.Slot">
            <summary>
            The physical slot location of this VXIbus device.  If the location is not known, this property 
            returns <see cref="F:Ivi.Visa.VisaConstants.UnknownSlotNumber">UnknownSlotNumber</see>.
            </summary>
        </member>
        <member name="P:Keysight.Visa.VxiSession.SourceAccessPrivilege">
            <summary>
            [Register-Based]  The address modifier to be used in high-level access methods, such as InXX() and
            MoveInXX(), when reading from the source.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged">DataPrivileged</see>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.SourceByteOrder">
            <summary>
            [Register-Based]  The source address space byte order.
            </summary>
            <remarks>
            <para>The default is <see cref="F:Ivi.Visa.ByteOrder.BigEndian">BigEndian</see>.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.TriggerLine">
            <summary>
            The current triggering line.
            </summary>
            <remarks>
            <para>All of the triggers in the TriggerLine enumeration may be used with VXI triggers.</para>
            </remarks>
        </member>
        <member name="P:Keysight.Visa.VxiSession.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
            <remarks>
            <para>Multiple triggers may be specified.</para>
            <para>All of the triggers in the TriggerLines enumeration may be used with VXI triggers.</para>
            </remarks>
        </member>
    </members>
</doc>
