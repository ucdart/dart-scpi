<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivi.Visa</name>
    </assembly>
    <members>
        <member name="T:Ivi.Visa.BinaryEncoding">
            <summary>
            Indicates the default binary data format used by formatted I/O operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.BinaryEncoding.DefiniteLengthBlockData">
            <summary>
            IEEE-488.2 definite block format.
            </summary>
        </member>
        <member name="F:Ivi.Visa.BinaryEncoding.IndefiniteLengthBlockData">
            <summary>
            IEEE-488.2 indefinite block format.
            </summary>
        </member>
        <member name="F:Ivi.Visa.BinaryEncoding.RawLittleEndian">
            <summary>
            Raw binary data with little Endian byte order.
            </summary>
        </member>
        <member name="F:Ivi.Visa.BinaryEncoding.RawBigEndian">
            <summary>
            Raw binary data with big Endian byte order.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ConflictManager.ApiType">
            <summary>
            The list of API types supported by the Conflict Manager class
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.ApiType.CAndCom">
            <summary>
            ANSI C or COM
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.ApiType.DotNet">
            <summary>
            .NET
            </summary>
        </member>
        <member name="T:Ivi.Visa.ConflictManager.HandlerType">
            <summary>
            Represents the status of each handler in the Conflict Manager record 
            with respect to the HardwareInterface the handler is listed under.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.HandlerType.NotChosen">
            <summary>
            The handler is not the chosen handler for the HardwareInterface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.HandlerType.ChosenByResourceManager">
            <summary>
            The resource manager chose this handler for the HardwareInterface.  If the resource 
            manager encounters an error when trying to use this handler at a later time, 
            the resource manager can choose a different handler for this HardwareInterface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.HandlerType.ChosenByUser">
            <summary>
            A user chose this handler for the HardwareInterface.  If the resource manager encounters 
            an error when trying to use this handler at a later time, the resource manager 
            will not choose a different handler for this HardwareInterface.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ConflictManager.HardwareInterface">
            <summary>
            This class consolidates information related to hardware interfaces.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.#ctor(System.Int32,System.Int16,System.String)">
            <summary>
            Creates an instance of the HardwareInterface class from the supplied information.
            </summary>
            <param name="type">Specifies the hardware interface type (GPIB, ASRL, etc.).</param>
            <param name="number">The board number of the hardware interface.</param>
            <param name="resourceClass">The class of resource for this session (INSTR, INTFC, etc.).</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.op_Equality(Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Returns True iff the two HardwareInterface objects are equivalent
            </summary>
            <param name="intf1">The first HardwareInterface</param>
            <param name="intf2">The second HardwareInterface</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.op_Inequality(Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Returns True iff the two HardwareInterface objects are not equivalent
            </summary>
            <param name="intf1">The first HardwareInterface</param>
            <param name="intf2">The second HardwareInterface</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.Equals(System.Object)">
            <summary>
            Returns True iff the given object o is a HardwareInterface object equivalent to this object
            </summary>
            <param name="o">The Object o to compare with</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.GetHashCode">
            <summary>
            Returns a suitable Hash Code for this object. The Hash Code for two objects
            that are Equal must be the same. The Hash Code shouldn't change over the
            life of the object.
            </summary>
            <returns>The computed Hash Code</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.HardwareInterface.Equals(Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Returns True iff the given HardwareInterface object is equivalent to this object
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.HardwareInterface.Number">
            <summary>
            The board number of the hardware interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.HardwareInterface.ResourceClass">
            <summary>
            The class of resource for this session (INSTR, INTFC, etc.).
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.HardwareInterface.Type">
            <summary>
            Specifies the hardware interface type (GPIB, ASRL, etc.).
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_Initialize">
            Return Type: ViStatus->ViInt32
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_Close">
            Return Type: ViStatus->ViInt32
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_SetStoreConflictsOnly(System.UInt16)">
             Return Type: ViStatus->ViInt32
            storeConflicts: ViBoolean->ViUInt16
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetStoreConflictsOnly(System.UInt16@)">
             Return Type: ViStatus->ViInt32
            storeConflicts: ViPBoolean->ViBoolean*->ViUInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetConflictTableFilename(System.Text.StringBuilder)">
             Return Type: ViStatus->ViInt32
            filename: ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetResourceCount2(System.Int16,System.Int32@)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            numberRsrcs: ViPInt32->ViInt32*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_ClearResourceHandlersFromTable2(System.Int16)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_CreateHandler2(System.Int16,System.UInt16,System.UInt16,System.String,System.String,System.Int16,System.String)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            interfaceType: ViUInt16
            interfaceNumber: ViUInt16
            sessionType: ViConstString->ViChar*
            guid_SRM: ViConstString->ViChar*
            conflictHandlerType: ViInt16
            comments: ViConstString->ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_DeleteHandler2(System.Int16,System.UInt16,System.UInt16,System.String,System.String)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            interfaceType: ViUInt16
            interfaceNumber: ViUInt16
            sessionType: ViConstString->ViChar*
            guid_SRM: ViConstString->ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_DeleteHandlerByGUID2(System.Int16,System.String)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            guid_SRM: ViConstString->ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_DeleteResourceByIndex2(System.Int16,System.Int32)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            resourceIndex: ViInt32
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_FindChosenHandler2(System.Int16,System.UInt16,System.UInt16,System.String,System.Text.StringBuilder,System.Int16@)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            interfaceType: ViUInt16
            interfaceNumber: ViUInt16
            sessionType: ViConstString->ViChar*
            guid_SRM: ViChar*
            conflictHandlerType: ViPInt16->ViInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_QueryResource2(System.Int16,System.Int32,System.UInt16@,System.UInt16@,System.Text.StringBuilder,System.Int16@)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            resourceIndex: ViInt32
            interfaceType: ViPUInt16->ViUInt16*
            interfaceNumber: ViPUInt16->ViUInt16*
            sessionType: ViChar*
            numHandlers: ViPInt16->ViInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_QueryResourceHandler2(System.Int16,System.Int32,System.Int32,System.Text.StringBuilder,System.Int16@,System.Text.StringBuilder)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            resourceIndex: ViInt32
            handlerIndex: ViInt32
            guid_SRM: ViChar*
            conflictHandlerType: ViPInt16->ViInt16*
            comments: ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetVisaPreferred2(System.Int16,System.Text.StringBuilder)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            guid_SRM: ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_SetVisaPreferred2(System.Int16,System.String)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            guid_SRM: ViConstString->ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetInstalledVisaCount2(System.Int16,System.Int32@)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            numberOfVisas: ViPInt32->ViInt32*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetInstalledVisa2(System.Int16,System.Int32,System.UInt16@,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            index: ViInt32
            vendorID: ViPUInt16->ViUInt16*
            guid_SRM: ViChar*
            visaPathLocation: ViChar*
            visaFriendlyName: ViChar*
            comments: ViChar*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetVisaEnabled2(System.Int16,System.String,System.UInt16@)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            guid_SRM: ViConstString->ViChar*
            enabled: ViPBoolean->ViBoolean*->ViUInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_SetVisaEnabled2(System.Int16,System.String,System.UInt16)">
             Return Type: ViStatus->ViInt32
            apiType: ViInt16
            guid_SRM: ViConstString->ViChar*
            enabled: ViBoolean->ViUInt16
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_FlushConflictFile(System.Int16,System.UInt16@)">
             Return Type: ViStatus->ViInt32
            behavior: ViInt16
            fileOnDiskWasNewer: ViPBoolean->ViBoolean*->ViUInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_GetIsDirty(System.UInt16@)">
             Return Type: ViStatus->ViInt32
            isDirty: ViPBoolean->ViBoolean*->ViUInt16*
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_ReloadFile">
            Return Type: ViStatus->ViInt32
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.NativeMethods.VISACM_ClearEntireTable">
            Return Type: ViStatus->ViInt32
        </member>
        <member name="T:Ivi.Visa.ConflictManager.VisaImplementation">
            <summary>
            This class consolidates information related to a specific VISA implementation.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.#ctor(System.Guid,System.Int32,System.String,System.String,System.String,Ivi.Visa.ConflictManager.ApiType)">
            <summary>
            Creates an instance of the VisaImplementation class from the supplied information.
            </summary>
            <param name="handlerId">A GUID that uniquely identifies the VISA implementation
            for the given API type.</param>
            <param name="resourceManufacturerId">The ID number of the vendor of this VISA
            implementation.  These numbers are defined
            in the VPP-9 specification.</param>
            <param name="location">If the ApiType is CAndCom, the full path for the VISA
            implementation's resource manager DLL.  If the ApiType is DotNet, the assembly
            qualified name for the VISA implementation's resource manager assembly.</param>
            <param name="friendlyName">A descriptive name for this implementation.</param>
            <param name="comments">Additional descriptive information related to the VISA
            implementation.</param>
            <param name="apiType">The API type of the implementation.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.op_Equality(Ivi.Visa.ConflictManager.VisaImplementation,Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Returns True iff the two VisaImplementation objects are equivalent
            </summary>
            <param name="visa1">The first VisaImplementation</param>
            <param name="visa2">The second VisaImplementation</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.op_Inequality(Ivi.Visa.ConflictManager.VisaImplementation,Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Returns True iff the two VisaImplementation objects are not equivalent
            </summary>
            <param name="visa1">The first VisaImplementation</param>
            <param name="visa2">The second VisaImplementation</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.Equals(System.Object)">
            <summary>
            Returns True iff the given object o is a VisaImplementation object equivalent to this object
            </summary>
            <param name="o">The Object o to compare with</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.GetHashCode">
            <summary>
            Returns a suitable Hash Code for this object. The Hash Code for two objects
            that are Equal must be the same. The Hash Code shouldn't change over the
            life of the object.
            </summary>
            <returns>The computed Hash Code</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.VisaImplementation.Equals(Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Returns True iff the given VisaImplementation object is equivalent to this object
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.ApiType">
            <summary>
            The API type of the implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.Comments">
            <summary>
            Additional descriptive information related to the VISA implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.Enabled">
            <summary>
            If false, then the resource manager will never load or instantiate this
            implementation.  If true, the resource manager may use this implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.FriendlyName">
            <summary>
            A descriptive name for this implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.HandlerId">
            <summary>
            A GUID that uniquely identifies the VISA implementation for the given API type.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.Location">
            <summary>
            If the ApiType is CAndCom, the full path for the VISA implementation's resource
            manager DLL.  If the ApiType is DotNet, the assembly qualified name for the VISA
            implementation's resource manager assembly.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.VisaImplementation.ResourceManufacturerId">
            <summary>
            The ID number of the vendor of this VISA implementation.  These numbers are defined
            in the VPP-9 specification.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ConflictManager.ConflictManager">
            <summary>
            Provides an API to manage conflict resolution records
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.#ctor">
            <summary>
            Creates an instance of the ConflictManager class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.Finalize">
            <summary>
            Destroys an instance of the ConflictManager class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.Dispose">
            <summary>
            Disposes an instance of the ConflictManager class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the ConflictManager class.
            </summary>
            <param name="disposing">True if the managed resources should be released; false
            if only the unmanaged resources should be released. </param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.ClearTable">
            <summary>
            Clear all records and settings that are recorded with the conflict manager
            for all API types.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.CreateHandler(Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.VisaImplementation,Ivi.Visa.ConflictManager.HandlerType)">
            <summary>
            Register a VisaImplementation as a possible handler for the given HardwareInterface,
            and specify the type of the handler.
            </summary>
            <param name="intf">The HardwareInterface for which to create the handler record.</param>
            <param name="visa">The VisaImplementation that is being registered as a handler.</param>
            <param name="type">The type of the handler.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.CreateHandler(Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.VisaImplementation,Ivi.Visa.ConflictManager.HandlerType,System.String)">
            <summary>
            Register a VisaImplementation as a possible handler for the given HardwareInterface,
            and specify the type of the handler and comments regarding this handler record.
            </summary>
            <param name="intf">The HardwareInterface for which to create the handler record.</param>
            <param name="visa">The VisaImplementation that is being registered as a handler.</param>
            <param name="type">The type of the handler.</param>
            <param name="comments">Comments related to the handler record.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.FlushConflictFile(Ivi.Visa.ConflictManager.FlushBehavior)">
            <summary>
            Flush the conflict file to disk, with specified behavior.  If there are no changes
            to the in-memory copy, calling this method has no effect.
            </summary>
            <param name="behavior">The flush behavior.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.FlushConflictFile(Ivi.Visa.ConflictManager.FlushBehavior,System.Boolean@)">
            <summary>
            Flush the conflict file to disk, with specified behavior.  If there are no changes
            to the in-memory copy, calling this method has no effect.
            </summary>
            <param name="behavior">The flush behavior.</param>
            <param name="fileOnDiskWasNewer">Indicates whether the file on disk was newer
            than the in-memory copy.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetChosenHandler(Ivi.Visa.ConflictManager.ApiType,Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Get the handler that is currently chosen for a given HardwareInterface and API
            type.  If there is no currently chosen handler, this method returns null.
            </summary>
            <param name="apiType">The API type.</param>
            <param name="intf">The HardwareInterface.</param>
            <returns>The VisaImplementation that is currently chosen as the handler
            for a given HardwareInterface and API type.</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetChosenHandler(Ivi.Visa.ConflictManager.ApiType,Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.HandlerType@)">
            <summary>
            Get the handler that is currently chosen for a given HardwareInterface and API
            type.  If there is no currently chosen handler, this method returns null.
            </summary>
            <param name="apiType">The API type.</param>
            <param name="intf">The HardwareInterface.</param>
            <param name="handlerType">The type of the handler.</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetHandlers(Ivi.Visa.ConflictManager.ApiType,Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Get all the VisaImplementations that can handle a given HardwareInterface for a given
            API type.  If there is no such handlers, this method returns an empty list.
            </summary>
            <param name="apiType">The API type.</param>
            <param name="intf">The HardwareInterface.</param>
            <returns>The list of all the VisaImplementations that can handle a given
            HardwareInterface for a given API type.</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetInstalledVisas(Ivi.Visa.ConflictManager.ApiType)">
            <summary>
            Find all the VISA implementations installed on the system that support the given
            API type.  If there are no matching implementations, this method returns an empty list.
            </summary>
            <param name="apiType">The API type.</param>
            <returns>The list of all of the VISA implementations installed on the system that support the given API type.</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetInterfaces(Ivi.Visa.ConflictManager.ApiType)">
            <summary>
            Get all the interfaces that have handlers for a given API type.  If there are
            no matching interfaces, this method returns an empty list.
            </summary>
            <param name="apiType">The API type.</param>
            <returns>The list of all the interfaces that have handlers for a given API type.</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.GetPreferredVisa(Ivi.Visa.ConflictManager.ApiType)">
            <summary>
            Get the VISA implementation preferred for a given API type.  If there is no
            preferred VISA implementation, this method returns null.
            </summary>
            <param name="apiType">The API type.</param>
            <returns>The VISA implementation preferred for the given API type.</returns>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.ReloadFile">
            <summary>
            Reload the settings conflict manager settings file on disk.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.RemoveHandler(Ivi.Visa.ConflictManager.HardwareInterface,Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Remove a given VisaImplementation from the list of possible handlers for a given
            HardwareInterface.  If the VisaImplementation is not a valid handler for the
            HardwareInterface, calling this method has no effect.
            </summary>
            <param name="intf">The HardwareInterface.</param>
            <param name="visa">The VisaImplementation.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.RemoveHandlers(Ivi.Visa.ConflictManager.ApiType)">
            <summary>
            Remove all the handlers for the given API type.  If there are no matching
            handlers, calling the method has no effect.
            </summary>
            <param name="apiType">The API type.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.RemoveHandlers(Ivi.Visa.ConflictManager.ApiType,Ivi.Visa.ConflictManager.HardwareInterface)">
            <summary>
            Remove all the handlers of the given interface for the given API type.  If there
            are no matching handlers, calling the method has no effect.
            </summary>
            <param name="apiType">The API type.</param>
            <param name="intf">The HardwareInterface.</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.RemoveHandlers(Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Removes all the handler records that refer to the specified VisaImplementation.
            If there are no matching handlers, calling the method has no effect.
            </summary>
            <param name="visa">The VisaImplementation</param>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.ConflictManager.SetPreferredVisa(Ivi.Visa.ConflictManager.VisaImplementation)">
            <summary>
            Set the given VISA implementation as the preferred implementation for the
            API type that it supports.
            </summary>
            <param name="visa">The VisaImplementation.</param>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.ConflictManager.StoreConflictsOnly">
            <summary>
            Whether the Conflict Manager should store only conflicts in the table.  If false,
            the Conflict Manager will store information about all VISA resources that it opens.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.ConflictManager.ConflictFilePath">
            <summary>
            The full path of the conflict file on disk.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ConflictManager.ConflictManager.IsDirty">
            <summary>
            Whether the Conflict Manager settings in memory have been changed since they
            were loaded from the file on disk
            </summary>
        </member>
        <member name="T:Ivi.Visa.ConflictManager.FlushBehavior">
            <summary>
            Describes the behavior to use when the FlushConflictFile() method saves Conflict Manager 
            settings to the file on disk.  This mode is ignored if the local in-memory copy of the 
            data has not changed.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.FlushBehavior.OverwriteAlways">
            <summary>
            Even if there are changes to the file on disk, overwrite them.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.FlushBehavior.WriteIfFileOnDiskUnchanged">
            <summary>
            Save only if there are no changes to the file on disk.  If the disk file is newer, 
            FlushConflictFile() will throw an exception.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ConflictManager.FlushBehavior.WriteOrReload">
            <summary>
            Save only if there are no changes to the file on disk.  If the disk file is newer, 
            FlushConflictFile() will discard the local changes and reload the file from disk.
            </summary>
        </member>
        <member name="T:Ivi.Visa.EventQueueStatus">
            <summary>
            Indicates the current state of the event queue for this session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.EventQueueStatus.Empty">
            <summary>
            The event queue is empty.
            </summary>
        </member>
        <member name="F:Ivi.Visa.EventQueueStatus.NotEmpty">
            <summary>
            The event queue is not empty.
            </summary>
        </member>
        <member name="F:Ivi.Visa.EventQueueStatus.Overflowed">
            <summary>
            The event queue has overflowed.
            </summary>
        </member>
        <member name="T:Ivi.Visa.FormattedIO.MessageBasedFormattedIO">
            <summary>
            The MessageBasedFormattedIO implements the IMessageBasedFormattedIO interface, and includes 
            methods that format and parse data to/from instrument formats, and manage the formatted I/O 
            read and write buffers needed to do itefficiently.  It correctly handles line termination 
            and buffer flushing. When writing to an instrument, Formatted I/O makes it possible to easily 
            send complete and correct instrument commands. When reading from an instrument, Formatted I/O 
            makes it possible to easily read and parse complete responses.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IMessageBasedFormattedIO">
            <summary>
            The IMessageBasedFormattedIO interface includes methods that format and parse data to/from
            instrument formats, and manage the formatted I/O read and write buffers needed to do it
            efficiently.  It correctly handles line termination and buffer flushing.
            When writing to an instrument, Formatted I/O makes it possible to easily send complete and
            correct instrument commands. When reading from an instrument, Formatted I/O makes it possible
            to easily read and parse complete responses.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.DiscardBuffers">
            <summary>
            Discard all of the data in both the formatted I/O read and write buffers without
            performing any I/O to or from the connected resource.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.FlushWrite(System.Boolean)">
            <summary>
            Flushes all the data from the formatted I/O write buffer and sends it to the instrument, 
            without appending a termchar.
            </summary>
            <param name="sendEnd">Determines whether the END indicator is sent to the instrument.  If the 
            SendEndEnabled property is different from the value of the sendEnd parameter, the FlushWrite 
            method changes the SendEndEnabled property on the I/O session, commits the write buffer, and 
            then restores the previous value of the SendEndEnabled property.
            </param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Write(System.Char)">
            <summary>
            Converts the specified character to an ASCII character and appends it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The character to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Write(System.String)">
            <summary>
            Converts the specified string to an ASCII string and appends it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The string to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Write(System.Int64)">
            <summary>
            Converts the specified signed integer to an ASCII string and appends it to the formatted
            I/O write buffer.
            </summary>
            <param name="data">The integer to be converted and added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Write(System.UInt64)">
            <summary>
            Converts the specified unsigned integer to an ASCII string and appends it to the
            formatted I/O write buffer.
            </summary>
            <param name="data">The integer to be converted and added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Write(System.Double)">
            <summary>
            Converts the specified real number to an ASCII string and appends it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The real number to be converted and added to the formatted I/O write
            buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine">
            <summary>
            Appends a newline (0xA) to the formatted I/O write buffer, flushes the buffer, and sends
            an END with the buffer if required.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine(System.Char)">
            <summary>
            Converts the specified character to an ASCII character and appends it to the formatted I/O
            write buffer.  Appends a newline (0xA) to the formatted I/O write buffer, flushes the
            buffer, and sends an END with the buffer if required.
            </summary>
            <param name="data">The character to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine(System.String)">
            <summary>
            Converts the specified string to an ASCII string and appends it to the formatted I/O
            write buffer.  Appends a newline (0xA) to the formatted I/O write buffer, flushes the
            buffer, and sends an END with the buffer if required.
            </summary>
            <param name="data">The string to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine(System.Int64)">
            <summary>
            Converts the specified signed integer to an ASCII string and appends it to the formatted
            I/O write buffer.  Appends a newline (0xA) to the formatted I/O write buffer, flushes the
            buffer, and sends an END with the buffer if required.
            </summary>
            <param name="data">The integer to be converted and added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine(System.UInt64)">
            <summary>
            Converts the specified unsigned integer to an ASCII string and appends it to the
            formatted I/O write buffer.  Appends a newline (0xA) to the formatted I/O write buffer, flushes the
            buffer, and sends an END with the buffer if required.
            </summary>
            <param name="data">The integer to be converted and added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLine(System.Double)">
            <summary>
            Converts the specified real number to an ASCII string and appends it to the formatted I/O
            write buffer.  Appends a newline (0xA) to the formatted I/O write buffer, flushes the
            buffer, and sends an END with the buffer if required.
            </summary>
            <param name="data">The real number to be converted and added to the formatted I/O write
            buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Byte[])">
            <summary>
            Converts each of the bytes in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Converts each of the bytes in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.SByte[])">
            <summary>
            Converts each of the signed bytes in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Converts each of the signed bytes in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int16[])">
            <summary>
            Converts each of the Int16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt16[])">
            <summary>
            Converts each of the UInt16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int32[])">
            <summary>
            Converts each of the Int32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt32[])">
            <summary>
            Converts each of the UInt32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int64[])">
            <summary>
            Converts each of the Int64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int64 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt64[])">
            <summary>
            Converts each of the UInt64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt64 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Single[])">
            <summary>
            Converts each of the singles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Single[],System.Int64,System.Int64)">
            <summary>
            Converts each of the singles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            singles, starting from the array index specified.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Double[])">
            <summary>
            Converts each of the doubles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteList(System.Double[],System.Int64,System.Int64)">
            <summary>
            Converts each of the doubles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            doubles, starting from the array index specified.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Byte[])">
            <summary>
            Converts each of the bytes in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Appends a newline (0xa)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Converts each of the bytes in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            bytes, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.SByte[])">
            <summary>
            Converts each of the signed bytes in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the
            buffer if required.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Converts each of the signed bytes in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count bytes, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int16[])">
            <summary>
            Converts each of the Int16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the
            buffer if required.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int16 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt16[])">
            <summary>
            Converts each of the UInt16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the
            buffer if required.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt16 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt16 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int32[])">
            <summary>
            Converts each of the Int32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the
            buffer if required.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int32 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt32[])">
            <summary>
            Converts each of the UInt32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt32 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt32 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int64[])">
            <summary>
            Converts each of the Int64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Converts each of the Int64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count Int64 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt64[])">
            <summary>
            Converts each of the UInt64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Converts each of the UInt64 integers in the specified array to an ASCII string and
            appends them, separated by commas, to the formatted I/O write buffer.  Copy no more than
            count UInt64 integers, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Single[])">
            <summary>
            Converts each of the singles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Single[],System.Int64,System.Int64)">
            <summary>
            Converts each of the singles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            singles, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Double[])">
            <summary>
            Converts each of the doubles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Appends a newline
            (0xA) to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteLineList(System.Double[],System.Int64,System.Int64)">
            <summary>
            Converts each of the doubles in the specified array to an ASCII string and appends
            them, separated by commas, to the formatted I/O write buffer.  Copy no more than count
            doubles, starting from the array index specified.  Appends a newline (0xA)
            to the formatted I/O write buffer, flushes the buffer, and sends an END with the buffer
            if required.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Byte[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.SByte[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count signed bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int16[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count Int16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt16[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count UInt16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int32[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count Int32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt32[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count UInt32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int64[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Raw binary arrays of 64-bit integers are supported, but IEEE 488.2 
            does not define arbitrary blocks of 64-bit integers.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count Int64 integers, starting from the array index specified.
            Raw binary arrays of 64-bit integers are supported, but IEEE 488.2 does not define 
            arbitrary blocks of 64-bit integers.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt64[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Raw binary arrays of 64-bit integers are supported, but IEEE 488.2 does 
            not define arbitrary blocks of 64-bit integers.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count UInt64 integers, starting from the array index specified.
            Raw binary arrays of 64-bit integers are supported, but IEEE 488.2 does not define 
            arbitrary blocks of 64-bit integers.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Single[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Single intergers cannot be formatted as IEEE-488.2 blocks.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Single[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count singles, starting from the array index specified.
            Single intergers cannot be formatted as IEEE-488.2 blocks.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Double[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Single intergers cannot be formatted as IEEE-488.2 blocks.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinary(System.Double[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer.  Copy no more than count singles, starting from the array index specified.
            Single intergers cannot be formatted as IEEE-488.2 blocks.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Byte[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.SByte[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count signed bytes, starting from the array index specified.
            </summary>
            <param name="data">The array of signed bytes to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int16[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of Int16 integers to added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count Int16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt16[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count UInt16 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt16 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int32[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count Int32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt32[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of UInt32 integers to added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count UInt32 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt32 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int64[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count Int64 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of Int64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt64[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count UInt64 integers, starting from the array index specified.
            </summary>
            <param name="data">The array of UInt64 integers to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Single[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Single[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count singles, starting from the array index specified.
            </summary>
            <param name="data">The array of singles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Double[])">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.WriteBinaryAndFlush(System.Double[],System.Int64,System.Int64)">
            <summary>
            Formats the specified array as a raw binary array and adds it to the formatted I/O
            write buffer, appends a newline (and END, if END is enabled) to the formatted data,
            sends whatever is in the write buffer to the instrument, and flushes the buffer.
            Copy no more than count doubles, starting from the array index specified.
            </summary>
            <param name="data">The array of doubles to be added to the formatted I/O write buffer.</param>
            <param name="index">The index in data of the first element to be copied.</param>
            <param name="count">The number of elements to be copied.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadChar">
            <summary>
            Read a single character from the formatted I/O read buffer.
            </summary>
            <returns>The character read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadString">
            <summary>
            Read a string from the formatted I/O read buffer.  The method stops reading characters when 
            it encounters a whitespace character or an END.
            </summary>
            <returns>A string read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadString(System.Int32)">
            <summary>
            Read a string not more than <paramref name="count"/> characters long from the formatted
            I/O read buffer.  The method also stops reading characters if it encounters a whitespace 
            character or an END.
            </summary>
            <param name="count">The maximium number of characters to include in the string.</param>
            <returns>A string read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadString(System.Text.StringBuilder)">
            <summary>
            Read a string from the formatted I/O read buffer.  The method stops reading characters when 
            it encounters a whitespace character or an END.
            </summary>
            <param name="data">A string read from the instrument.</param>
            <returns>The number of characters returned in the string.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadString(System.Text.StringBuilder,System.Int32)">
            <summary>
            Read a string not more than <paramref name="count"/> characters long from the formatted
            I/O read buffer.  The method also stops reading characters if it encounters a whitespace 
            character or an END.
            </summary>
            <param name="data">A string read from the instrument.</param>
            <param name="count">The maximium number of characters to include in the string.</param>
            <returns>The number of characters returned in the string.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadInt64">
            <summary>
            Read an integer from the formatted I/O read buffer.
            </summary>
            <returns>The integer read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadUInt64">
            <summary>
            Read an unsigned integer from the formatted I/O read buffer.
            </summary>
            <returns>The unsigned integer read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadDouble">
            <summary>
            Read a real number from the formatted I/O read buffer.
            </summary>
            <returns>The real number read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLine">
            <summary>
            Read a string from the formatted I/O read buffer, including all characters through and 
            including the next newline character.
            </summary>
            <returns>The string read from the device.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLine(System.Text.StringBuilder)">
            <summary>
            Read a string from the formatted I/O read buffer, including all characters through and 
            including the next newline character.
            </summary>
            <param name="data">The string read from the device.</param>
            <returns>The number of characters returned in the string.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineChar">
            <summary>
            Read a character from the formatted I/O read buffer, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>The character read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineInt64">
            <summary>
            Read an integer from the formatted I/O read buffer, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>The integer read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineUInt64">
            <summary>
            Read an unsigned integer from the formatted I/O read buffer, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>The unsigned integer read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineDouble">
            <summary>
            Read a real number from the formatted I/O read buffer, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>The real number read from the instrument.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfByte(System.Int64)">
            <summary>
            Read a comma separated list of bytes from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfByte(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of bytes from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfSByte(System.Int64)">
            <summary>
            Read a comma separated list of signed bytes from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of signed bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfSByte(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of signed bytes from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt16(System.Int64)">
            <summary>
            Read a comma separated list of signed 16-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt16(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of signed 16-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt16(System.Int64)">
            <summary>
            Read a comma separated list of unsigned 16-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt16(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of unsigned 16-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt32(System.Int64)">
            <summary>
            Read a comma separated list of signed 32-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt32(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of signed 32-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt32(System.Int64)">
            <summary>
            Read a comma separated list of unsigned 32-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt32(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of unsigned 32-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt64(System.Int64)">
            <summary>
            Read a comma separated list of signed 64-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of signed 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfInt64(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of signed 64-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt64(System.Int64)">
            <summary>
            Read a comma separated list of unsigned 64-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of unsigned 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfUInt64(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of unsigned 64-bit integers from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfSingle(System.Int64)">
            <summary>
            Read a comma separated list of single precision reals from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfSingle(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of single precision reals from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfDouble(System.Int64)">
            <summary>
            Read a comma separated list of double precision reals from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into the return array starting
            at index 0.
            </summary>
            <param name="count">The maximum number of elements to read from the List.</param>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadListOfDouble(System.Double[],System.Int64,System.Int64)">
            <summary>
            Read a comma separated list of double precision reals from the formatted I/O read buffer
            and store a maximum of <paramref name="count"/> elements into <paramref name="data"/>
            starting at <paramref name="index"/>.
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to read from the list.</param>
            <returns>The actual number of elements read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfByte">
            <summary>
            Read a comma separated list of bytes from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfByte(System.Byte[],System.Int64)">
            <summary>
            Read a comma separated list of bytes from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of bytes actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfSByte">
            <summary>
            Read a comma separated list of signed bytes from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of signed bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfSByte(System.SByte[],System.Int64)">
            <summary>
            Read a comma separated list of signed bytes from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of bytes actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt16">
            <summary>
            Read a comma separated list of signed 16-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt16(System.Int16[],System.Int64)">
            <summary>
            Read a comma separated list of signed 16-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt16">
            <summary>
            Read a comma separated list of unsigned 16-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt16(System.UInt16[],System.Int64)">
            <summary>
            Read a comma separated list of unsigned 16-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt32">
            <summary>
            Read a comma separated list of signed 32-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt32(System.Int32[],System.Int64)">
            <summary>
            Read a comma separated list of signed 32-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt32">
            <summary>
            Read a comma separated list of unsigned 32-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt32(System.UInt32[],System.Int64)">
            <summary>
            Read a comma separated list of unsigned 32-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt64">
            <summary>
            Read a comma separated list of signed 64-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of signed 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfInt64(System.Int64[],System.Int64)">
            <summary>
            Read a comma separated list of signed 64-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt64">
            <summary>
            Read a comma separated list of unsigned 64-bit integers from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfUInt64(System.UInt64[],System.Int64)">
            <summary>
            Read a comma separated list of unsigned 64-bit integers from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of integers actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfSingle">
            <summary>
            Read a comma separated list of single precision reals from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfSingle(System.Single[],System.Int64)">
            <summary>
            Read a comma separated list of single precision reals from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of reals actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfDouble">
            <summary>
            Read a comma separated list of double precision reals from the formatted I/O read buffer
            and store them into the return array starting at index 0, then read and discard
            characters up to and including the next newline character.
            </summary>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineListOfDouble(System.Double[],System.Int64)">
            <summary>
            Read a comma separated list of double precision reals from the formatted I/O read buffer
            and store them into <paramref name="data"/> starting at <paramref name="index"/>, then
            read and discard characters up to and including the next newline character.
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of reals actually read from the list.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfByte">
            <summary>
            Read an array of bytes from the formatted I/O read buffer.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfByte(System.Boolean)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfByte(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfByte(System.Byte[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfByte">
            <summary>
            Read an array of bytes from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfByte(System.Boolean)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfByte(System.Byte[],System.Int64)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfByte(System.Byte[],System.Int64,System.Boolean)">
            <summary>
            Read an array of bytes from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSByte">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer.
            </summary>
            <returns>An array of signed bytes</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSByte(System.Boolean)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed bytes</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSByte(System.SByte[],System.Int64,System.Int64)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSByte(System.SByte[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSByte">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of signed bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSByte(System.Boolean)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed bytes.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSByte(System.SByte[],System.Int64)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSByte(System.SByte[],System.Int64,System.Boolean)">
            <summary>
            Read an array of signed bytes from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed bytes allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt16">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt16(System.Boolean)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt16(System.Int16[],System.Int64,System.Int64)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt16(System.Int16[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt16">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt16(System.Boolean)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt16(System.Int16[],System.Int64)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt16(System.Int16[],System.Int64,System.Boolean)">
            <summary>
            Read an array of signed 16-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt16">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt16(System.Boolean)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt16(System.UInt16[],System.Int64,System.Int64)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt16(System.UInt16[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt16">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt16(System.Boolean)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of unsigned 16-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt16(System.UInt16[],System.Int64)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt16(System.UInt16[],System.Int64,System.Boolean)">
            <summary>
            Read an array of unsigned 16-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 16-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt32">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt32(System.Boolean)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt32(System.Int32[],System.Int64,System.Int64)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt32(System.Int32[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt32">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt32(System.Boolean)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of signed 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt32(System.Int32[],System.Int64)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt32(System.Int32[],System.Int64,System.Boolean)">
            <summary>
            Read an array of signed 32-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt32">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt32(System.Boolean)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt32(System.UInt32[],System.Int64,System.Int64)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt32(System.UInt32[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt32">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt32(System.Boolean)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of unsigned 32-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt32(System.UInt32[],System.Int64)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt32(System.UInt32[],System.Int64,System.Boolean)">
            <summary>
            Read an array of unsigned 32-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 32-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt64">
            <summary>
            Read an array of signed 64-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of signed 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfInt64(System.Int64[],System.Int64,System.Int64)">
            <summary>
            Read an array of signed 64-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of signed 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt64">
            <summary>
            Read an array of signed 64-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of signed 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfInt64(System.Int64[],System.Int64)">
            <summary>
            Read an array of signed 64-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of signed 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt64">
            <summary>
            Read an array of unsigned 64-bit integers from the formatted I/O read buffer.
            </summary>
            <returns>An array of unsigned 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfUInt64(System.UInt64[],System.Int64,System.Int64)">
            <summary>
            Read an array of unsigned 64-bit integers from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of unsigned 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt64">
            <summary>
            Read an array of unsigned 64-bit integers from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of unsigned 64-bit integers.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfUInt64(System.UInt64[],System.Int64)">
            <summary>
            Read an array of unsigned 64-bit integers from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of unsigned 64-bit integers allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSingle">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer.
            </summary>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSingle(System.Boolean)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSingle(System.Single[],System.Int64,System.Int64)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfSingle(System.Single[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSingle">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSingle(System.Boolean)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of single precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSingle(System.Single[],System.Int64)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfSingle(System.Single[],System.Int64,System.Boolean)">
            <summary>
            Read an array of single precision reals from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of single precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfDouble">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer.
            </summary>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfDouble(System.Boolean)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfDouble(System.Double[],System.Int64,System.Int64)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadBinaryBlockOfDouble(System.Double[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer and store a maximum
            of <paramref name="count"/> elements into <paramref name="data"/> starting at
            <paramref name="index"/>
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="count">The maximum number of elements to store in the output data array.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfDouble">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfDouble(System.Boolean)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer, then read and discard characters
            up to and including the next newline character.
            </summary>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>An array of double precision reals.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfDouble(System.Double[],System.Int64)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadLineBinaryBlockOfDouble(System.Double[],System.Int64,System.Boolean)">
            <summary>
            Read an array of double precision reals from the formatted I/O read buffer and store the elements
            into <paramref name="data"/> starting at <paramref name="index"/>.  Then read and discard
            characters up to and including the next newline character.
            </summary>
            <param name="data">An array of double precision reals allocated by the calling program.</param>
            <param name="index">The index in the output data array where the first element is stored.</param>
            <param name="seekToBlock">If true and the method is reading an IEEE-488.2 block, it
            initially reads and discards characters until it finds the beginning of an IEEE-488.2
            block.  Otherwise it expects to find the block or array immediately.</param>
            <returns>The actual number of elements stored the output data array.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadWhileMatch(System.String)">
            <summary>
            Read characters from the formatted I/O read buffer until a character not in
            <paramref name="characters"/> is reached.  The first non-matching character  remains in 
            the formatted I/O read buffer.
            </summary>
            <param name="characters">A string that contains the characters to be matched.</param>
            <returns>
            The string read from the buffer.
            </returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadUntilMatch(System.Char)">
            <summary>
            Read characters from the formatted I/O read buffer until the character specified by
            <paramref name="ch"/> is matched.  This method does consume and discard the matching character.
            </summary>
            <param name="ch">A character that ends the string to be read.</param>
            <returns>
            The string read from the buffer.
            </returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadUntilMatch(System.String,System.Boolean)">
            <summary>
            Read characters from the formatted I/O read buffer until one of the
            <paramref name="characters"/> is matched.  
            </summary>
            <param name="characters">A string that contains the characters to be matched to end the
            string.</param>
            <param name="discardMatch">If true, the first character in the read buffer that matches
            a character in <paramref name="characters"/> is consumed and discarded, otherwise it 
            remains in the formatted I/O read buffer.</param>
            <returns>
            The string read from the buffer.
            </returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ReadUntilEnd">
            <summary>
            Read characters from the formatted I/O read buffer until an END is received,
            including the character with the END indicator, treating them as a string.
            For protocols that do not support END, calling this method may result in a 
            timeout or other implementation-specific behavior.
            </summary>
            <returns>
            The string read from the buffer.
            </returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Skip(System.Int64)">
            <summary>
            Discard the specified number of characters from the formatted I/O read buffer.
            </summary>
            <param name="count">The number of characters to be discarded.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.SkipString(System.String)">
            <summary>
            Skip and discard the exact string specified by <paramref name="data"/> from the 
            formatted I/O read buffer.  Multiple whitespace characters in the read buffer may 
            match a single whitespace in the data string.  If <paramref name="data"/> contains
            a % character, the method throws an argument exception.  If <paramref name="data"/>
            does not match the read buffer the method also throws an exception.
            </summary>
            <param name="data">The string to be skipped and discarded from the formatted I/O read 
            buffer.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.SkipUntilEnd">
            <summary>
            Discards the entire formatted I/O read buffer.  If the previous formatted I/O buffer
            did not include an END or termination character, this method reads from the device
            until an END or termination character is encountered and discards the data.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Printf(System.String)">
            <summary>
            Print a string to the formatted I/O write buffer.
            </summary>
            <param name="data">The string literal to be printed.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Printf(System.String,System.Object[])">
            <summary>
            Print formatted output to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">An optional argument list that includes values to be formatted and
            arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfAndFlush(System.String)">
            <summary>
            Print a string to the formatted I/O write buffer, then send the buffer contents
            to the device with a newline character and flush the buffer.
            </summary>
            <param name="data">The string literal to be printed.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfAndFlush(System.String,System.Object[])">
            <summary>
            Print formatted output to the formatted I/O write buffer, then send the buffer contents
            to the device with a newline character and flush the buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">An optional argument list that includes values to be formatted and
            arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Byte*,System.Int64[])">
            <summary>
            Print a formatted array of bytes to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of bytes.</param>
            <param name="pArray">A pointer to an array of bytes.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.SByte*,System.Int64[])">
            <summary>
            Print a formatted array of signed bytes to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed bytes.</param>
            <param name="pArray">A pointer to an array of signed bytes.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Int16*,System.Int64[])">
            <summary>
            Print a formatted array of signed 16-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 16-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 16-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.UInt16*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 16-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 16-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 16-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Int32*,System.Int64[])">
            <summary>
            Print a formatted array of signed 32-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 32-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 32-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.UInt32*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 32-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 32-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 32-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Int64*,System.Int64[])">
            <summary>
            Print a formatted array of signed 64-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 64-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 64-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.UInt64*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 64-bit integers to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 64-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 64-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Single*,System.Int64[])">
            <summary>
            Print a formatted array of single precision reals to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of single precision reals.</param>
            <param name="pArray">A pointer to an array of single precision reals.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArray(System.String,System.Double*,System.Int64[])">
            <summary>
            Print a formatted array of double precision reals to the formatted I/O write buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of double precision reals.</param>
            <param name="pArray">A pointer to an array of double precision reals.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Byte*,System.Int64[])">
            <summary>
            Print a formatted array of bytes to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of bytes.</param>
            <param name="pArray">A pointer to an array of bytes.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.SByte*,System.Int64[])">
            <summary>
            Print a formatted array of signed bytes to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed bytes.</param>
            <param name="pArray">A pointer to an array of signed bytes.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Int16*,System.Int64[])">
            <summary>
            Print a formatted array of signed 16-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 16-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 16-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.UInt16*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 16-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 16-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 16-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Int32*,System.Int64[])">
            <summary>
            Print a formatted array of signed 32-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 32-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 32-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.UInt32*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 32-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 32-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 32-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Int64*,System.Int64[])">
            <summary>
            Print a formatted array of signed 64-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 64-bit integers.</param>
            <param name="pArray">A pointer to an array of signed 64-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.UInt64*,System.Int64[])">
            <summary>
            Print a formatted array of unsigned 64-bit integers to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 64-bit integers.</param>
            <param name="pArray">A pointer to an array of unsigned 64-bit integers.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Single*,System.Int64[])">
            <summary>
            Print a formatted array of single precision reals to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of single precision reals.</param>
            <param name="pArray">A pointer to an array of single precision reals.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.PrintfArrayAndFlush(System.String,System.Double*,System.Int64[])">
            <summary>
            Print a formatted array of double precision reals to the formatted I/O write buffer
            and then send the buffer contents to the device and flush the buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of double precision reals.</param>
            <param name="pArray">A pointer to an array of double precision reals.  Note that this pointer
            argument makes the method unsafe.</param>
            <param name="inputs">An optional argument list that includes arguments that are needed
            to complete the format specifier.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``1(System.String,``0@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output">The first parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``2(System.String,``0@,``1@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``3(System.String,``0@,``1@,``2@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``4(System.String,``0@,``1@,``2@,``3@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``5(System.String,``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``6(System.String,``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
            <param name="output6">The sixth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``7(System.String,``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
            <param name="output6">The sixth parsed value.</param>
            <param name="output7">The seventh parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``1(System.String,System.Int64[],``0@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output">The first parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``2(System.String,System.Int64[],``0@,``1@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``3(System.String,System.Int64[],``0@,``1@,``2@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``4(System.String,System.Int64[],``0@,``1@,``2@,``3@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``5(System.String,System.Int64[],``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``6(System.String,System.Int64[],``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
            <param name="output6">The sixth parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.Scanf``7(System.String,System.Int64[],``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Read and parse formatted data from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
            <param name="output1">The first parsed value.</param>
            <param name="output2">The second parsed value.</param>
            <param name="output3">The third parsed value.</param>
            <param name="output4">The fourth parsed value.</param>
            <param name="output5">The fifth parsed value.</param>
            <param name="output6">The sixth parsed value.</param>
            <param name="output7">The seventh parsed value.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Byte*,System.Int64[])">
            <summary>
            Read and parse an array of bytes from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of bytes.</param>
            <param name="pArray">A pointer to a preallocated byte array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.SByte*,System.Int64[])">
            <summary>
            Read and parse an array of signed bytes from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed bytes.</param>
            <param name="pArray">A pointer to a preallocated signed byte array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Int16*,System.Int64[])">
            <summary>
            Read and parse an array of signed 16-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 16-bit integers.</param>
            <param name="pArray">A pointer to a preallocated signed 16-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.UInt16*,System.Int64[])">
            <summary>
            Read and parse an array of unsigned 16-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 16-bit integers.</param>
            <param name="pArray">A pointer to a preallocated unsigned 16-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Int32*,System.Int64[])">
            <summary>
            Read and parse an array of signed 32-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 32-bit integers.</param>
            <param name="pArray">A pointer to a preallocated signed 32-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.UInt32*,System.Int64[])">
            <summary>
            Read and parse an array of unsigned 32-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 32-bit integers.</param>
            <param name="pArray">A pointer to a preallocated unsigned 32-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Int64*,System.Int64[])">
            <summary>
            Read and parse an array of signed 64-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of signed 64-bit integers.</param>
            <param name="pArray">A pointer to a preallocated signed 64-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.UInt64*,System.Int64[])">
            <summary>
            Read and parse an array of unsigned 64-bit integers from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of unsigned 64-bit integers.</param>
            <param name="pArray">A pointer to a preallocated unsigned 64-bit integer array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Single*,System.Int64[])">
            <summary>
            Read and parse an array of single precision reals from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of single precision reals.</param>
            <param name="pArray">A pointer to a preallocated single precision real array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedFormattedIO.ScanfArray(System.String,System.Double*,System.Int64[])">
            <summary>
            Read and parse an array of double precision reals from the formatted I/O read buffer.
            </summary>
            <param name="format">The format string, which must include a format specifier for a
            raw binary array of double precision reals.</param>
            <param name="pArray">A pointer to a preallocated double precision real array that
            will hold the output data.  Note that this pointer argument makes the method unsafe.</param>
            <param name="inputs">Arguments that are needed to complete format specifiers.</param>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedFormattedIO.ReadBufferSize">
            <summary>
            The size of the formatted I/O read buffer.  This controls only the formatted I/O read
            buffer (the in-memory buffer used for storing data from the instrument before parsing
            it), not any kernel-mode device I/O buffers.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedFormattedIO.WriteBufferSize">
            <summary>
            The size of the formatted I/O write buffer.  This controls only the formatted I/O write
            buffer (the in-memory buffer used for storing data to the instrument after formatting
            it), not any kernel-mode device I/O buffers.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedFormattedIO.BinaryEncoding">
            <summary>
            The binary encoding used by formatted I/O WriteBinaryBlock and ReadBinaryBlock methods
            to determine the array format.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedFormattedIO.TypeFormatter">
            <summary>
            A reference to an object that formats object values into a string equivalent (for
            Printf) and vice versa (for Scanf).  This property must be set before the call to Printf
            or Scanf that expects to use it.
            </summary>
        </member>
        <member name="M:Ivi.Visa.FormattedIO.MessageBasedFormattedIO.#ctor(Ivi.Visa.IMessageBasedSession)">
            <summary>
            Create an instance of the MessageBasedFormattedIO class which will delegate actual reads 
            to and writes from the instrument to the raw I/O capabilities of the specified session 
            object.
            </summary>
            <param name="session">The session object to which actual reads to and writes from the 
            instrument are delegated.</param>
        </member>
        <member name="M:Ivi.Visa.MessageBasedReaderWriter.SetReadBufferContents(System.String,System.Boolean)">
            <summary>
            This method if for unit testing purposes only.
            </summary>
        </member>
        <member name="M:Ivi.Visa.MessageBasedReaderWriter.SetReadBufferContents(System.Byte[],System.Boolean)">
            <summary>
            This method if for unit testing purposes only.
            </summary>
        </member>
        <member name="M:Ivi.Visa.MessageBasedReaderWriter.DoUnitTestSleep">
            <summary>
            This method if for unit testing purposes only.
            </summary>
        </member>
        <member name="P:Ivi.Visa.MessageBasedReaderWriter.UnitTestSleepInterval">
            <summary>
            This property if for unit testing purposes only.
            </summary>
        </member>
        <member name="T:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.InvalidFormatSpecifier">
            <summary>
              Looks up a localized string similar to The format specifier &apos;{0}&apos; is invalid..
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.InvalidSizeModifier">
            <summary>
              Looks up a localized string similar to The size modifier &apos;{0}&apos; is not valid for type code %&apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.TooManyFormatSpecifiers">
            <summary>
              Looks up a localized string similar to Multiple format specifiers found in string &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.UnrecognizedFormatSpecifierTypeCode">
             <summary>
               Looks up a localized string similar to Internal error. 
            The format specifier &apos;{0}&apos; is not recognized..
             </summary>
        </member>
        <member name="P:Ivi.Visa.FormattedIO.Parser.FormatStringParserErrors.UnrecognizedFormatStringTokenType">
             <summary>
               Looks up a localized string similar to Internal error. 
            The format string token type &apos;{0}&apos; is not recognized..
             </summary>
        </member>
        <member name="T:Ivi.Visa.INativeVisaEventArgs">
            <summary>
            Provides additional data about an event fired from an underlying native C event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaEventArgs.GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the native C implementation.
            </summary>
            <param name="attribute">A constant that identifies a VISA standard or vendor-defined
            attribute.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="P:Ivi.Visa.INativeVisaEventArgs.EventArgs">
            <summary>
            An event args reference for the native C event.  This may reference an object that
            derives from EventArgs, if the event handler for the event specified by the
            EventArg.EventType of EventArg.CustomEventType properties uses a derived class.
            </summary>
        </member>
        <member name="T:Ivi.Visa.INativeVisaSession">
            <summary>
            INativeVisaSession allows access to vendor-specific VISA C attributes and events.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IVisaSession">
            <summary>
            IVisaSession is the base interface for VISA.NET I/O resources.  It support capabilities
            for all resource types, specifically the lifetime management, locking, and identification.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.LockResource">
            <summary>
            Locks the resource for this session with an exclusive lock, with an infinite timeout.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.LockResource(System.TimeSpan)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeput period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.LockResource(System.Int32)">
            <summary>
            Locks the resource for this session with an exclusive lock, with the specified
            timeput period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.LockResource(System.TimeSpan,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeput period.
            </summary>
            <param name="timeout">The timeout period for obtaining the lock.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>Then name of the key that was granted.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.LockResource(System.Int32,System.String)">
            <summary>
            Locks the resource for this session with a shared lock, with the specified
            timeput period.
            </summary>
            <param name="timeoutMilliseconds">The timeout period for obtaining the lock.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="sharedKey">The name of the requested key.</param>
            <returns>Then name of the key that was granted.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.UnlockResource">
            <summary>
            Unlock the resource.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.EnableEvent(Ivi.Visa.EventType)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType"/>
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.</param>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.DisableEvent(Ivi.Visa.EventType)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType"/>
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.</param>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.DiscardEvents(Ivi.Visa.EventType)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType"/>
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.</param>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="M:Ivi.Visa.IVisaSession.WaitOnEvent(Ivi.Visa.EventType,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.</returns>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.EventQueueCapacity">
            <summary>
            The capacity of the event queue - the maximum number of pending events.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.HardwareInterfaceName">
            <summary>
            Human readable text that describes the hardware interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.HardwareInterfaceNumber">
            <summary>
            The board number of the hardware interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.HardwareInterfaceType">
            <summary>
            Specifies the hardware interface type (GPIB, ASRL, etc.).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceClass">
            <summary>
            The class of resource for this session (INSTR, INTFC, etc.).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceLockState">
            <summary>
            The current lock state of the resource for this session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceManufacturerId">
            <summary>
            The IVI identification number of the software vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceManufacturerName">
            <summary>
            The name of the software vendor that corresponds to the ResourceManufacturerId property.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceName">
            <summary>
            The VISA resource name of the currently open resource. This name is the canonical version
            of the resource name and therefore may vary from the resource descriptor used to 
            open/initialize the resource.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.ResourceSpecificationVersion">
            <summary>
            The version of the VISA.NET specification that describes the functionality provided by this 
            session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.SynchronizeCallbacks">
            <summary>
            Specifies whether callbacks must be performed in a specific synchronization context.  
            If false, the implementation is allowed to execute callbacks in any context.
            The default value is true.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaSession.TimeoutMilliseconds">
            <summary>
            The I/O timeout in milliseconds for I/O communication on this resource session.  If the
            timeout is VisaConstants.ImmediateTimeout (0), operations will never wait for the device to respond. If the timeout
            is VisaConstants.InfiniteTimeout (-1), I/O communication will not timeout.
            </summary>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.EnableEvent(System.Int32)">
            <summary>
            Enables a client to receive events of the type specified by the <paramref name="eventType"/>
            argument using a WaitOnEvent method.
            </summary>
            <param name="eventType">The event type to enable.  This may be a custom event type.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.DisableEvent(System.Int32)">
            <summary>
            Disables a client from receiving events of type(s) specified by the <paramref name="eventType"/>
            argument.
            </summary>
            <param name="eventType">The event type(s) to disable.  This may be a custom event type.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.DiscardEvents(System.Int32)">
            <summary>
            Discard all pending events of type(s) specified by the <paramref name="eventType"/>
            argument.
            </summary>
            <param name="eventType">The event type(s) for which events are discarded.  This may be a custom 
            event type.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32,System.Int32)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amount of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32,System.TimeSpan)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32,System.Int32,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <param name="timeoutMilliseconds">The maximum amout of time to wait for the event, in milliseconds.  If the
            timeout is VisaConstants.ImmediateTimeout (0), the operation will not block. If the timeout
            is VisaConstants.InfiniteTimeout (-1), the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.WaitOnEvent(System.Int32,System.TimeSpan,Ivi.Visa.EventQueueStatus@)">
            <summary>
            Wait for events of type(s) specified by the <paramref name="eventType"/> argument.
            </summary>
            <param name="eventType">The event type(s) for which the method will wait.  This may be a custom 
            event type.</param>
            <param name="timeout">The maximum amount of time to wait for the event.  If the
            timeout is TimeSpan.Zero, the operation will not block. If the timeout
            is TimeSpan.MaxValue, the operation will not timeout.</param>
            <param name="status">The current state of the event queue when the method returns.</param>
            <returns>Event identification and status information.  Clients must dispose the returned object 
            when it is no longer needed.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeByte(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeByte(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt16(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt16(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt32(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt32(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt64(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeInt64(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeBoolean(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeBoolean(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeString(Ivi.Visa.NativeVisaAttribute)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.GetAttributeString(System.Int32)">
            <summary>
            Retrieve the value of the specified attribute from the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <returns>The value of the specified attribute.</returns>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeByte(Ivi.Visa.NativeVisaAttribute,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeByte(System.Int32,System.Byte)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViByte attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt16(Ivi.Visa.NativeVisaAttribute,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt16(System.Int32,System.Int16)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt16 or ViUInt16 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt32(Ivi.Visa.NativeVisaAttribute,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt32(System.Int32,System.Int32)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt32 or ViUInt32 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt64(Ivi.Visa.NativeVisaAttribute,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeInt64(System.Int32,System.Int64)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViInt64 or ViUInt64 attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeBoolean(Ivi.Visa.NativeVisaAttribute,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeBoolean(System.Int32,System.Boolean)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViBoolean attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeString(Ivi.Visa.NativeVisaAttribute,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="M:Ivi.Visa.INativeVisaSession.SetAttributeString(System.Int32,System.String)">
            <summary>
            Set the value of the specified attribute in the underlying VISA C implementation.
            </summary>
            <param name="attribute">A VISA C ViString or ViRsrc attribute ID.</param>
            <param name="value">The value to which the attribute will be set.</param>
        </member>
        <member name="P:Ivi.Visa.INativeVisaSession.Handle">
            <summary>
            The ID for this session in the underlying VISA C implementation.
            </summary>
        </member>
        <member name="T:Ivi.Visa.GpibInstrumentRemoteLocalMode">
            <summary>
            Indicates the action to be taken by the SendRemoteLocalCommand of a GPIB INSTR
            session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.DeassertRen">
            <summary>
            Deassert the REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.AssertRen">
            <summary>
            Assert the REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.GoToLocalDeassertRen">
            <summary>
            Send the GTL (Go To Local) command to the device and
            deassert the REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.AddressDeviceAssertRen">
            <summary>
            Assert the REN (Remote ENable) interface line and
            address the device.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.AddressDeviceSendLocalLockout">
            <summary>
            Address the device and send it an LLO (Local Lockout)
            command, putting it in RWLS (Remote With Lockout State).
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInstrumentRemoteLocalMode.GoToLocal">
            <summary>
            Send the GTL (Go To Local) command to the device.
            </summary>
        </member>
        <member name="T:Ivi.Visa.GpibInterfaceRemoteLocalMode">
            <summary>
            Indicates the action to be taken by the SendRemoteLocalCommand of a GPIB INTFC
            session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInterfaceRemoteLocalMode.DeassertRen">
            <summary>
            Deassert the REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInterfaceRemoteLocalMode.AssertRen">
            <summary>
            Assert the REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibInterfaceRemoteLocalMode.LocalLockoutAssertRen">
            <summary>
            Assert REN (Remote ENable) and send LLO (Local LockOut) to any devices that are
            addressed to listen.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.SrmDictionary.Dispose">
            <summary>
            Disposes an instance of the SrmDictionary class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ConflictManager.Internal.SrmDictionary.Dispose(System.Boolean)">
            <summary>
            Disposes an instance of the SrmDictionary class.
            </summary>
            <param name="disposing">True if the managed resources should be released; false
            if only the unmanaged resources should be released. </param>
        </member>
        <member name="T:Ivi.Visa.IOTimeoutException">
            <summary>
            A VISA.NET I/O timeout has occured.
            </summary>
            <remarks>
            <para>This exception is only used for specific I/O methods where a calling program
            might be able to reasonably recover in some circumstances.  The VISA.NET
            specification identifies the methods that throw this exception if the I/O operation
            times out.</para>
            <para>If the VISA.NET specfication does not specify that this exception may be
            thrown by a particular method, calling programs should expect a different timeout
            exception.</para>
            </remarks>
        </member>
        <member name="T:Ivi.Visa.VisaException">
            <summary>
            VISA.NET has encountered an error.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VisaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaException" /> class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VisaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaException" /> class
            with the specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Visa.VisaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaException" /> class
            with the specified message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.VisaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Ivi.Visa.IOTimeoutException.#ctor(System.Int64,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.IOTimeoutException" /> class
            with the specified value for the actual number of elements read or written.
            </summary>
            <param name="actualCount">The actual number of elements read or written before the
            timeout occurred.  A value of -1 indicates that the actual number could not be
            determined.</param>
            <param name="actualData">The actual bytes read or written before the timeout 
            occurred.  If the actual number of elements read could not be determined, the
            array is empty.</param>
        </member>
        <member name="M:Ivi.Visa.IOTimeoutException.#ctor(System.Int64,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.IOTimeoutException" /> class
            with the specified value for the actual number of elements read or written and the
            specified message.
            </summary>
            <param name="actualCount">The actual number of elements read or written before the
            timeout occurred.  A value of -1 indicates that the actual number could not be
            determined.</param>
            <param name="actualData">The actual bytes read or written before the timeout 
            occurred.  If the actual number of elements read could not be determined, the
            array is empty.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Visa.IOTimeoutException.#ctor(System.Int64,System.Byte[],System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.IOTimeoutException" /> class
            with the specified value for the actual number of elements read or written, the
            specified message, and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="actualCount">The actual number of elements read or written before the
            timeout occurred.  A value of -1 indicates that the actual number could not be
            determined.</param>
            <param name="actualData">The actual bytes read or written before the timeout 
            occurred.  If the actual number of elements read could not be determined, the
            array is empty.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.IOTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.IOTimeoutException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Ivi.Visa.IOTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IOTimeoutException.ActualCount">
            <summary>
            The actual number of elements read or written before the timeout occurred.  A
            value of -1 indicates that the actual number could not be determined.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IOTimeoutException.ActualData">
            <summary>
            The actual bytes read or written before the timeout occurred.  If the actual 
            number of elements read could not be determined, the array is empty.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ParseResult">
            <summary>
            The detailed information derived when VISA.NET parses a resource descriptor.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ParseResult.#ctor(System.String,Ivi.Visa.HardwareInterfaceType,System.Int16,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the ParseResult class from the supplied information.
            </summary>
            <param name="originalResourceName">The original resource name.</param>
            <param name="interfaceType">The interface type of the resource.</param>
            <param name="interfaceNumber">The interface number of the resource.</param>
            <param name="resourceClass">The session type of the resource.</param>
            <param name="expandedUnaliasedName">The expanded version of the given resource string.
            The format should be similar to the VISA-defined canonical resource name.</param>
            <param name="aliasIfExists">Specifies the user-defined alias for the given resource
            string, if a VISA implementation allows aliases and an alias exists for the given 
            resource string.</param>
        </member>
        <member name="M:Ivi.Visa.ParseResult.#ctor">
            <summary>
            Creates an instance of the ParseResult class with all fields equal to -1, the empty string, or 
            default values.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ParseResult.op_Equality(Ivi.Visa.ParseResult,Ivi.Visa.ParseResult)">
            <summary>
            Returns True iff the two ParseResult objects are equivalent.
            Two ParseResult objects are equivalent if the ExpandedUnaliasedName for
            the two objects have the same value with their case ignored.
            </summary>
            <param name="parse1">The first ParseResult</param>
            <param name="parse2">The second ParseResult</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ParseResult.op_Inequality(Ivi.Visa.ParseResult,Ivi.Visa.ParseResult)">
            <summary>
            Returns True iff the two ParseResult objects are not equivalent.
            Two ParseResult objects are equivalent if the ExpandedUnaliasedName for
            the two objects have the same value with their case ignored.
            </summary>
            <param name="parse1">The first ParseResult</param>
            <param name="parse2">The second ParseResult</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ParseResult.Equals(System.Object)">
            <summary>
            Returns True iff the given object o is a ParseResult object equivalent to this object.
            Two ParseResult objects are equivalent if the ExpandedUnaliasedName for
            the two objects have the same value with their case ignored.
            </summary>
            <param name="o">The Object o to compare with</param>
            <returns></returns>
        </member>
        <member name="M:Ivi.Visa.ParseResult.GetHashCode">
            <summary>
            Returns a suitable Hash Code for this object. The Hash Code for two objects
            that are Equal must be the same. The Hash Code shouldn't change over the
            life of the object.
            </summary>
            <returns>The computed Hash Code</returns>
        </member>
        <member name="M:Ivi.Visa.ParseResult.Equals(Ivi.Visa.ParseResult)">
            <summary>
            Returns True iff the given ParseResult object is equivalent to this object
            Two ParseResult objects are equivalent if the ExpandedUnaliasedName for
            the two objects have the same value with their case ignored.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Ivi.Visa.ParseResult.OriginalResourceName">
            <summary>
            The original VISA resource name from which this set of parse results was created.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ParseResult.InterfaceType">
            <summary>
            The interface type of the resource.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ParseResult.InterfaceNumber">
            <summary>
            The interface number of the resource.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ParseResult.ResourceClass">
            <summary>
            The session type of the resource.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ParseResult.ExpandedUnaliasedName">
            <summary>
            The expanded version of the given resource string.
            The format should be similar to the VISA-defined canonical resource name.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ParseResult.AliasIfExists">
            <summary>
            Specifies the user-defined alias for the given resourcestring, if a VISA implementation 
            allows aliases and an alias exists for the given resource string.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ResourceOpenStatus">
            <summary>
            Indicates the success status of an open operation.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceOpenStatus.Unknown">
            <summary>
            This value is used for an initial state, but will never be returned for a successful open operation.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceOpenStatus.Success">
            <summary>
            The session opened successfully.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceOpenStatus.DeviceNotResponding">
            <summary>
            The session opened successfully, but the device at the specified
            address did not respond.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceOpenStatus.ConfigurationNotLoaded">
            <summary>
            The session opened successfully, but the specified configuration
            either does not exist or could not be loaded.  The session will use VISA-specified
            defaults.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ReadStatus">
            <summary>
            Indicates the success status of a raw I/O read operation.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ReadStatus.Unknown">
            <summary>
            This value is used for an initial state, but will never be returned for a successful read operation.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ReadStatus.EndReceived">
            <summary>
            An END was received at the end of the read operation.
            This condition has the highest priority and is reported regardless of which of the other success conditions
            might also have occurred.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ReadStatus.TerminationCharacterEncountered">
            <summary>
            A termination character was received at the end of the read operation.
            This condition is reported even if the read operation also read the specified number
            of bytes.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ReadStatus.MaximumCountReached">
            <summary>
            The specified number of bytes was returned by the read operation.  This condition has the lowest priority.
            There may or may not be more data available to be read.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ResourceLockState">
            <summary>
            Indicates the state of the VISA lock on the resource associated with this session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceLockState.NoLock">
            <summary>
            The resource is not locked.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceLockState.ExclusiveLock">
            <summary>
            The resource is locked with an exclusive lock.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ResourceLockState.SharedLock">
            <summary>
            The resource is locked with a shared lock.
            </summary>
        </member>
        <member name="T:Ivi.Visa.StatusByteFlags">
            <summary>
            Indicates the individual bits of the IEEE 488.2 Status Byte.  Multiple bits may be specified.
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.User0">
            <summary>
            User defined bit 0.
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.User1">
            <summary>
            User defined bit 1.
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.User2">
            <summary>
            User defined bit 2.
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.User3">
            <summary>
            User defined bit 3.
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.MessageAvailable">
            <summary>
            Message Available (bit 4).
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.EventStatusRegister">
            <summary>
            Event Status Register (bit 5).
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.RequestingService">
            <summary>
            Requesting Service (bit 6).
            </summary>
        </member>
        <member name="F:Ivi.Visa.StatusByteFlags.User7">
            <summary>
            User defined bit 7.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IMessageBasedRawIO">
            <summary>
            The IMessageBasedRawIO interface includes methods that read and write data to/from a device
            without trying to format or parse it.  It also is capable of performing asynchronous I/O
            reads and writes with a flexible set of mechanisms for notifying the calling program that
            the asynchronous I/O operation is complete.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Read">
            <summary>
            Read bytes until an END indicator or termination character is reached.
            </summary>
            <returns>An array of the bytes read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Read(System.Int64)">
            <summary>
            Read <paramref name="count"/> bytes, or until an END indicator or termination character 
            is reached, whichever comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>An array of the bytes read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Read(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes, or until an END indicator or termination character 
            is reached, whichever comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END indicator or termination 
            character terminated the read operation.</param>
            <returns>An array of the bytes read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Read(System.Byte[],System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until an END indicator or termination character is reached, 
            whichever comes first.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END indicator or termination 
            character terminated the read operation.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Read(System.Byte*,System.Int64,System.Int64,System.Int64@,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> bytes into the <paramref name="buffer"/> buffer, starting
            at <paramref name="index"/>, or until an END indicator or termination character is reached, 
            whichever comes first.
            </summary>
            <param name="buffer">A reference to an array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="actualCount">The actual count of bytes stored in <paramref name="buffer"/>
            during the read operation.</param>
            <param name="readStatus">A status that indicates whether an END indicator or termination 
            character terminated the read operation.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.ReadString">
            <summary>
            Read characters into the return string until an END indicator or termination character is 
            reached.
            </summary>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.ReadString(System.Int64)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until an END indicator or 
            termination character is reached, whichever comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.ReadString(System.Int64,Ivi.Visa.ReadStatus@)">
            <summary>
            Read <paramref name="count"/> characters into the return string, or until an END indicator or 
            termination character is reached, whichever comes first.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="readStatus">A status that indicates whether an END indicator or termination 
            character terminated the read operation.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Write(System.Byte[])">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The bytes to be written.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Write(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Write(System.Byte*,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device, starting
            at <paramref name="index"/>.
            </summary>
            <param name="buffer">A reference to the bytes to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Write(System.String)">
            <summary>
            Write <paramref name="buffer"/> to the device.
            </summary>
            <param name="buffer">The string to be written.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.Write(System.String,System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> characters from <paramref name="buffer"/> to the device,
            starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The string to be written.</param>
            <param name="index">The index at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.String)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.String,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.String,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[])">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[],System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write the <paramref name="buffer"/> to the device asynchronously.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginWrite(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Write <paramref name="count"/> bytes from <paramref name="buffer"/> to the device
            asynchronously, starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">The bytes to be written to the device.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.EndWrite(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous write operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes written during the write operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Int32)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Int32,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Int32,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read <paramref name="count"/> bytes asynchronously and store them in the Async Results
            <see cref="P:Ivi.Visa.IVisaAsyncResult.Buffer">Buffer</see>/>.  When done, notify the
            calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[])">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[],System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[],System.Int64,System.Int64,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>. 
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[],Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store them in <paramref name="buffer"/> until it is full.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.BeginRead(System.Byte[],System.Int64,System.Int64,Ivi.Visa.VisaAsyncCallback,System.Object)">
            <summary>
            Read bytes asynchronously and store a maximum of <paramref name="count"/> elements into
            <paramref name="buffer"/> starting at <paramref name="index"/>.
            When done, notify the calling program via the <paramref name="callback"/> provided.
            </summary>
            <param name="buffer">An array of bytes allocated by the calling program.</param>
            <param name="index">The index in <paramref name="buffer"/> to begin storing bytes</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The method to call when the operation is complete.</param>
            <param name="state">Information about the state of this particular asynchronous operation
            that is attached to the Async Results.</param>
            <returns>Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.EndRead(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The number of bytes read during the read operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.EndReadString(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Clean up resources created and used as part of the asynchronous read operation and
            return the string that was read.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
            <returns>The string read during the read operation.</returns>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedRawIO.AbortAsyncOperation(Ivi.Visa.IVisaAsyncResult)">
            <summary>
            Requests the session to terminate normal execution of an asynchronous read or write 
            operation.
            </summary>
            <param name="result">Information about the progress and results of the asynchronous
            operation that is specific to, and identifies, that particular operation.</param>
        </member>
        <member name="T:Ivi.Visa.IOBuffers">
            <summary>
            Indicates buffer(s) in the low-level I/O interface.  These are not the buffers
            used for formatted I/O.  Multiple buffers may be specified.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOBuffers.Read">
            <summary>
            The read (input) buffer.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOBuffers.Write">
            <summary>
            The write (output) buffer.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOBuffers.ReadWrite">
            <summary>
            Both the read (input) and the write (output) buffers.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IMemoryMap">
            <summary>
            IMemoryMap is the interface that exposes memory mapped operations for register based
            sessions.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Peek8(System.Int64)">
            <summary>
            Read a byte from <paramref name="offset"/>.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The byte that was read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Peek16(System.Int64)">
            <summary>
            Read a 16-bit integer from <paramref name="offset"/>.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 16-bit integer that was read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Peek32(System.Int64)">
            <summary>
            Read a 32-bit integer from <paramref name="offset"/>.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 32-bit integer that was read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Peek64(System.Int64)">
            <summary>
            Read a 64-bit integer from <paramref name="offset"/>.
            </summary>
            <param name="offset">Specifies the source offset of the value to be read.</param>
            <returns>The 64-bit integer that was read.</returns>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Poke8(System.Int64,System.Byte)">
            <summary>
            Write a byte value to <paramref name="offset"/>.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The byte that is written.</param>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Poke16(System.Int64,System.Int16)">
            <summary>
            Write a 16-bit integer value to <paramref name="offset"/>.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 16-bit integer that is written.</param>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Poke32(System.Int64,System.Int32)">
            <summary>
            Write a 32-bit integer value to <paramref name="offset"/>.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 32-bit integer that is written.</param>
        </member>
        <member name="M:Ivi.Visa.IMemoryMap.Poke64(System.Int64,System.Int64)">
            <summary>
            Write a 64-bit integer value to <paramref name="offset"/>.
            </summary>
            <param name="offset">>Specifies the destination offset to which the value is written.</param>
            <param name="value">The 64-bit integer that is written.</param>
        </member>
        <member name="P:Ivi.Visa.IMemoryMap.AddressSpace">
            <summary>
            The address space that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMemoryMap.BaseAddress">
            <summary>
            The starting address of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace"/>
            that is currently mapped to this session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMemoryMap.Size">
            <summary>
            The size of the memory <see cref="P:Ivi.Visa.IMemoryMap.AddressSpace"/>
            that is currently mapped to this session, starting at the
            <see cref="P:Ivi.Visa.IMemoryMap.BaseAddress"/>
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMemoryMap.VirtualAddress">
            <summary>
            Returns IntPtr.Zero if the window is only accessible through the operations provided
            on this interface.  A return value other than IntPtr.Zero indicates you can dereference
            the mapped address as a pointer.
            </summary>
        </member>
        <member name="T:Ivi.Visa.RemoteLocalMode">
            <summary>
            Specifies the local or remote mode into which to place the GPIB, TCPIP, or USB
            instrument.
            </summary>
        </member>
        <member name="F:Ivi.Visa.RemoteLocalMode.LocalWithoutLockout">
            Send the GTL (Go To Local) command and deassert the REN (Remote ENable)
            interface line, putting it in LOCS (LOCal State).
        </member>
        <member name="F:Ivi.Visa.RemoteLocalMode.Remote">
            <summary>
            Assert the REN (Remote ENable) interface line and address the device.  
            The instrument will go into either REMS (REMote State) or RWLS (Remote With 
            Lockout State).
            </summary>
        </member>
        <member name="F:Ivi.Visa.RemoteLocalMode.RemoteWithLocalLockout">
            <summary>
            Address the device and send it an LLO (Local LockOut) 
            command, putting it in the RWLS (Remote With Lockout State).
            </summary>
        </member>
        <member name="F:Ivi.Visa.RemoteLocalMode.Local">
            Send the GTL (Go To Local) command.  The instrument will go into either 
            LOCS (LOCal State) or LWLS (Local With Lockout State).
        </member>
        <member name="T:Ivi.Visa.TypeFormatterException">
            <summary>
            The type formatter has encountered an error while trying to format or parse an enumeration
            value.
            </summary>
            <remarks>
            This exception should only be thrown by implementations of the VISA.NET ITypeFormatter
            interface.
            </remarks>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class.
            </summary>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the type which caused the type formatter error.
            </summary>
            <param name="type">The type which caused the type formatter error.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the type which caused the type formatter error and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="type">The type which caused the type formatter error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the type and instrument response which caused the type formatter error.
            </summary>
            <param name="type">The type which caused the type formatter error.</param>
            <param name="instrumentResponse">The instrument response which caused the type formatter
            error.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the type and instrument response which caused the type formatter error, and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="type">The type which caused the type formatter error.</param>
            <param name="instrumentResponse">The instrument response which caused the type formatter
            error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the object which caused the type formatter error.
            </summary>
            <param name="obj">The object which caused the type formatter error.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with the object which caused the type formatter error, and a reference to the inner
            exception that is the cause of this exception.
            </summary>
            <param name="obj">The object which caused the type formatter error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with specified message and the object(s) which caused the type formatter error.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="args">The object(s) which caused the type formatter error.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException" /> class
            with specified message and the object(s) which caused the type formatter error, and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="args">The object(s) which caused the type formatter error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.TypeFormatterException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Ivi.Visa.TypeFormatterException.FormatMessage(System.Type,System.String)">
            <summary>
            A custom message returned by this exception, formatted from type and instrument response.
            </summary>
        </member>
        <member name="P:Ivi.Visa.TypeFormatterException.Message">
            <summary>
            The message returned by this exception.
            </summary>
        </member>
        <member name="T:Ivi.Visa.GpibControllerInChargeEventArgs">
            <summary>
            Provides additional data about a Gpib controller in charge (CIC) event.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VisaEventArgs">
            <summary>
            Provides additional data about a VISA event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VisaEventArgs.#ctor(Ivi.Visa.EventType)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaEventArgs" /> class.
            </summary>
            <param name="eventType">A VISA.NET standard event type.</param>
        </member>
        <member name="M:Ivi.Visa.VisaEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VisaEventArgs" /> class.
            </summary>
            <param name="customType">A value that uniquely identifies an implementation-specific
            event type.</param>
        </member>
        <member name="P:Ivi.Visa.VisaEventArgs.EventType">
            <summary>
            The VISA.NET standard event type.
            </summary>
        </member>
        <member name="P:Ivi.Visa.VisaEventArgs.CustomEventType">
            <summary>
            A value that uniquely identifies an implementation-specific event type.
            </summary>
        </member>
        <member name="M:Ivi.Visa.GpibControllerInChargeEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.GpibControllerInChargeEventArgs" /> class.
            </summary>
            <param name="isControllerInCharge">True if the controller for the GPIB interface is
            in charge.</param>
        </member>
        <member name="P:Ivi.Visa.GpibControllerInChargeEventArgs.IsControllerInCharge">
            <summary>
            True if the controller for the GPIB interface is in charge.
            </summary>
        </member>
        <member name="T:Ivi.Visa.SerialTerminationMethod">
            <summary>
            Indicates the method used to terminate Serial read and write operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialTerminationMethod.None">
            <summary>
            Indicates that reads will not terminate until all of the requested data is
            received (or an error occurs), and that writes will not append anything to
            the data being written.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialTerminationMethod.HighestBit">
            <summary>
            Indicates that reads will terminate as soon as a character arrives with its
            highest bit set, and writes will send all but the last character with the
            highest bit clear, then transmit the last character with the highest bit set.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialTerminationMethod.TerminationCharacter">
            <summary>
            Indicates that reads will terminate as soon as the current termination
            character has been received, and writes will send the current termination
            character after the last character has been sent.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialTerminationMethod.Break">
            <summary>
            Indicates that writes will transmit a break after the last character has
            been sent.  Not valid for reads.
            </summary>
        </member>
        <member name="T:Ivi.Visa.TriggerLines">
            <summary>
            Indicates VXI or PXI trigger lines.  Multiple trigger lines may be specified.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl0">
            <summary>
            The VXI ECL0 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl1">
            <summary>
            The VXI ECL1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl2">
            <summary>
            The VXI ECL2 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl3">
            <summary>
            The VXI ECL3 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl4">
            <summary>
            The VXI ECL4 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ecl5">
            <summary>
            The VXI ECL5 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.PanelIn">
            <summary>
            The VXI Panel In trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.PanelOut">
            <summary>
            The VXI Panel Out trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarInstrument">
            <summary>
            The VXI Panel In trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot1">
            <summary>
            The VXI Star slot 1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot2">
            <summary>
            The VXI Star slot 2 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot3">
            <summary>
            The VXI Star slot 3 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot4">
            <summary>
            The VXI Star slot 4 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot5">
            <summary>
            The VXI Star slot 5 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot6">
            <summary>
            The VXI Star slot 6 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot7">
            <summary>
            The VXI Star slot 7 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot8">
            <summary>
            The VXI Star slot 8 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot9">
            <summary>
            The VXI Star slot 9 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot10">
            <summary>
            The VXI Star slot 10 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot11">
            <summary>
            The VXI Star slot 11 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarSlot12">
            <summary>
            The VXI Star slot 12 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarVxi0">
            <summary>
            The VXI Star 0 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarVxi1">
            <summary>
            The VXI Star 1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.StarVxi2">
            <summary>
            The VXI Star 2 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl0">
            <summary>
            The TTL0 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl1">
            <summary>
            The TTL1 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl2">
            <summary>
            The TTL2 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl3">
            <summary>
            The TTL3 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl4">
            <summary>
            The TTL4 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl5">
            <summary>
            The TTL5 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl6">
            <summary>
            The TTL6 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLines.Ttl7">
            <summary>
            The TTL7 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="T:Ivi.Visa.UsbInterruptEventArgs">
            <summary>
            Provides additional data about a USB interrupt event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.UsbInterruptEventArgs.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.UsbInterruptEventArgs" /> class.
            </summary>
            <param name="exceededMaximumSize">True if the data size exceeded the maximum size
            allowed by the USB interface.</param>
            <param name="data">The data that was being transferred over the USB bus when the
            interrupt occurred, no longer than the expected maximum size.</param>
        </member>
        <member name="P:Ivi.Visa.UsbInterruptEventArgs.ExceededMaximumSize">
            <summary>
            Indicates whether the data size exceeded the maximum size allowed by the USB interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.UsbInterruptEventArgs.Data">
            <summary>
            The data being transferred over the USB bus when the interrupt occurred, no longer
            than the expected maximum size.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IMessageBasedSession">
            <summary>
            IMessageBasedSession is the base interface for VISA.NET message-based resources.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedSession.AssertTrigger">
            <summary>
            Asserts a software or hardware trigger dependent on the interface type.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedSession.Clear">
            <summary>
            Performs an IEEE 488.1-style clear of the device and clears the input and 
            output buffer (both raw and formatted I/O buffers).  It also may terminate 
            pending operations on the device.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IMessageBasedSession.ReadStatusByte">
            <summary>
            Reads the status from the device.  For 488.2 instruments, this is the 
            488.2 status byte.
            </summary>
            <returns>A value that indicates which status byte bits are set.</returns>
        </member>
        <member name="E:Ivi.Visa.IMessageBasedSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the device.
            </summary>
            <remarks>
            When this event is received, client code should call ReadStatusByte.
            </remarks>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.  In some cases you 
            may not be able to change the protocol, so reading this property value may not return 
            the same value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.TerminationCharacterEnabled">
            <summary>
            If true, reads end when a termination character is received.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.FormattedIO">
            <summary>
            A reference to the formatted I/O interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IMessageBasedSession.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IPxiBackplaneSession">
            <summary>
            The session interface for a PXI backplane.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.ReserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a single trigger line that the caller can then map and/or assert.
            </summary>
            <param name="bus">The trigger bus segment in which to reserve the trigger.</param>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.ReserveTriggers(System.Int16[],Ivi.Visa.TriggerLine[])">
            <summary>
            Reserve multiple trigger lines that the caller can then map and/or assert.  This 
            method will succeed only if it can reserve all of the bus/line pairs.  If any of 
            the bus/line pairs cannot be reserved, this method will not reserve any of them.  
            Note that the <paramref name="buses"/> and <paramref name="lines"/> arrays are 
            parallel: the lengths must be the same, and buses[n] corresponds to lines[n].
            </summary>
            <param name="buses">The trigger bus segments in which to reserve the triggers.</param>
            <param name="lines">The trigger lines to reserve.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.UnreserveTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a single trigger line that the caller previously reserved.
            </summary>
            <param name="bus">The trigger bus segment in which to unreserve the trigger.</param>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.MapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">Indicates whether the trigger was already mapped.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap all destination trigger lines to which the specified source trigger line is currently 
            connected.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiBackplaneSession.UnmapTrigger(System.Int16,Ivi.Visa.TriggerLine,System.Int16,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceBus">The trigger bus segment of the source trigger line.</param>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationBus">The trigger bus segment of the destination trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="P:Ivi.Visa.IPxiBackplaneSession.ChassisNumber">
            <summary>
            The identification number of this PXI chassis.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiBackplaneSession.ManufacturerName">
            <summary>
            The name of the hardware vendor for this PXI chassis.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiBackplaneSession.ModelName">
            <summary>
            The name of this chassis.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IPxiMemorySession">
            <summary>
            The session interface for PXI memory access (MEMACC).
            </summary>
        </member>
        <member name="T:Ivi.Visa.IRegisterBasedSession">
            <summary>
            IRegisterBasedSession is the base interface for VISA.NET register-based resources.
            </summary>
            <remarks>
            This interface uses signed types rather than unsigned types to maintain CLS compliance.  
            The caller can cast signed values to unsigned values if needed.
            </remarks>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MapAddress(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Map the specified memory space into this process’s address space.
            </summary>
            <param name="space">Specifies the address space to map.</param>
            <param name="offset">Offset (in bytes) of the memory <paramref name="space"/> to be
            mapped.</param>
            <param name="size">Amount of memory to map (in bytes).</param>
            <returns>A reference to the IMemoryMap interface, which provides the ability to
            Peek and Poke memory.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.In8(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in an 8-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.In16(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 16-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.In32(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 32-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.In64(Ivi.Visa.AddressSpace,System.Int64)">
            <summary>
            Read in a 64-bit value from the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset in bytes of the address or register from which
            to read.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.Out8(Ivi.Visa.AddressSpace,System.Int64,System.Byte)">
            <summary>
            Write an 8-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.Out16(Ivi.Visa.AddressSpace,System.Int64,System.Int16)">
            <summary>
            Write a 16-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.Out32(Ivi.Visa.AddressSpace,System.Int64,System.Int32)">
            <summary>
            Write a 32-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.Out64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Write a 64-bit value to the specified memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the starting address or
            register to which to write.</param>
            <param name="value">The data to write to the bus.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn8(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Byte[],System.Int64)">
            <summary>
            Move an 8-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn16(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int16[],System.Int64)">
            <summary>
            Move a 16-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn32(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int32[],System.Int64)">
            <summary>
            Move a 32-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified memory space (assigned memory base +
            offset) to local memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to transfer.</param>
            <returns>The data read from the bus.</returns>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveIn64(Ivi.Visa.AddressSpace,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Move a 64-bit block of data from the specified source memory space (assigned memory
            base + offset) to local (destination) memory.
            </summary>
            <param name="space">The address space.</param>
            <param name="sourceOffset">The offset (in bytes) of the address or register from
            which bytes are moved.</param>
            <param name="count">The number of elements to move.</param>
            <param name="destinationBuffer">The buffer to which data is moved.</param>
            <param name="destinationIndex">The starting index in
            <paramref name="destinationBuffer"/> to which data is moved.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[])">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut8(Ivi.Visa.AddressSpace,System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Moves an 8-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[])">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut16(Ivi.Visa.AddressSpace,System.Int64,System.Int16[],System.Int64,System.Int64)">
            <summary>
            Moves an 16-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[])">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut32(Ivi.Visa.AddressSpace,System.Int64,System.Int32[],System.Int64,System.Int64)">
            <summary>
            Moves an 32-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[])">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination.</param>
        </member>
        <member name="M:Ivi.Visa.IRegisterBasedSession.MoveOut64(Ivi.Visa.AddressSpace,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Moves an 64-bit block of data from local (source) memory to the specified destination
            memory space (assigned memory base + offset).
            </summary>
            <param name="space">The address space.</param>
            <param name="destinationOffset">The offset (in bytes) of the destination starting
            address or register to which data from <paramref name="sourceBuffer"/> is moved.</param>
            <param name="sourceBuffer">The data to move to the destination, starting at
            <paramref name="sourceIndex"/> and moving <paramref name="count"/> bytes.</param>
            <param name="sourceIndex">The starting index in <paramref name="sourceBuffer"/> of the
            bytes to move</param>
            <param name="count">The number of bytes to move.</param>
        </member>
        <member name="P:Ivi.Visa.IRegisterBasedSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to 
            change whether DMA is enabled, so reading this property value may not return the same 
            value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IRegisterBasedSession.DestinationIncrement">
            <summary>
            For MoveOut methods, specifies whether to do a block move or a FIFO read.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IRegisterBasedSession.SourceIncrement">
            <summary>
            For MoveIn methods, specifies whether to do a block move or a FIFO read.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IPxiMemorySession.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <returns>The offset of the allocated device memory.</returns>
        </member>
        <member name="M:Ivi.Visa.IPxiMemorySession.MemoryAllocate(System.Int64,System.Boolean)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes.</param>
            <param name="require32BitRegion">The entire allocated region must be 
            in the 32-bit address range.</param>
            <returns>The offset of the allocated device memory.</returns>
        </member>
        <member name="M:Ivi.Visa.IPxiMemorySession.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="T:Ivi.Visa.IVxiMemorySession">
            <summary>
            The session interface for VXI memory access (MEMACC).
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVxiMemorySession.Move(Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,Ivi.Visa.AddressSpace,System.Int64,Ivi.Visa.DataWidth,System.Int64)">
            <summary>
            Moves data from the specified source to the specified destination.
            </summary>
            <param name="sourceSpace">The address space of the source.</param>
            <param name="sourceOffset">The offset (in bytes) of the memory
            <paramref name="sourceSpace"/> from which data is moved.</param>
            <param name="sourceWidth">The data width of the source.</param>
            <param name="destinationSpace">The address space of the destination.</param>
            <param name="destinationOffset">The offset (in bytes) of the memory
            <paramref name="destinationSpace"/> to which data is moved.</param>
            <param name="destinationWidth">The data width of the destination.</param>
            <param name="sourceCount">The number of elements to move, where the data width of the
            elements to move is identical to the source data width.</param>
        </member>
        <member name="P:Ivi.Visa.IVxiMemorySession.LogicalAddress">
            <summary>
            The logical address of the VXI or VME controller for this interface.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiSignalProcessorEventArgs">
            <summary>
            Provides additional data about a VXIbus signal or VXIbus interrupt event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VxiSignalProcessorEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VxiSignalProcessorEventArgs" /> class.
            </summary>
            <param name="statusId">The status ID of the VXIbus signal or VXIbus interrupt.</param>
        </member>
        <member name="P:Ivi.Visa.VxiSignalProcessorEventArgs.StatusId">
            <summary>
            The status ID of the VXIbus signal or VXIbus interrupt.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VisaAsyncCallback">
            <summary>
            The delegate for an asynchronous I/O callback argument use in the BeginRead() or
            BeginWrite() method calls.
            </summary>
            <param name="result">The VISA asynchronous results for the asynchronous I/O method that
            is calling the callback method.</param>
        </member>
        <member name="T:Ivi.Visa.IVisaAsyncResult">
            <summary>
            The interface that is used to communicate information about the progress and results of
            an asynchronous operation.  The object that implements this interface specific to, and
            identifies, that particular operation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaAsyncResult.IsAborted">
            <summary>
            If true, the asynchronous I/O operation was aborted by a call to AbortRead() or
            AbortWrite().
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaAsyncResult.Buffer">
            <summary>
            For asynchronous write operations, the data buffer that contains the data to be written 
            to the device.  For asynchronous read operations, the content of the buffer is 
            unspecified until the operation is complete (that is, after the call to EndRead has 
            completed successfully.  If the asynchronous operation was initiated with a user 
            created buffer, this is that buffer.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaAsyncResult.Count">
            <summary>
            Before the associated asynchronous operation has been completed by executing EndRead or 
            EndWrite, the value of this property is undefined.  After the associated asynchronous 
            operation has been completed by executing EndRead or EndWrite, the value of this property 
            is the actual number of bytes written (for a write operation) or the actual number of 
            bytes read (for a read operation).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVisaAsyncResult.Index">
            <summary>
            The value of the index argument for the method call that created this VISA asynchronous
            results object.  If the method did not include an index, then 0.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VisaConstants">
            <summary>
            VisaConstants provides access to commonly used constants.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VisaConstants.ImmediateTimeout">
            <summary>
            Specifies an immediate timeout, for use with method overloads where the timeout is 
            specified in milliseconds.  If the operation cannot be satisfied immediately, it 
            throws a timeout exception rather than blocking.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VisaConstants.InfiniteTimeout">
            <summary>
            Specifies an infinite timeout, for use with method overloads where the timeout is 
            specified in milliseconds.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VisaConstants.GpibNoSecondaryAddress">
            <summary>
            For GPIB resources, this value indicates that there is no secondary address.  
            Actual secondary address values are in the range 0-30 inclusive.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VisaConstants.UnknownSlotNumber">
            <summary>
            For PXI and VXI resources, this value indicates that the slot number is unknown or 
            not applicable.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VisaConstants.VxiUnknownLogicalAddress">
            <summary>
            For VXI and VME resources, this value indicates that the logical address is unknown 
            or not applicable.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IPxiSession">
            <summary>
            The session interface for a PXI instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IPxiSession.ReserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Reserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to reserve.</param>
        </member>
        <member name="M:Ivi.Visa.IPxiSession.UnreserveTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unreserve a PXI trigger line.
            </summary>
            <param name="line">The trigger line to unreserve.</param>
        </member>
        <member name="E:Ivi.Visa.IPxiSession.Interrupt">
            <summary>
            Occurs when a PXI interrupt is received from the device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ActualLinkWidth">
            <summary>
            The actual, negotiated link width.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.AllowWriteCombining">
            <summary>
            Specifies whether the implementation should attempt to combine bus write transfers 
            into a larger transfer before bursting over the PCI bus.  In some cases you may not be able to 
            change the write combining behavior, so reading this property value may not return the same 
            value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.BusNumber">
            <summary>
            The PCI bus number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ChassisNumber">
            <summary>
            The identification number of the chassis where this device is located.  If the chassis 
            has not been identified, this property returns -1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.DeviceNumber">
            <summary>
            The PCI device number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.DstarBusNumber">
            <summary>
            The differential star bus number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.DstarLineSet">
            <summary>
            The connected set of PXI Express differential star bus lines.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.FunctionNumber">
            <summary>
            The PCI function number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.IsExpress">
            <summary>
            If true, the device is a PXI Express device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ManufacturerId">
            <summary>
            The subsystem PCI vendor identification number of the hardware vendor for this 
            device.  If the subsystem information does not exist, this returns the primary PCI 
            vendor identification number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MaxLinkWidth">
            <summary>
            The maximum usable link width.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar0">
            <summary>
            The memory type used in Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar1">
            <summary>
            The memory type used in Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar2">
            <summary>
            The memory type used in Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar3">
            <summary>
            The memory type used in Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar4">
            <summary>
            The memory type used in Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemTypeBar5">
            <summary>
            The memory type used in Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar0">
            <summary>
            The memory base address for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar1">
            <summary>
            The memory base address for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar2">
            <summary>
            The memory base address for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar3">
            <summary>
            The memory base address for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar4">
            <summary>
            The memory base address for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemBaseBar5">
            <summary>
            The memory base address for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar0">
            <summary>
            The memory size for Base Address Register (BAR) 0.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar1">
            <summary>
            The memory size for Base Address Register (BAR) 1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar2">
            <summary>
            The memory size for Base Address Register (BAR) 2.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar3">
            <summary>
            The memory size for Base Address Register (BAR) 3.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar4">
            <summary>
            The memory size for Base Address Register (BAR) 4.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.MemSizeBar5">
            <summary>
            The memory size for Base Address Register (BAR) 5.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ModelCode">
            <summary>
            The vendor-specific subsystem PCI model number for this device.  If the subsystem 
            information does not exist, this returns the primary PCI model number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.Slot">
            <summary>
            The physical slot location of this device within its chassis.  If the location is 
            not known, this property returns -1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.SlotLinkWidth">
            <summary>
            The link width used by the slot.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.SlotLocalBusLeft">
            <summary>
            The slot number or special feature connected to local left bus lines.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.SlotLocalBusRight">
            <summary>
            The slot number or special feature connected to local right bus lines.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.SlotPath">
            <summary>
            The slot path.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.StarTriggerBus">
            <summary>
            The value for the PXI star trigger bus.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.StarTriggerLine">
            <summary>
            The value for the connected PXI star trigger line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IPxiSession.TriggerBus">
            <summary>
            The trigger bus segment of this device.
            </summary>
        </member>
        <member name="T:Ivi.Visa.PxiMemoryType">
            <summary>
            Indicates the memory type (memory mapped or I/O mapped) used by the device in a
            specified base address register (BAR).
            </summary>
        </member>
        <member name="F:Ivi.Visa.PxiMemoryType.None">
            <summary>
            There is no memory associated with the base address register.
            </summary>
        </member>
        <member name="F:Ivi.Visa.PxiMemoryType.Memory">
            <summary>
            The base address register is in the device's memory space.
            </summary>
        </member>
        <member name="F:Ivi.Visa.PxiMemoryType.IO">
            <summary>
            The base address register is in the device's I/O space.
            </summary>
        </member>
        <member name="T:Ivi.Visa.AtnMode">
            <summary>
            Indicates the current state of the GPIB ATN (ATtentioN) interface line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AtnMode.Deassert">
            <summary>
            Deassert the GPIB ATN line.  The interface goes to standby.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AtnMode.Assert">
            <summary>
            Assert the GPIB ATN line synchronously.  If a data
            handshake is in progress, ATN will not be asserted until the handshake is
            complete.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AtnMode.DeassertHandshake">
            <summary>
            Deassert the GPIB ATN line, and then enter shadow
            handshake mode. The interface participates in data handshakes
            as an Acceptor without actually reading the data.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AtnMode.AssertImmediate">
            <summary>
            Assert the GPIB ATN line asynchronously.  This should
            only be used under error conditions.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ByteOrder">
            <summary>
            Indicates the byte order used in various VXI operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ByteOrder.BigEndian">
            <summary>
            Raw binary data with big Endian byte order.
            </summary>
        </member>
        <member name="F:Ivi.Visa.ByteOrder.LittleEndian">
            <summary>
            Raw binary data with little Endian byte order.
            </summary>
        </member>
        <member name="T:Ivi.Visa.GpibAddressedState">
            <summary>
            Indicates whether the GPIB interface is currently addressed to talk or listen, or is not addressed.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibAddressedState.Unaddressed">
            <summary>
            The GPIB interface is not addressed.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibAddressedState.Talker">
            <summary>
            The GPIB interface is addressed to talk.
            </summary>
        </member>
        <member name="F:Ivi.Visa.GpibAddressedState.Listener">
            <summary>
            The GPIB interface is addressed to listen.
            </summary>
        </member>
        <member name="T:Ivi.Visa.SerialFlowControlModes">
            <summary>
            Indicates the type of flow control used by the Serial connection.  Multiple flow
            control mechanisms may be specified, although certain combinations may not be
            supported by all serial ports and/or operating systems.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialFlowControlModes.None">
            <summary>
            The serial connection does not use flow control, and buffers
            on both sides of the connection are assumed to be large enough to hold all
            data transferred.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialFlowControlModes.XOnXOff">
            <summary>
            The serial connection uses the XON and XOFF characters to perform
            software flow control.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialFlowControlModes.RtsCts">
            <summary>
            The serial connection uses the RTS output signal and the CTS input
            signal to perform hardware flow control.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialFlowControlModes.DtrDsr">
            <summary>
            The serial connection uses the DTR output signal and the DSR input
            signal to perform hardware flow control.
            </summary>
        </member>
        <member name="T:Ivi.Visa.SerialParity">
            <summary>
            Indicates whether parity checking is being used by the serial connection, and if
            so, how it is determined.  The specified parity is used with every frame
            transmitted and received.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialParity.None">
            <summary>
            No parity bit is present.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialParity.Odd">
            <summary>
            The parity bit is set to 1 if the number of ones in data bits
            (not including the parity bit) is odd, and is otherwise set to 0.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialParity.Even">
            <summary>
            The parity bit is set to 1 if the number of ones in data bits
            (not including the parity bit) is even, and is otherwise set to 0.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialParity.Mark">
            <summary>
            The parity bit exists and is always 1.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialParity.Space">
            <summary>
            The parity bit exists and is always 0.
            </summary>
        </member>
        <member name="T:Ivi.Visa.SerialStopBitsMode">
            <summary>
            Specifies the number of stop bits used to indicate the end of a Serial frame.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialStopBitsMode.One">
            <summary>
            One stop bit.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialStopBitsMode.OneAndOneHalf">
            <summary>
            One-and-one-half (1.5) stop bits.
            </summary>
        </member>
        <member name="F:Ivi.Visa.SerialStopBitsMode.Two">
            <summary>
            Two stop bits.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiDeviceClass">
            <summary>
            Indicates the VXI-defined device class to which a particular resource belongs.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiDeviceClass.Memory">
            <summary>
            The resource belongs to the memory device class.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiDeviceClass.Extended">
            <summary>
            The resource belongs to the extended device class.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiDeviceClass.Message">
            <summary>
            The resource belongs to the message based device class.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiDeviceClass.Register">
            <summary>
            The resource belongs to the register based device class.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiDeviceClass.Other">
            <summary>
            The resource belongs to a miscellaneous device class such as VME.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiAccessPrivilege">
            <summary>
            Indicates the address modifier to be used in high-level access operations when
            writing to the destination.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.DataPrivileged">
            <summary>
            The data privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.DataNonPrivileged">
            <summary>
            The data non-privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.ProgramPrivileged">
            <summary>
            The program privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.ProgramNonPrivileged">
            <summary>
            The program non-privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.BlockPrivileged">
            <summary>
            The block privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.BlockNonPrivileged">
            <summary>
            The block non-privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64Privileged">
            <summary>
            The D64 privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64NonPrivileged">
            <summary>
            The D64 non-privileged address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64DoubleEdgeVme">
            <summary>
            The Double Edge VME address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64Sst160">
            <summary>
            The D64 Source Synchronous Transfer 160 address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64Sst267">
            <summary>
            The D64 Source Synchronous Transfer 267 address modifier.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiAccessPrivilege.D64Sst320">
            <summary>
            The D64 Source Synchronous Transfer 320 address modifier.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ITypeFormatter">
            <summary>
            The ITypeFormatter interface includes methods that perform custom conversions of 
            supported .NET types to and from a string.  It also provides a method for determining 
            whether a particular type is supported.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ITypeFormatter.IsSupported(System.Type)">
            <summary>
            Returns true if type is supported by the type formatter object.  If true, the object 
            must support converting a type value to a string (formatting) and converting a string 
            to a type value (parsing).
            </summary>
            <param name="type">The type which is tested to determine if it is supported by the 
            formatter object.</param>
            <returns>true if type is supported by the type formatter object, otherwise false.</returns>
        </member>
        <member name="M:Ivi.Visa.ITypeFormatter.ToString(System.Object)">
            <summary>
            Returns a string representation of obj that is suitable for use in a string that is 
            formatted by Printf.
            </summary>
            <param name="obj">The object to be formatted as a string.</param>
            <returns>The string to which the object has been formatted.</returns>
        </member>
        <member name="M:Ivi.Visa.ITypeFormatter.Parse(System.Type,System.String)">
            <summary>
            Returns an object of the specified type, the value of which is determined by parsing 
            the data string.
            </summary>
            <param name="type">The data type of the returned object.</param>
            <param name="data">The string data which is parsed to create the object returned by 
            this method.  The type formatter object must be able to parse data and convert it to 
            an object of the specified type.</param>
            <returns>An object of the specified type, the value of which is determined by parsing 
            the data string.</returns>
        </member>
        <member name="T:Ivi.Visa.IGpibInterfaceSession">
            <summary>
            The session interface for a GPIB interface.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.AssertTrigger">
            <summary>
            Asserts a software trigger.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.PassControl(System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.PassControl(System.Int16,System.Int16)">
            <summary>
            Tells the GPIB device at the specified address to become controller in charge (CIC).
            </summary>
            <param name="primaryAddress">The primary address of the GPIB device.</param>
            <param name="secondaryAddress">The secondary address of the GPIB device.</param>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.ControlAtn(Ivi.Visa.AtnMode)">
            <summary>
            Controls the state of the GPIB ATN interface line, and optionally the active controller
            state of the local interface board.
            </summary>
            <param name="command">The action to be taken with respect to the GPIB ATN line.</param>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.SendCommand(System.Byte[])">
            <summary>
            Writes GPIB command bytes on the bus.
            </summary>
            <param name="data">The GPIB command bytes.</param>
            <returns>The number of bytes actually written.</returns>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.SendRemoteLocalCommand(Ivi.Visa.GpibInterfaceRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local
            state of the device.
            </summary>
            <param name="mode">The action to be taken with respect to the GPIB REN line.</param>
        </member>
        <member name="M:Ivi.Visa.IGpibInterfaceSession.SendInterfaceClear">
            <summary>
            Pulses the interface clear line (IFC) for at least 100 microseconds.  This operation
            asserts the IFC line and the local interface becomes controller in charge (CIC).
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.Cleared">
            <summary>
            Occurs when the GPIB controller has been sent a device clear message.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.ControllerInCharge">
            <summary>
            Occurs when the GPIB controller has gained or lost CIC (controller in charge) status.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.Listen">
            <summary>
            Occurs when the GPIB controller has been addressed to listen.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.ServiceRequest">
            <summary>
            Occurs when a service request is received from the interface.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.Talk">
            <summary>
            Occurs when the GPIB controller has been addressed to talk.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IGpibInterfaceSession.Trigger">
            <summary>
            Occurs when a trigger interrupt is received from the interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.AddressState">
            <summary>
            Indicates whether the specified GPIB interface is currently addressed to talk or listen, 
            or is not addressed.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled. In some cases you may not be able to 
            change whether DMA is enabled, so reading this property value may not return the same 
            value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.AtnState">
            <summary>
            The current state of the GPIB ATN (ATtentioN) interface line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.HS488CableLength">
            <summary>
            The total length of the GPIB cable used in the specified GPIB interface, in meters.
            If HS488 is not implemented, the value of this property is -1.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.DeviceStatusByte">
            <summary>
            The 488-style status byte of the local controller associated with this session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.IOProtocol">
            <summary>
            The protocol type for I/O communication with the physical resource.  In some cases you 
            may not be able to change the protocol, so reading this property value may not return 
            the same value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.IsControllerInCharge">
            <summary>
            Indicates whether the specified GPIB interface is currently the controller in charge (CIC).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.IsSystemController">
            <summary>
            Specifies whether the specified GPIB interface is currently the system controller.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.NdacState">
            <summary>
            The current state of the GPIB NDAC (Not Data ACcepted) interface line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.PrimaryAddress">
            <summary>
            The primary address of the local GPIB controller used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.RenState">
            <summary>
            The current state of the GPIB REN (Remote ENable) interface line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.SecondaryAddress">
            <summary>
            The secondary address of the local GPIB controller used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.SendEndEnabled">
            <summary>
            Enables/disables sending the END signal on the last byte of a write.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.SrqState">
            <summary>
            The current state of the GPIB SRQ (Service ReQuest) interface line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.TerminationCharacter">
            <summary>
            The ASCII character used to end reading.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.TerminationCharacterEnabled">
            <summary>
            If true, reads end when a termination character is received.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibInterfaceSession.RawIO">
            <summary>
            A reference to the raw I/O interface.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IGpibSession">
            <summary>
            The session interface for a GPIB instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IGpibSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the GPIB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="M:Ivi.Visa.IGpibSession.SendRemoteLocalCommand(Ivi.Visa.GpibInstrumentRemoteLocalMode)">
            <summary>
            Controls the state of the GPIB REN interface line and, optionally, the remote/local state
            of the device.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.AllowDma">
            <summary>
            Specifies whether direct memory access is enabled.  In some cases you may not be able to 
            change whether DMA is enabled, so reading this property value may not return the same 
            value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.PrimaryAddress">
            <summary>
            The primary address of the GPIB device used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.ReaddressingEnabled">
            <summary>
            Specifies whether to use repeat addressing before each read or write operation. In some 
            cases you may not be able to change the readdressing behavior, so reading this property 
            value may not return the same value that was set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.RenState">
            <summary>
            The current state of the GPIB REN interface line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.SecondaryAddress">
            <summary>
            The secondary address of the GPIB device used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IGpibSession.UnaddressingEnabled">
            <summary>
            Specifies whether to unaddress the device (UNT and UNL) after each read or write operation.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ISerialSession">
            <summary>
            The session interface for a Serial instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ISerialSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with serial interfaces.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:Ivi.Visa.ISerialSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for serial communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.BytesAvailable">
            <summary>
            The number of bytes available in the global receive buffer.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.BaudRate">
            <summary>
            The baud rate of the interface.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.ClearToSendState">
            <summary>
            The current state of the Clear To Send (CTS) input signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.DataBits">
            <summary>
            The number of data bits contained in each frame (5, 6, 7, or 8).
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.DataCarrierDetectState">
            <summary>
            The current state of the Data Carrier Detect (DCD) input signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.DataSetReadyState">
            <summary>
            The current state of the Data Set Ready (DSR) input signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.DataTerminalReadyState">
            <summary>
            The state of the Data Terminal Ready (DTR) output signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.FlowControl">
            <summary>
            The flow control mechanism(s) used by this serial connection.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.Parity">
            <summary>
            The parity used with every frame transmitted and received.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.ReadTermination">
            <summary>
            The method used to terminate read operations.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.ReplacementCharacter">
            <summary>
            The character used to replace incoming characters that arrive with errors (such as
            parity errors).
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.RequestToSendState">
            <summary>
            The current state of the Request To Send (RTS) output signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.RingIndicatorState">
            <summary>
            The current state of the Ring Indicator (RI) input signal.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.StopBits">
            <summary>
            The number of stop bits used to indicate the end of a frame.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.WriteTermination">
            <summary>
            The method used to terminate write operations.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.XOffCharacter">
            <summary>
            Specifies the value of the XOFF character used for XON/XOFF flow control (both directions).
            </summary>
        </member>
        <member name="P:Ivi.Visa.ISerialSession.XOnCharacter">
            <summary>
            Specifies the value of the XON character used for XON/XOFF flow control (both directions).
            </summary>
        </member>
        <member name="T:Ivi.Visa.ITcpipSession">
            <summary>
            The session interface for a TCP/IP instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ITcpipSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="M:Ivi.Visa.ITcpipSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the TCPIP instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, in
            IPv4 dot-notation or IPv6 representation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.DeviceName">
            <summary>
            The LAN device name used by the VXI-11 or HiSLIP protocol during connection.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.Port">
            <summary>
            The device-side port number being used for communication.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.IsHiSLIP">
            <summary>
            If true, this session is using the HiSLIP protocol to communicate with the device.  If
            false, the session is using VXI-11.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.HiSLIPOverlapEnabled">
            <summary>
            Specifies whether the HiSLIP "overlap" mode is enabled.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.HiSLIPProtocolVersion">
            <summary>
            The negotiated HiSLIP protocol version.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSession.HiSLIPMaximumMessageKBytes">
            <summary>
            The HiSLIP maximum message size in kilobytes, where a kilobyte is 1024 bytes.
            </summary>
        </member>
        <member name="T:Ivi.Visa.ITcpipSocketSession">
            <summary>
            The session interface for a TCP/IP socket session.
            </summary>
        </member>
        <member name="M:Ivi.Visa.ITcpipSocketSession.Flush(Ivi.Visa.IOBuffers,System.Boolean)">
            <summary>
            Flushes the read and write buffers associated with the TCPIP connection.
            </summary>
            <param name="buffers">The buffers to be flushed.</param>
            <param name="discard">Specifies whether to discard the data or perform I/O to the device.</param>
        </member>
        <member name="M:Ivi.Visa.ITcpipSocketSession.SetBufferSize(Ivi.Visa.IOBuffers,System.Int32)">
            <summary>
            Sets the size of the read and/or write buffer for TCPIP communication.
            </summary>
            <param name="buffers">The buffer(s) to be resized.</param>
            <param name="size">The new size of the buffer(s) in bytes.</param>
            <returns>Indicates whether the buffer size was successfully reset.</returns>
        </member>
        <member name="P:Ivi.Visa.ITcpipSocketSession.Address">
            <summary>
            The TCP/IP address of the device to which the session is connected, formatted in
            dot-notation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSocketSession.HostName">
            <summary>
            The host name of the device. If no host name is available, this property is set to the
            empty string.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSocketSession.KeepAlive">
            <summary>
            If true, the TCP/IP provider enables the use of keep-alive packets on TCP connections.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSocketSession.NoDelay">
            <summary>
            If true, the Nagle algorithm is disabled.
            </summary>
        </member>
        <member name="P:Ivi.Visa.ITcpipSocketSession.Port">
            <summary>
            The port number for a given TCP/IP address (required for a TCP/IP SOCKET resource).
            </summary>
        </member>
        <member name="T:Ivi.Visa.IUsbSession">
            <summary>
            The session interface for a USB instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IUsbSession.ControlIn(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Request arbitrary data from a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            device-to-host.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
            <param name="length">The length of the data in bytes to send to the device during the Data
            stage. If this value is 0, then a zero-length byte array is returned from this method.</param>
            <returns>The data received from the device.</returns>
        </member>
        <member name="M:Ivi.Visa.IUsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
        </member>
        <member name="M:Ivi.Visa.IUsbSession.ControlOut(System.Int16,System.Int16,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Send arbitrary data to a USB device on the default control port.
            </summary>
            <param name="requestType">A bitmap field for defining the USB control port request.  The
            bitmap fields are defined by the USB specification.  The direction bit must be
            host-to-device.</param>
            <param name="request">Request ID for this transfer. The meaning of this value depends on
            <paramref name="requestType"/>.</param>
            <param name="value">The requested value for this transfer.</param>
            <param name="index">The interface or endpoint index number, depending on
            <paramref name="requestType"/>.</param>
            <param name="data">The data to send to the device during the Data stage.</param>
        </member>
        <member name="M:Ivi.Visa.IUsbSession.SendRemoteLocalCommand(Ivi.Visa.RemoteLocalMode)">
            <summary>
            Places the USB instrument into the specified local or remote mode.
            </summary>
            <param name="mode">Indicates the action to be taken.</param>
        </member>
        <member name="E:Ivi.Visa.IUsbSession.Interrupt">
            <summary>
            Occurs when a vendor-specific USB interrupt is received from the device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.Is4882Compliant">
            <summary>
            True if the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.MaximumInterruptSize">
            <summary>
            Specifies the maximum number of bytes that this USB device will send on the interrupt
            IN pipe.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.ManufacturerId">
            <summary>
            The USB vendor identification number of the hardware vendor for this device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.ModelCode">
            <summary>
            The vendor-specific model number for this USB device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.UsbInterfaceNumber">
            <summary>
            The USB interface number of the interface to which the USB device is connected.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.UsbProtocol">
            <summary>
            The USB protocol number.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IUsbSession.UsbSerialNumber">
            <summary>
            The serial number of the USB device.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IResourceManager">
            <summary>
            The interface for finding, enumerating, and creating VISA.NET I/O resources.  All VISA.NET
            vendor-specific resource managers derive from this interface. The VISA.NET Shared Component's
            resource manager doesn't derive from this interface, but provides all the members available
            in this interface.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IResourceManager.Find(System.String)">
            <summary>
            Find all of the VISA resources that match the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>All VISA resources matching the search <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.IResourceManager.Parse(System.String)">
            <summary>
            Parse a resource string to get extended interface information.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>The detailed information derived by parsing the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.IResourceManager.Open(System.String)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.IResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.IResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <param name="openStatus">The status of the open operation.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="P:Ivi.Visa.IResourceManager.ManufacturerName">
            <summary>
            The name of the vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IResourceManager.ManufacturerId">
            <summary>
            The ID number of the vendor of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IResourceManager.ImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IResourceManager.SpecificationVersion">
            <summary>
            The version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </summary>
        </member>
        <member name="T:Ivi.Visa.LineState">
            <summary>
            Indicates whether the line is asserted or not, or if the state is unknown.
            </summary>
        </member>
        <member name="F:Ivi.Visa.LineState.Unknown">
            <summary>
            It can't be determined if the line is asserted or not.
            </summary>
        </member>
        <member name="F:Ivi.Visa.LineState.Unasserted">
            <summary>
            The line is not asserted.
            </summary>
        </member>
        <member name="F:Ivi.Visa.LineState.Asserted">
            <summary>
            The line is asserted.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IVxiBackplaneSession">
            <summary>
            The session interface for a VXI backplane.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.AssertInterrupt(System.Int16,System.Int32)">
            <summary>
            Assert the specified device interrupt or signal.
            </summary>
            <param name="irqLevel">The specified device interrupt or signal.</param>
            <param name="statusId">The status value to be presented during an interrupt
            acknowledge cycle.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.AssertTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="line">The trigger to assert.</param>
            <param name="protocol">The VXI trigger protocol to use when asserting the trigger.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.AssertUtilitySignal(Ivi.Visa.VxiUtilitySignal)">
            <summary>
            Assert the specified utility bus signal.
            </summary>
            <param name="signal">The utility bus signal to assert.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.MapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine,System.Boolean@)">
            <summary>
            Map the specified source trigger line to the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
            <param name="alreadyMapped">If true, the trigger has already been mapped.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiBackplaneSession.UnmapTrigger(Ivi.Visa.TriggerLine,Ivi.Visa.TriggerLine)">
            <summary>
            Unmap the specified source trigger line from the specified destination trigger line.
            </summary>
            <param name="sourceLine">The source trigger line.</param>
            <param name="destinationLine">The destination trigger line.</param>
        </member>
        <member name="E:Ivi.Visa.IVxiBackplaneSession.Trigger">
            <summary>
            Occurs when a trigger is received from the VXI backplane.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IVxiBackplaneSession.SystemFailure">
            <summary>
            Occurs when the VXI backplane experiences a system failure.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IVxiBackplaneSession.SystemReset">
            <summary>
            Occurs when the VXI backplane has initiated a system reset.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiBackplaneSession.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiBackplaneSession.TriggerStatus">
            <summary>
            The VXI trigger line(s) that are currently set.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiBackplaneSession.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiBackplaneSession.InterruptStatus">
            <summary>
            The current state of the VXI/VME interrupt lines.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiBackplaneSession.SystemFailureStatus">
            <summary>
            The current state of the VXI/VME SYSFAIL (SYStem FAILure) backplane line.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IVxiSession">
            <summary>
            The session interface for a VXI instrument.
            </summary>
        </member>
        <member name="M:Ivi.Visa.IVxiSession.AssertTrigger(Ivi.Visa.VxiTriggerProtocol)">
            <summary>
            Assert a software or hardware trigger.
            </summary>
            <param name="protocol">The trigger protocol to use when the trigger is asserted.</param>
        </member>
        <member name="M:Ivi.Visa.IVxiSession.CommandQuery(Ivi.Visa.VxiCommandMode,System.Int32)">
            <summary>
            Send the device a miscellaneous command or query and/or retrieves the response to a
            previous query.
            </summary>
            <param name="mode">Indicates whether to issue a command and/or retrieve a response.</param>
            <param name="command">The command to send.</param>
            <returns>The response retrieved from the device.  If the mode does not include a response, this method
            returns zero.</returns>
        </member>
        <member name="M:Ivi.Visa.IVxiSession.MemoryAllocate(System.Int64)">
            <summary>
            Allocate memory from the device’s memory region.
            </summary>
            <param name="size">The size of the allocated memory in bytes</param>
            <returns>The offset of the allocated device memory.</returns>
        </member>
        <member name="M:Ivi.Visa.IVxiSession.MemoryFree(System.Int64)">
            <summary>
            Free previously allocated memory.
            </summary>
            <param name="offset">The offset of the allocated device memory.</param>
        </member>
        <member name="E:Ivi.Visa.IVxiSession.Interrupt">
            <summary>
            Occurs when a VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IVxiSession.SignalProcessor">
            <summary>
            Occurs when a VXIbus signal or VXIbus interrupt is received from the device.
            </summary>
        </member>
        <member name="E:Ivi.Visa.IVxiSession.Trigger">
            <summary>
            Occurs when a VXIbus trigger is received from the device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.CommanderLogicalAddress">
            <summary>
            The logical address of the commander of the VXI device used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.DestinationAccessPrivilege">
            <summary>
            The address modifier to be used in high-level access operations, such as OutXX() and
            MoveOutXX(), when writing to the destination.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.DestinationByteOrder">
            <summary>
            The destination address space byte order.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.DeviceClass">
            <summary>
            The VXI-defined device class to which the resource belongs.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.FastDataChannelNumber">
            <summary>
            The FDC channel that will be used when transferring data.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.FastDataChannelUseStreaming">
            <summary>
            If true, FDC streaming will be used when transferring data (Normal mode or Stream
            mode).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.FastDataChannelUsePair">
            <summary>
            If true, a channel pair will be used when transferring data, rather than a single
            channel.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.Is4882Compliant">
            <summary>
            If true, the device is IEEE 488.2 compliant.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.IsImmediateServant">
            <summary>
            If true, the device is an immediate servant of the controller running VISA.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.LogicalAddress">
            <summary>
            The logical address of the VXI or VME device used by the given session.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.ChassisLogicalAddress">
            <summary>
            The logical address of a given device in the mainframe that serves as a unique ID for
            the mainframe.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.ManufacturerId">
            <summary>
            The VXIbus vendor identification number of the hardware vendor for this device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.ManufacturerName">
            <summary>
            The name of the hardware vendor that corresponds to the ManufacturerId property.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.MemoryMapAccessPrivilege">
            <summary>
            The address modifier to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.MemoryMapByteOrder">
            <summary>
            The byte order to be used in <see cref="T:Ivi.Visa.IMemoryMap"/> operations when
            accessing the mapped window.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.MemoryBase">
            <summary>
            The base address of the device in VXIbus memory address space.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.MemorySize">
            <summary>
            The size of the memory requested by the device in the VXIbus address space.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.MemorySpace">
            <summary>
            The VXIbus address space used by the device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.ModelCode">
            <summary>
            The vendor-specific model number for this VXIbus device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.ModelName">
            <summary>
            The name of this device (corresponds to the ModelCode property).
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.Slot">
            <summary>
            The physical slot location of this VXIbus device.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.SourceAccessPrivilege">
            <summary>
            The address modifier to be used in high-level access operations, such as InXX() and
            MoveInXX(), when reading from the source.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.SourceByteOrder">
            <summary>
            The source address space byte order.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.TriggerLine">
            <summary>
            The current triggering line.
            </summary>
        </member>
        <member name="P:Ivi.Visa.IVxiSession.TriggerSupport">
            <summary>
            The VXI trigger line(s) that this implementation supports.
            </summary>
        </member>
        <member name="T:Ivi.Visa.PxiInterruptEventArgs">
            <summary>
            Provides additional data about a PXI interrupt event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.PxiInterruptEventArgs.#ctor(System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.PxiInterruptEventArgs" /> class.
            </summary>
            <param name="sequence">The index of the interrupt sequence that detected the interrupt condition.</param>
            <param name="data">The first register that was read in the successful interrupt detection sequence.</param>
        </member>
        <member name="P:Ivi.Visa.PxiInterruptEventArgs.Sequence">
            <summary>
            The index of the interrupt sequence that detected the interrupt condition.
            </summary>
        </member>
        <member name="P:Ivi.Visa.PxiInterruptEventArgs.Data">
            <summary>
            The first register that was read in the successful interrupt detection sequence.
            </summary>
        </member>
        <member name="T:Ivi.Visa.GlobalResourceManager">
            <summary>
            The Global Resource Manager (GRM) uses resource names to locate resources and instantiate
            sessions to the resources.  It resolves any overlapping functionality between vendor-specific
            VISA.NET implementations according to user-defined criteria (with reasonable defaults).  It
            also provides methods for parsing resource names into their constituent data items.
            </summary>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Find">
            <summary>
            Find all of the VISA resources available on the system.
            </summary>
            <returns>All VISA resources available on the system.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Find(System.String)">
            <summary>
            Find all of the VISA resources that match the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">The search pattern.</param>
            <returns>All VISA resources matching the search <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Parse(System.String)">
            <summary>
            Parse the specified <paramref name="resourceName"/> to get extended interface information.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>The detailed information derived by parsing the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.TryParse(System.String,Ivi.Visa.ParseResult@)">
            <summary>
            Parse the specified <paramref name="resourceName"/> to get extended interface information. If the Parse
            operation is not successful, this function returns <see langword="false"/> instead of throwing an exception.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="result">The detailed information derived by parsing the specified <paramref name="resourceName"/>.</param>
            <returns><see langword="true"/> if the Parse operation was successful, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Open(System.String)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="M:Ivi.Visa.GlobalResourceManager.Open(System.String,Ivi.Visa.AccessModes,System.Int32,Ivi.Visa.ResourceOpenStatus@)">
            <summary>
            Create a VISA I/O resource session.
            </summary>
            <param name="resourceName">The VISA resource name.</param>
            <param name="accessModes">The modes by which the resource is to be accessed.</param>
            <param name="timeoutMilliseconds">The timeout in milliseconds.  This applies to the time taken to acquire the
            requested lock, and may also include the time needed to open a session to the resource.</param>
            <param name="openStatus">The status of the open operation.</param>
            <returns>A reference to a session for the specified <paramref name="resourceName"/>.</returns>
        </member>
        <member name="P:Ivi.Visa.GlobalResourceManager.ImplementationVersion">
            <summary>
            The version of this VISA.NET implementation.
            </summary>
        </member>
        <member name="P:Ivi.Visa.GlobalResourceManager.SpecificationVersion">
            <summary>
            The version of the VISA.NET specification with which this VISA.NET implementation
            complies.
            </summary>
        </member>
        <member name="T:Ivi.Visa.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.ArrayCountOutOfRange">
            <summary>
              Looks up a localized string similar to Count ({0}) is out of range for buffer of length {1}..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.BinaryBlockHeaderNotFound">
            <summary>
              Looks up a localized string similar to The binary block header was not found in the input stream..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.BinaryBlockOfLongNotSupported">
            <summary>
              Looks up a localized string similar to The binary block format does not support 64-bit integers..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.BinaryTypeMismatch">
            <summary>
              Looks up a localized string similar to Output argument type &apos;{0}&apos; does not match binary data type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.ByteArraysMustBeMultiplesOfEight">
            <summary>
              Looks up a localized string similar to Byte array must have a length that is a multiple of 8..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.ByteArraysMustBeMultiplesOfFour">
            <summary>
              Looks up a localized string similar to Byte array must have a length that is a multiple of 4..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.ByteArraysMustBeMultiplesOfTwo">
            <summary>
              Looks up a localized string similar to Byte array must have a length that is a multiple of 2..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.CannotScanStringToCharacter">
            <summary>
              Looks up a localized string similar to The result of scanning a string or character format specifier yielded more than one character and cannot be assigned to argument {0} of type Char..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.CannotSuppressAssignmentToPointerArguments">
            <summary>
              Looks up a localized string similar to The assignment suppression character (*) cannot be used with pointer arguments..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.CannotUnreadByte">
            <summary>
              Looks up a localized string similar to Internal error. The memory stream cannot push back a byte before reading from the stream..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.CannotUseEmptyObjectArray">
            <summary>
              Looks up a localized string similar to Cannot pass an empty object array..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.FormatStringTypeMismatch">
             <summary>
               Looks up a localized string similar to Format string type mismatch.
            Argument number {0} of type &apos;{1}&apos; does not match the data type specified in the format string..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.Ieee488NumericPrefixNotReceived">
            <summary>
              Looks up a localized string similar to The input did not include the proper prefix &apos;#{0}&apos; for the IEEE 488.2 numeric specifier &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.IndefiniteBlockTerminationCharacterNotReceived">
            <summary>
              Looks up a localized string similar to An EOI indicator was received when reading an indefinite block before the block termination character was received..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.LiteralCharactersNotReceived">
            <summary>
              Looks up a localized string similar to The input did not match the literal characters &apos;{0}&apos; in the format string..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.MissingLengthSpecifierForPointerArgument">
            <summary>
              Looks up a localized string similar to A pointer argument was encountered without a length specifier in the format string..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.MixedDataTypesInObjectArray">
            <summary>
              Looks up a localized string similar to An object array parameter was encountered with more than one kind of element. All elements within an object array parameter must be of the same type..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.NoDataForFormatSpecifier">
            <summary>
              Looks up a localized string similar to The input did not contain data for format specifier &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.NotEnoughInputArguments">
            <summary>
              Looks up a localized string similar to The format string passed requires more output arguments than were supplied..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.NotEnoughOutputArguments">
             <summary>
               Looks up a localized string similar to The format string requires more input arguments than were supplied.
            Ran out of arguments trying to process the following token:
            Token number: {0}
            Token text: {1}.
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.NullInputArgumentName">
            <summary>
              Looks up a localized string similar to Input argument {0}.
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.NumericDataNotReceived">
            <summary>
              Looks up a localized string similar to The input did not contain numeric data for format specifier &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.TooManyInputArguments">
            <summary>
              Looks up a localized string similar to The format string passed requires more input arguments than were supplied..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.TooManyListItemsRequested">
            <summary>
              Looks up a localized string similar to Format string specifies a minimum of {0} list elements, but the array argument only includes {1} elements..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.Unexpected488NumericTypeCode">
             <summary>
               Looks up a localized string similar to Internal error. 
            The IEEE 488.2 numeric format &apos;{0}&apos; is not recognized..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedBinaryDataType">
             <summary>
               Looks up a localized string similar to Unexpected binary data type.
            Type: {0}.
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedBinaryEncodingValue">
             <summary>
               Looks up a localized string similar to Internal error.
            The BinaryEncoding &apos;{0}&apos; is not recognized or not supported..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedDataArrayElementSize">
             <summary>
               Looks up a localized string similar to Unexpected data array element size.
            Element size: {0}.
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedDataType">
             <summary>
               Looks up a localized string similar to Internal error.  An unexpected date type was encountered.
            Type: {0}.
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedFormatSpecifier">
             <summary>
               Looks up a localized string similar to Internal error.
            The format specifier &apos;{0}&apos; is not recognized..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedInputArgumentIndex">
            <summary>
              Looks up a localized string similar to Internal error.  An unexpected input argument index was encountered..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedNumericDataType">
             <summary>
               Looks up a localized string similar to Internal error. 
            The numeric data type &apos;{0}&apos; is not recognized or not supported..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedNumericTypeCode">
             <summary>
               Looks up a localized string similar to Internal error. 
            The numeric type code &apos;{0}&apos; is not recognized..
             </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedObjectPointer">
            <summary>
              Looks up a localized string similar to Unexpected object pointer encountered..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnexpectedOutputArgumentType">
            <summary>
              Looks up a localized string similar to Internal error.  Unexpected output argument type..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnreadOnEmptyBuffer">
            <summary>
              Looks up a localized string similar to Cannot push character back into read buffer.  Buffer has not been read from..
            </summary>
        </member>
        <member name="P:Ivi.Visa.Resources.UnsupportedDataType">
            <summary>
              Looks up a localized string similar to Data type &apos;{0}&apos; is not supported for automatic formatting..
            </summary>
        </member>
        <member name="T:Ivi.Visa.AccessModes">
            <summary>
            Indicates the modes by which the session being created is to be accessed.
            Multiple access modes may be specified.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AccessModes.None">
            <summary>
            No access mode is specified.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AccessModes.ExclusiveLock">
            <summary>
            Indicates that an exclusive lock will be acquired immediately upon opening
            a session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AccessModes.LoadConfig">
            <summary>
            Indicates that session attribute values will be loaded from an external
            configuration utility if the configuration information is available.
            </summary>
        </member>
        <member name="T:Ivi.Visa.AddressSpace">
            <summary>
            Indicates the bus address space used by VXI or PXI devices.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.VxiA16">
            <summary>
            The A16 address space of the VXI/MXI bus.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.VxiA24">
            <summary>
            The A24 address space of the VXI/MXI bus.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.VxiA32">
            <summary>
            The A32 address space of the VXI/MXI bus.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.VxiA64">
            <summary>
            The A64 address space of the VXI/MXI bus.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiConfiguration">
            <summary>
            The PCI configuration address space.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar0">
            <summary>
            PCI memory or I/O address space 0.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar1">
            <summary>
            PCI memory or I/O address space 1.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar2">
            <summary>
            PCI memory or I/O address space 2.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar3">
            <summary>
            PCI memory or I/O address space 3.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar4">
            <summary>
            PCI memory or I/O address space 4.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiBar5">
            <summary>
            PCI memory or I/O address space 5.
            </summary>
        </member>
        <member name="F:Ivi.Visa.AddressSpace.PxiAllocation">
            <summary>
            Physical locally allocated address space.
            </summary>
        </member>
        <member name="T:Ivi.Visa.NativeVisaAttribute">
            <summary>
            NativeVisaAttribute allows access to defined values for VISA C attributes.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.AllowDma">
            <summary>
            Indicates the VI_ATTR_DMA_ALLOW_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.AllowWriteCombining">
            <summary>
            Indicates the VI_ATTR_PXI_ALLOW_WRITE_COMBINE native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.AsyncReturnCount32">
            <summary>
            Indicates the VI_ATTR_RET_COUNT_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.AsyncReturnCount64">
            <summary>
            Indicates the VI_ATTR_RET_COUNT_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.CommanderLogicalAddress">
            <summary>
            Indicates the VI_ATTR_CMDR_LA native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.DestinationAccess">
            <summary>
            Indicates the VI_ATTR_DEST_ACCESS_PRIV native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.DestinationByteOrder">
            <summary>
            Indicates the VI_ATTR_DEST_BYTE_ORDER native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.DestinationIncrement">
            <summary>
            Indicates the VI_ATTR_DEST_INCREMENT native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.DeviceStatusByte">
            <summary>
            Indicates the VI_ATTR_DEV_STATUS_BYTE native VISA attribute. Use with GetAttributeByte.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.EventType">
            <summary>
            Indicates the VI_ATTR_EVENT_TYPE native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.FastDataChannel">
            <summary>
            Indicates the VI_ATTR_FDC_CHNL native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.FastDataChannelMode">
            <summary>
            Indicates the VI_ATTR_FDC_MODE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.FastDataChannelUsePair">
            <summary>
            Indicates the VI_ATTR_FDC_USE_PAIR native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.FileAppendEnabled">
            <summary>
            Indicates the VI_ATTR_FILE_APPEND_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibAddressedState">
            <summary>
            Indicates the VI_ATTR_GPIB_ADDR_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibAtnState">
            <summary>
            Indicates the VI_ATTR_GPIB_ATN_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibHS488CableLength">
            <summary>
            Indicates the VI_ATTR_GPIB_HS488_CBL_LEN native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibIsControllerInCharge">
            <summary>
            Indicates the VI_ATTR_GPIB_CIC_STATE native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibIsSystemController">
            <summary>
            Indicates the VI_ATTR_GPIB_SYS_CNTRL_STATE native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibNdacState">
            <summary>
            Indicates the VI_ATTR_GPIB_NDAC_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibPrimaryAddress">
            <summary>
            Indicates the VI_ATTR_GPIB_PRIMARY_ADDR native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibRepeatAddressingEnabled">
            <summary>
            Indicates the VI_ATTR_GPIB_READDR_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibReceivedIsControllerInCharge">
            <summary>
            Indicates the VI_ATTR_GPIB_RECV_CIC_STATE native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibRenState">
            <summary>
            Indicates the VI_ATTR_GPIB_REN_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibSecondaryAddress">
            <summary>
            Indicates the VI_ATTR_GPIB_SECONDARY_ADDR native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibSrqState">
            <summary>
            Indicates the VI_ATTR_GPIB_SRQ_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.GpibUnaddressEnabled">
            <summary>
            Indicates the VI_ATTR_GPIB_UNADDR_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.Is4882Compliant">
            <summary>
            Indicates the VI_ATTR_4882_COMPLIANT native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ImmediateServant">
            <summary>
            Indicates the VI_ATTR_IMMEDIATE_SERV native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.InterfaceName">
            <summary>
            Indicates the VI_ATTR_INTF_INST_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.InterfaceParentNumber">
            <summary>
            Indicates the VI_ATTR_INTF_PARENT_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.InterfaceType">
            <summary>
            Indicates the VI_ATTR_INTF_TYPE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.InterfaceNumber">
            <summary>
            Indicates the VI_ATTR_INTF_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.IOProtocol">
            <summary>
            Indicates the VI_ATTR_IO_PROT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.JobId">
            <summary>
            Indicates the VI_ATTR_JOB_ID native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MainframeLogicalAddress">
            <summary>
            Indicates the VI_ATTR_MAINFRAME_LA native VISA attribute. Use with GetAttributeInt16.
            This corresponds to ChassisLogicalAddress in the IVxiSession and IVxiBackplaneSession
            interfaces.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ManufacturerId">
            <summary>
            Indicates the VI_ATTR_MANF_ID native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ManufacturerName">
            <summary>
            Indicates the VI_ATTR_MANF_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MaximumEventQueueLength">
            <summary>
            Indicates the VI_ATTR_MAX_QUEUE_LENGTH native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MemoryBase32">
            <summary>
            Indicates the VI_ATTR_MEM_BASE_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MemoryBase64">
            <summary>
            Indicates the VI_ATTR_MEM_BASE_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MemorySize32">
            <summary>
            Indicates the VI_ATTR_MEM_SIZE_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MemorySize64">
            <summary>
            Indicates the VI_ATTR_MEM_SIZE_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.MemorySpace">
            <summary>
            Indicates the VI_ATTR_MEM_SPACE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ModelCode">
            <summary>
            Indicates the VI_ATTR_MODEL_CODE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ModelName">
            <summary>
            Indicates the VI_ATTR_MODEL_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.OperationName">
            <summary>
            Indicates the VI_ATTR_OPER_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiActualLinkWidth">
            <summary>
            Indicates the VI_ATTR_PXI_ACTUAL_LWIDTH native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiBackplaneDestinationTriggerBus">
            <summary>
            Indicates the VI_ATTR_PXI_DEST_TRIG_BUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiBackplaneSourceTriggerBus">
            <summary>
            Indicates the VI_ATTR_PXI_SRC_TRIG_BUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiBusNumber">
            <summary>
            Indicates the VI_ATTR_PXI_BUS_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiChassis">
            <summary>
            Indicates the VI_ATTR_PXI_CHASSIS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiDeviceNumber">
            <summary>
            Indicates the VI_ATTR_PXI_DEV_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiDStarBus">
            <summary>
            Indicates the VI_ATTR_PXI_DSTAR_BUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiDStarSet">
            <summary>
            Indicates the VI_ATTR_PXI_DSTAR_SET native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiFunctionNumber">
            <summary>
            Indicates the VI_ATTR_PXI_FUNC_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiIsExpress">
            <summary>
            Indicates the VI_ATTR_PXI_IS_EXPRESS native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMaximumLinkWidth">
            <summary>
            Indicates the VI_ATTR_PXI_MAX_LWIDTH native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar0">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR0_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar1">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR1_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar2">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR2_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar3">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR3_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar4">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR4_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase32Bar5">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR5_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar0">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR0_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar1">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR1_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar2">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR2_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar3">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR3_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar4">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR4_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryBase64Bar5">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_BASE_BAR5_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar0">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR0_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar1">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR1_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar2">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR2_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar3">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR3_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar4">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR4_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize32Bar5">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR5_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar0">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR0_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar1">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR1_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar2">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR2_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar3">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR3_64 native VISA attribute. Use with GetAttributeInt642.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar4">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR4_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemorySize64Bar5">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_SIZE_BAR5_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar0">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR0 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar1">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR1 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar2">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR2 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar3">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR3 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar4">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR4 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiMemoryTypeBar5">
            <summary>
            Indicates the VI_ATTR_PXI_MEM_TYPE_BAR5 native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiReceivedInterruptData">
            <summary>
            Indicates the VI_ATTR_PXI_RECV_INTR_DATA native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiReceivedInterruptSequence">
            <summary>
            Indicates the VI_ATTR_PXI_RECV_INTR_SEQ native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiSlotLinkWidth">
            <summary>
            Indicates the VI_ATTR_PXI_SLOT_LWIDTH native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiSlotLocalBusLeft">
            <summary>
            Indicates the VI_ATTR_PXI_SLOT_LBUS_LEFT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiSlotLocalBusRight">
            <summary>
            Indicates the VI_ATTR_PXI_SLOT_LBUS_RIGHT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiSlotPath">
            <summary>
            Indicates the VI_ATTR_PXI_SLOTPATH native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiStarTriggerBus">
            <summary>
            Indicates the VI_ATTR_PXI_STAR_TRIG_BUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiStarTriggerLine">
            <summary>
            Indicates the VI_ATTR_PXI_STAR_TRIG_LINE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.PxiTriggerBus">
            <summary>
            Indicates the VI_ATTR_PXI_TRIG_BUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReadBufferOperationMode">
            <summary>
            Indicates the VI_ATTR_RD_BUF_OPER_MODE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReadBufferSize">
            <summary>
            Indicates the VI_ATTR_RD_BUF_SIZE native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReceivedInterruptLevel">
            <summary>
            Indicates the VI_ATTR_RECV_INTR_LEVEL native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReceivedInterruptStatusId">
            <summary>
            Indicates the VI_ATTR_INTR_STATUS_ID native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReceivedSignalProcessorStatusId">
            <summary>
            Indicates the VI_ATTR_SIGP_STATUS_ID native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReceivedTcpAddress">
            <summary>
            Indicates the VI_ATTR_RECV_TCPIP_ADDR native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ReceivedTriggerId">
            <summary>
            Indicates the VI_ATTR_RECV_TRIG_ID native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceManagerSession">
            <summary>
            Indicates the VI_ATTR_RM_SESSION native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceClass">
            <summary>
            Indicates the VI_ATTR_RSRC_CLASS native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceImplementationVersion">
            <summary>
            Indicates the VI_ATTR_RSRC_IMPL_VERSION native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceLockState">
            <summary>
            Indicates the VI_ATTR_RSRC_LOCK_STATE native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceManufacturerId">
            <summary>
            Indicates the VI_ATTR_RSRC_MANF_ID native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceManufacturerName">
            <summary>
            Indicates the VI_ATTR_RSRC_MANF_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceName">
            <summary>
            Indicates the VI_ATTR_RSRC_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.ResourceSpecificationVersion">
            <summary>
            Indicates the VI_ATTR_RSRC_SPEC_VERSION native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SendEndEnabled">
            <summary>
            Indicates the VI_ATTR_SEND_END_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialAvailableByteCount">
            <summary>
            Indicates the VI_ATTR_ASRL_AVAIL_NUM native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialBaud">
            <summary>
            Indicates the VI_ATTR_ASRL_BAUD native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialCtsState">
            <summary>
            Indicates the VI_ATTR_ASRL_CTS_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialDataBits">
            <summary>
            Indicates the VI_ATTR_ASRL_DATA_BITS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialDcdState">
            <summary>
            Indicates the VI_ATTR_ASRL_DCD_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialDsrState">
            <summary>
            Indicates the VI_ATTR_ASRL_DSR_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialDtrState">
            <summary>
            Indicates the VI_ATTR_ASRL_DTR_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialEndIn">
            <summary>
            Indicates the VI_ATTR_ASRL_END_IN native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialEndOut">
            <summary>
            Indicates the VI_ATTR_ASRL_END_OUT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialFlowControl">
            <summary>
            Indicates the VI_ATTR_ASRL_FLOW_CNTRL native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialParity">
            <summary>
            Indicates the VI_ATTR_ASRL_PARITY native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialReplaceCharacter">
            <summary>
            Indicates the VI_ATTR_ASRL_REPLACE_CHAR native VISA attribute. Use with GetAttributeByte.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialRIState">
            <summary>
            Indicates the VI_ATTR_ASRL_RI_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialRtsState">
            <summary>
            Indicates the VI_ATTR_ASRL_RTS_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialStopBits">
            <summary>
            Indicates the VI_ATTR_ASRL_STOP_BITS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialXOffCharacter">
            <summary>
            Indicates the VI_ATTR_ASRL_XOFF_CHAR native VISA attribute. Use with GetAttributeByte.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SerialXOnCharacter">
            <summary>
            Indicates the VI_ATTR_ASRL_XON_CHAR native VISA attribute. Use with GetAttributeByte.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.Slot">
            <summary>
            Indicates the VI_ATTR_SLOT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SourceAccess">
            <summary>
            Indicates the VI_ATTR_SRC_ACCESS_PRIV native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SourceByteOrder">
            <summary>
            Indicates the VI_ATTR_SRC_BYTE_ORDER native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SourceIncrement">
            <summary>
            Indicates the VI_ATTR_SRC_INCREMENT native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.Status">
            <summary>
            Indicates the VI_ATTR_STATUS native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.SuppressEndEnabled">
            <summary>
            Indicates the VI_ATTR_SUPPRESS_END_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpAddress">
            <summary>
            Indicates the VI_ATTR_TCPIP_ADDR native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpDeviceName">
            <summary>
            Indicates the VI_ATTR_TCPIP_DEVICE_NAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpHiSLIPMaximumMessageSizeKB">
            <summary>
            Indicates the VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpHiSLIPOverlapEnabled">
            <summary>
            Indicates the VI_ATTR_TCPIP_HISLIP_OVERLAP_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpHiSLIPVersion">
            <summary>
            Indicates the VI_ATTR_TCPIP_HISLIP_VERSION native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpHostName">
            <summary>
            Indicates the VI_ATTR_TCPIP_HOSTNAME native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpIsHiSLIP">
            <summary>
            Indicates the VI_ATTR_TCPIP_IS_HISLIP native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpKeepAlive">
            <summary>
            Indicates the VI_ATTR_TCPIP_KEEPALIVE native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpNoDelay">
            <summary>
            Indicates the VI_ATTR_TCPIP_NODELAY native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TcpPort">
            <summary>
            Indicates the VI_ATTR_TCPIP_PORT native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TerminationCharacter">
            <summary>
            Indicates the VI_ATTR_TERMCHAR native VISA attribute. Use with GetAttributeByte.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TerminationCharacterEnabled">
            <summary>
            Indicates the VI_ATTR_TERMCHAR_EN native VISA attribute. Use with GetAttributeBoolean.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TimeoutValue">
            <summary>
            Indicates the VI_ATTR_TMO_VALUE native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.TriggerId">
            <summary>
            Indicates the VI_ATTR_TRIG_ID native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UsbInterfaceNumber">
            <summary>
            Indicates the VI_ATTR_USB_INTFC_NUM native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UsbMaximumInterruptSize">
            <summary>
            Indicates the VI_ATTR_USB_MAX_INTR_SIZE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UsbProtocol">
            <summary>
            Indicates the VI_ATTR_USB_PROTOCOL native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UsbReceivedInterruptSize">
            <summary>
            Indicates the VI_ATTR_USB_RECV_INTR_SIZE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UsbSerialNumber">
            <summary>
            Indicates the VI_ATTR_USB_SERIAL_NUM native VISA attribute. Use with GetAttributeString.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.UserData32">
            <summary>
            Indicates the VI_ATTR_USER_DATA_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiDeviceClass">
            <summary>
            Indicates the VI_ATTR_VXI_DEV_CLASS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiLogicalAddress">
            <summary>
            Indicates the VI_ATTR_VXI_LA native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiTriggerStatus">
            <summary>
            Indicates the VI_ATTR_VXI_TRIG_STATUS native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiTriggerSupport">
            <summary>
            Indicates the VI_ATTR_VXI_TRIG_SUPPORT native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiVmeInterruptStatus">
            <summary>
            Indicates the VI_ATTR_VXI_VME_INTR_STATUS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.VxiVmeSystemFailureState">
            <summary>
            Indicates the VI_ATTR_VXI_VME_SYSFAIL_STATE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowAccess">
            <summary>
            Indicates the VI_ATTR_WIN_ACCESS native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowAccessPrivilege">
            <summary>
            Indicates the VI_ATTR_WIN_ACCESS_PRIV native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowBaseAddress32">
            <summary>
            Indicates the VI_ATTR_WIN_BASE_ADDR_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowBaseAddress64">
            <summary>
            Indicates the VI_ATTR_WIN_BASE_ADDR_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowByteOrder">
            <summary>
            Indicates the VI_ATTR_WIN_BYTE_ORDER native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowSize32">
            <summary>
            Indicates the VI_ATTR_WIN_SIZE_32 native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WindowSize64">
            <summary>
            Indicates the VI_ATTR_WIN_SIZE_64 native VISA attribute. Use with GetAttributeInt64.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WriteBufferOperationMode">
            <summary>
            Indicates the VI_ATTR_WR_BUF_OPER_MODE native VISA attribute. Use with GetAttributeInt16.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeVisaAttribute.WriteBufferSize">
            <summary>
            Indicates the VI_ATTR_WR_BUF_SIZE native VISA attribute. Use with GetAttributeInt32.
            </summary>
        </member>
        <member name="T:Ivi.Visa.DataWidth">
            <summary>
            Indicates the data width for VXI data transfer operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.DataWidth.Width8">
            <summary>
            Indicates 8-bit (D08) transfers for VXI data transfer operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.DataWidth.Width16">
            <summary>
            Indicates 16-bit (D16) transfers for VXI data transfer operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.DataWidth.Width32">
            <summary>
            Indicates 32-bit (D32) transfers for VXI data transfer operations.
            </summary>
        </member>
        <member name="F:Ivi.Visa.DataWidth.Width64">
            <summary>
            Indicates 64-bit (D64) transfers for VXI data transfer operations.
            </summary>
        </member>
        <member name="T:Ivi.Visa.EventType">
            <summary>
            Indicates the type of a VISA.NET event.
            </summary>
        </member>
        <member name="F:Ivi.Visa.EventType.Custom">
            <summary>
            An implementation specific event.
            </summary>
        </member>
        <member name="F:Ivi.Visa.EventType.AllEnabled">
            <summary>
            Indicates the set of VISA.NET events that are currently enabled for the current session,
            including any custom events.  This value is not valid for use with IVisaSession.EnableEvent.
            </summary>
            <remarks>Corresponds to VISA C value VI_ALL_ENABLED_EVENTS.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.ServiceRequest">
            <summary>
            A service request event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_SERVICE_REQ.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.Clear">
            <summary>
            A device clear event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_CLEAR.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.GpibControllerInCharge">
            <summary>
            A GPIB controller in charge state change event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_GPIB_CIC.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.GpibTalk">
            <summary>
            A GPIB talk event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_GPIB_TALK.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.GpibListen">
            <summary>
            A GPIB listen event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_GPIB_LISTEN.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.VxiVmeSystemFailure">
            <summary>
            A VXI VME system failure event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_VXI_VME_SYSFAIL.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.VxiVmeSystemReset">
            <summary>
            A VXI VME system reset event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_VXI_VME_SYSRESET.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.VxiSignalProcessor">
            <summary>
            A VXI signal processor event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_VXI_SIGP.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.VxiVmeInterrupt">
            <summary>
            A VXI VME interrupt event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_VXI_VME_INTR.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.PxiInterrupt">
            <summary>
            A PXI interrupt event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_PXI_INTR.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.UsbInterrupt">
            <summary>
            A USB interrupt event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_USB_INTR.</remarks>
        </member>
        <member name="F:Ivi.Visa.EventType.Trigger">
            <summary>
            A trigger event.
            </summary>
            <remarks>Corresponds to VISA C value VI_EVENT_TRIG.</remarks>
        </member>
        <member name="T:Ivi.Visa.NativeVisaException">
            <summary>
            An error related to the underlying VISA native C implementation has occurred.  The status code
            indicates the type of error that occurred.
            </summary>
            <remarks>
            This exception should not be used for other than its intended purpose.  That is, it should
            not be used in situations where the underlying implementation is not a VISA C implementation.
            For example, it should not be used to report VISA C warning or success status codes.
            </remarks>
        </member>
        <member name="M:Ivi.Visa.NativeVisaException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.NativeVisaException" /> class
            with the specified VISA error code.
            </summary>
            <param name="errorCode">The underlying VISA status code of the error that occurred.</param>
        </member>
        <member name="M:Ivi.Visa.NativeVisaException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.NativeVisaException" /> class
            with the specified message and VISA error code.
            </summary>
            <param name="errorCode">The underlying VISA status code of the error that occurred.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Ivi.Visa.NativeVisaException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.NativeVisaException" /> class
            with the specified message and VISA error code and a reference to the inner exception
            that is the cause of this exception.
            </summary>
            <param name="errorCode">The underlying VISA status code of the error that occurred.</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception,
            or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Ivi.Visa.NativeVisaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.NativeVisaException"/> class
            with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Ivi.Visa.NativeVisaException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
        </member>
        <member name="P:Ivi.Visa.NativeVisaException.ErrorCode">
            <summary>
            The underlying VISA status code of the error that occurred.
            The standard error code values are defined by the NativeErrorCode class.
            </summary>
        </member>
        <member name="T:Ivi.Visa.HardwareInterfaceType">
            <summary>
            Indicates the hardware interface type of the current session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Custom">
            <summary>
            A vendor-specific hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Gpib">
            <summary>
            A GPIB hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Vxi">
            <summary>
            A VXI hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.GpibVxi">
            <summary>
            A GPIB hardware interface to a VXI hardware platform.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Serial">
            <summary>
            A Serial hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Pxi">
            <summary>
            A PXI hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Tcp">
            <summary>
            A TCPIP hardware interface.
            </summary>
        </member>
        <member name="F:Ivi.Visa.HardwareInterfaceType.Usb">
            <summary>
            A USB hardware interface.
            </summary>
        </member>
        <member name="T:Ivi.Visa.IOProtocol">
            <summary>
            Indicates which protocol to use.  Choices are dependent on the session.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOProtocol.Normal">
            <summary>
            Normal protocol.  May be used with all session types.  For VXI, this indicates
            word serial protocol.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOProtocol.Fdc">
            <summary>
            Fast data channel (FDC) protocol.  May be used with VXI session types.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOProtocol.HS488">
            <summary>
            GPIB high-speed (HS-488) protocol.  May be used with GPIB and GPIB-VXI
            session types.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOProtocol.Ieee4882">
            <summary>
            Use IEEE 488.2 strings to send certain meta-messages.  May
            be used with Serial and TCPIP SOCKET session types.  May not be used
            with GPIB or TCPIP INSTR session types.
            </summary>
        </member>
        <member name="F:Ivi.Visa.IOProtocol.UsbTmcVendor">
            <summary>
            A USBTMC vendor-specific protocol.  May be used with USB session
            types.
            </summary>
        </member>
        <member name="T:Ivi.Visa.NativeErrorCode">
            <summary>
            The NativeErrorCode class defines constants for each of the standard VISA error status
            codes that may be returned by an underlying VISA C implementation.
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.SystemError">
            <summary>
            The error status code value for VI_ERROR_SYSTEM_ERROR (0xBFFF0000).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidObject">
            <summary>
            The error status code value for VI_ERROR_INV_OBJECT (0xBFFF000E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ResourceLocked">
            <summary>
            The error status code value for VI_ERROR_RSRC_LOCKED (0xBFFF000F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidExpression">
            <summary>
            The error status code value for VI_ERROR_INV_EXPR (0xBFFF0010).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ResourceNotFound">
            <summary>
            The error status code value for VI_ERROR_RSRC_NFOUND (0xBFFF0011).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidResourceName">
            <summary>
            The error status code value for VI_ERROR_INV_RSRC_NAME (0xBFFF0012).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidAccessMode">
            <summary>
            The error status code value for VI_ERROR_INV_ACC_MODE (0xBFFF0013).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.Timeout">
            <summary>
            The error status code value for VI_ERROR_TMO (0xBFFF0015).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.CloseFailed">
            <summary>
            The error status code value for VI_ERROR_CLOSING_FAILED (0xBFFF0014).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidDegree">
            <summary>
            The error status code value for VI_ERROR_INV_DEGREE (0xBFFF001B).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidJobId">
            <summary>
            The error status code value for VI_ERROR_INV_JOB_ID (0xBFFF001C).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedAttribute">
            <summary>
            The error status code value for VI_ERROR_NSUP_ATTR (0xBFFF001D).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedAttributeValue">
            <summary>
            The error status code value for VI_ERROR_NSUP_ATTR_STATE (0xBFFF001E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ReadOnlyAttribute">
            <summary>
            The error status code value for VI_ERROR_ATTR_READONLY (0xBFFF001F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidLockType">
            <summary>
            The error status code value for VI_ERROR_INV_LOCK_TYPE (0xBFFF0020).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidAccessKey">
            <summary>
            The error status code value for VI_ERROR_INV_ACCESS_KEY (0xBFFF0021).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidEvent">
            <summary>
            The error status code value for VI_ERROR_INV_EVENT (0xBFFF0026).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidMechanism">
            <summary>
            The error status code value for VI_ERROR_INV_MECH (0xBFFF0027).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.HandlerNotInstalled">
            <summary>
            The error status code value for VI_ERROR_HNDLR_NINSTALLED (0xBFFF0028).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidHandlerReference">
            <summary>
            The error status code value for VI_ERROR_INV_HNDLR_REF (0xBFFF0029).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidEventContext">
            <summary>
            The error status code value for VI_ERROR_INV_CONTEXT (0xBFFF002A).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.QueueOverflow">
            <summary>
            The error status code value for VI_ERROR_QUEUE_OVERFLOW (0xBFFF002D).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.NotEnabled">
            <summary>
            The error status code value for VI_ERROR_NENABLED (0xBFFF002F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.Abort">
            <summary>
            The error status code value for VI_ERROR_ABORT (0xBFFF0030).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.RawWriteProtocolViolation">
            <summary>
            The error status code value for VI_ERROR_RAW_WR_PROT_VIOL (0xBFFF0034).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.RawReadProtocolViolation">
            <summary>
            The error status code value for VI_ERROR_RAW_RD_PROT_VIOL (0xBFFF0035).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.OutputProtocolViolation">
            <summary>
            The error status code value for VI_ERROR_OUTP_PROT_VIOL (0xBFFF0036).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InputProtocolViolation">
            <summary>
            The error status code value for VI_ERROR_INP_PROT_VIOL (0xBFFF0037).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.BusError">
            <summary>
            The error status code value for VI_ERROR_BERR (0xBFFF0038).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.OperationInProgress">
            <summary>
            The error status code value for VI_ERROR_IN_PROGRESS (0xBFFF0039).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidSetup">
            <summary>
            The error status code value for VI_ERROR_INV_SETUP (0xBFFF003A).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.QueueError">
            <summary>
            The error status code value for VI_ERROR_QUEUE_ERROR (0xBFFF003B).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.MemoryAllocation">
            <summary>
            The error status code value for VI_ERROR_ALLOC (0xBFFF003C).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidBufferMask">
            <summary>
            The error status code value for VI_ERROR_INV_MASK (0xBFFF003D).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.IOError">
            <summary>
            The error status code value for VI_ERROR_IO (0xBFFF003E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidFormatSpecifier">
            <summary>
            The error status code value for VI_ERROR_INV_FMT (0xBFFF003F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedFormatSpecifier">
            <summary>
            The error status code value for VI_ERROR_NSUP_FMT (0xBFFF0041).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.TriggerLineInUse">
            <summary>
            The error status code value for VI_ERROR_LINE_IN_USE (0xBFFF0042).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.TriggerLineNotReserved">
            <summary>
            The error status code value for VI_ERROR_LINE_NRESERVED (0xBFFF0043).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedMode">
            <summary>
            The error status code value for VI_ERROR_NSUP_MODE (0xBFFF0046).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ServiceRequestNotReceived">
            <summary>
            The error status code value for VI_ERROR_SRQ_NOCCURRED (0xBFFF004A).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidAddressSpace">
            <summary>
            The error status code value for VI_ERROR_INV_SPACE (0xBFFF004E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidOffset">
            <summary>
            The error status code value for VI_ERROR_INV_OFFSET (0xBFFF0051).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidDataWidth">
            <summary>
            The error status code value for VI_ERROR_INV_WIDTH (0xBFFF0052).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedOffset">
            <summary>
            The error status code value for VI_ERROR_NSUP_OFFSET (0xBFFF0054).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.VariableDataWidthNotSupported">
            <summary>
            The error status code value for VI_ERROR_NSUP_VAR_WIDTH (0xBFFF0055).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.WindowNotMapped">
            <summary>
            The error status code value for VI_ERROR_WINDOW_NMAPPED (0xBFFF0057).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ResponsePending">
            <summary>
            The error status code value for VI_ERROR_RESP_PENDING (0xBFFF0059).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.NoListeners">
            <summary>
            The error status code value for VI_ERROR_NLISTENERS (0xBFFF005F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.NotControllerInCharge">
            <summary>
            The error status code value for VI_ERROR_NCIC (0xBFFF0060).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.NotSystemController">
            <summary>
            The error status code value for VI_ERROR_NSYS_CNTLR (0xBFFF0061).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.OperationNotSupported">
            <summary>
            The error status code value for VI_ERROR_NSUP_OPER (0xBFFF0067).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InterruptPending">
            <summary>
            The error status code value for VI_ERROR_INTR_PENDING (0xBFFF0068).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ParityError">
            <summary>
            The error status code value for VI_ERROR_ASRL_PARITY (0xBFFF006A).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.FramingError">
            <summary>
            The error status code value for VI_ERROR_ASRL_FRAMING (0xBFFF006B).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.Overrun">
            <summary>
            The error status code value for VI_ERROR_ASRL_OVERRUN (0xBFFF006C).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.TriggerNotMapped">
            <summary>
            The error status code value for VI_ERROR_TRIG_NMAPPED (0xBFFF006E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.OffsetNotAligned">
            <summary>
            The error status code value for VI_ERROR_NSUP_ALIGN_OFFSET (0xBFFF0070).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UserBufferError">
            <summary>
            The error status code value for VI_ERROR_USER_BUF (0xBFFF0071).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ResourceBusy">
            <summary>
            The error status code value for VI_ERROR_RSRC_BUSY (0xBFFF0072).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.WidthNotSupported">
            <summary>
            The error status code value for VI_ERROR_NSUP_WIDTH (0xBFFF0076).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidParameter">
            <summary>
            The error status code value for VI_ERROR_INV_PARAMETER (0xBFFF0078).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidProtocol">
            <summary>
            The error status code value for VI_ERROR_INV_PROT (0xBFFF0079).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidWindowSize">
            <summary>
            The error status code value for VI_ERROR_INV_SIZE (0xBFFF007B).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.WindowAlreadyMapped">
            <summary>
            The error status code value for VI_ERROR_WINDOW_MAPPED (0xBFFF0080).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.OperationNotImplemented">
            <summary>
            The error status code value for VI_ERROR_NIMPL_OPER (0xBFFF0081).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidLength">
            <summary>
            The error status code value for VI_ERROR_INV_LENGTH (0xBFFF0083).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidMode">
            <summary>
            The error status code value for VI_ERROR_INV_MODE (0xBFFF0091).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.SessionNotLocked">
            <summary>
            The error status code value for VI_ERROR_SESN_NLOCKED (0xBFFF009C).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.MemoryNotShared">
            <summary>
            The error status code value for VI_ERROR_MEM_NSHARED (0xBFFF009D).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.LibraryNotFound">
            <summary>
            The error status code value for VI_ERROR_LIBRARY_NFOUND (0xBFFF009E).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.UnsupportedInterrupt">
            <summary>
            The error status code value for VI_ERROR_NSUP_INTR (0xBFFF009F).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InvalidLine">
            <summary>
            The error status code value for VI_ERROR_INV_LINE (0xBFFF00A0h
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.FileAccessError">
            <summary>
            The error status code value for VI_ERROR_FILE_ACCESS (0xBFFF00A1).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.FileIOError">
            <summary>
            The error status code value for VI_ERROR_FILE_IO (0xBFFF00A2).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.TriggerLineNotSupported">
            <summary>
            The error status code value for VI_ERROR_NSUP_LINE (0xBFFF00A3).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.EventMechanismNotSupported">
            <summary>
            The error status code value for VI_ERROR_NSUP_MECH (0xBFFF00A4).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.InterfaceNumberNotConfigured">
            <summary>
            The error status code value for VI_ERROR_INTF_NUM_NCONFIG (0xBFFF00A5).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.ConnectionLost">
            <summary>
            The error status code value for VI_ERROR_CONN_LOST (0xBFFF00A6).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.MachineNotAvailable">
            <summary>
            The error status code value for VI_ERROR_MACHINE_NAVAIL (0xBFFF00A7).
            </summary>
        </member>
        <member name="F:Ivi.Visa.NativeErrorCode.AccessDenied">
            <summary>
            The error status code value for VI_ERROR_NPERMISSION (0xBFFF00A8).
            </summary>
        </member>
        <member name="M:Ivi.Visa.NativeErrorCode.GetMacroNameFromStatusCode(System.Int32)">
            <summary>
            Returns the VISA name of the specified VISA defined error status code, without the
            leading "VI_".
            </summary>
        </member>
        <member name="T:Ivi.Visa.TriggerLine">
            <summary>
            Specifies a VXI or PXI trigger line.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.All">
            <summary>
            All VXI or PXI trigger lines.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl0">
            <summary>
            The TTL0 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl1">
            <summary>
            The TTL1 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl2">
            <summary>
            The TTL2 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl3">
            <summary>
            The TTL3 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl4">
            <summary>
            The TTL4 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl5">
            <summary>
            The TTL5 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl6">
            <summary>
            The TTL6 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ttl7">
            <summary>
            The TTL7 trigger (VXI and PXI).
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl0">
            <summary>
            The VXI ECL0 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl1">
            <summary>
            The VXI ECL1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl2">
            <summary>
            The VXI ECL2 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl3">
            <summary>
            The VXI ECL3 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl4">
            <summary>
            The VXI ECL4 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.Ecl5">
            <summary>
            The VXI ECL5 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot1">
            <summary>
            The VXI Star slot 1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot2">
            <summary>
            The VXI Star slot 2 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot3">
            <summary>
            The VXI Star slot 3 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot4">
            <summary>
            The VXI Star slot 4 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot5">
            <summary>
            The VXI Star slot 5 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot6">
            <summary>
            The VXI Star slot 6 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot7">
            <summary>
            The VXI Star slot 7 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot8">
            <summary>
            The VXI Star slot 8 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot9">
            <summary>
            The VXI Star slot 9 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot10">
            <summary>
            The VXI Star slot 10 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot11">
            <summary>
            The VXI Star slot 11 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarSlot12">
            <summary>
            The VXI Star slot 12 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarInstrument">
            <summary>
            The VXI Star instrument trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.PanelIn">
            <summary>
            The VXI Panel In trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.PanelOut">
            <summary>
            The VXI Panel Out trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarVxi0">
            <summary>
            The VXI Star 0 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarVxi1">
            <summary>
            The VXI Star 1 trigger.
            </summary>
        </member>
        <member name="F:Ivi.Visa.TriggerLine.StarVxi2">
            <summary>
            The VXI Star 2 trigger.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiTriggerProtocol">
            <summary>
            Indicates the trigger protocol to be used when a VXI trigger is asserted.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiTriggerProtocol.Software">
            <summary>
            Sends the word serial trigger command.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiTriggerProtocol.On">
            <summary>
            Turns the associated trigger line on.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiTriggerProtocol.Off">
            <summary>
            Turns the associated trigger line off.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiTriggerProtocol.Sync">
            <summary>
            Turns the associated trigger line on, then off.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiCommandMode">
            <summary>
            Indicates whether to VISA should issue a command and/or retrieve a response, and
            what type or size of command and/or response to use.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.Command16Bit">
            <summary>
            Send a 16-bit Word Serial command.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.Command32Bit">
            <summary>
            Send a 32-bit Word Serial command.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.Command32BitResponse16Bit">
            <summary>
            Send a 32-bit Word Serial command and get a 16-bit response.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.CommandResponse16Bit">
            <summary>
            Send a 16-bit Word Serial command and get a 16-bit response.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.CommandResponse32Bit">
            <summary>
            Send a 32-bit Word Serial command and get a 32-bit response.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.Response16Bit">
            <summary>
            Get a 16-bit response from a previous query.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiCommandMode.Response32Bit">
            <summary>
            Get a 32-bit response from a previous query.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiUtilitySignal">
            <summary>
            Indicates the utility bus signal to assert.  This is valid only for VXI BACKPLANE
            sessions.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiUtilitySignal.AssertSystemReset">
            <summary>
            Asserts the SYSRESET utility bus signal.  This is a serious action that
            affects the entire VXIbus system.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiUtilitySignal.AssertSystemFailure">
            <summary>
            Asserts the SYSFAIL utility bus signal.
            </summary>
        </member>
        <member name="F:Ivi.Visa.VxiUtilitySignal.DeassertSystemFailure">
            <summary>
            Deasserts the SYSFAIL utility bus signal.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiInterruptEventArgs">
            <summary>
            Provides additional data about a VXI VME interrupt event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VxiInterruptEventArgs.#ctor(System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VxiVmeInterruptEventArgs" /> class.
            </summary>
            <param name="irqLevel">The interrupt level of the VXI VME interrupt.</param>
            <param name="statusId">The status ID of the VXI VME interrupt.</param>
        </member>
        <member name="P:Ivi.Visa.VxiInterruptEventArgs.IrqLevel">
            <summary>
            The interrupt level of the VXI VME interrupt.
            </summary>
        </member>
        <member name="P:Ivi.Visa.VxiInterruptEventArgs.StatusId">
            <summary>
            The status ID of the VXI VME interrupt.
            </summary>
        </member>
        <member name="T:Ivi.Visa.VxiTriggerEventArgs">
            <summary>
            Provides additional data about a VXI trigger event.
            </summary>
        </member>
        <member name="M:Ivi.Visa.VxiTriggerEventArgs.#ctor(Ivi.Visa.TriggerLine)">
            <summary>
            Initializes a new instance of the <see cref="T:Ivi.Visa.VxiTriggerEventArgs" /> class.
            </summary>
            <param name="triggerLine">The trigger line that caused the event.</param>
        </member>
        <member name="P:Ivi.Visa.VxiTriggerEventArgs.TriggerLine">
            <summary>
            The trigger line that caused the event.
            </summary>
        </member>
    </members>
</doc>
